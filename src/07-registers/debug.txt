
registers:	file format elf32-littlearm


Disassembly of section .text:

08000194 <Reset>:
; pub unsafe extern "C" fn Reset() -> ! {
 8000194:      	push	{r7, lr}
 8000196:      	mov	r7, sp
;     __pre_init();
 8000198:      	bl	#0x146e
 800019c:      	b	#-0x2 <Reset+0xa>
;     r0::zero_bss(&mut __sbss, &mut __ebss);
 800019e:      	movw	r0, #0x0
 80001a2:      	movt	r0, #0x2000
 80001a6:      	movw	r1, #0x4
 80001aa:      	movt	r1, #0x2000
 80001ae:      	bl	#0x145a
 80001b2:      	b	#-0x2 <Reset+0x20>
;     r0::init_data(&mut __sdata, &mut __edata, &__sidata);
 80001b4:      	movw	r0, #0x0
 80001b8:      	movt	r0, #0x2000
 80001bc:      	movw	r1, #0x0
 80001c0:      	movt	r1, #0x2000
 80001c4:      	movw	r2, #0x3cf4
 80001c8:      	movt	r2, #0x800
 80001cc:      	bl	#0x1486
 80001d0:      	b	#-0x2 <Reset+0x3e>
 80001d2:      	movw	r0, #0xed88
 80001d6:      	movt	r0, #0xe000
;                 *SCB_CPACR | SCB_CPACR_FPU_ENABLE | SCB_CPACR_FPU_USER,
 80001da:      	ldr	r1, [r0]
 80001dc:      	orr	r1, r1, #0xf00000
;             core::ptr::write_volatile(
 80001e0:      	bl	#0x1568
 80001e4:      	b	#-0x2 <Reset+0x52>
;             trampoline()
 80001e6:      	bl	#0x13fc
 80001ea:      	trap

080001ec <main>:
; #[entry]
 80001ec:      	push	{r7, lr}
 80001ee:      	mov	r7, sp
 80001f0:      	bl	#0x2
 80001f4:      	trap

080001f6 <registers::__cortex_m_rt_main::hab9796ba6df3be8e>:
; fn main() -> ! {
 80001f6:      	push	{r7, lr}
 80001f8:      	mov	r7, sp
;     aux7::init();
 80001fa:      	bl	#0x3e
 80001fe:      	b	#-0x2 <registers::__cortex_m_rt_main::hab9796ba6df3be8e+0xa>
;         *(GPIOE_BSRR as *mut u32) = 1 << 9;
 8000200:      	movw	r0, #0x367c
 8000204:      	movt	r0, #0x800
 8000208:      	ldr	r0, [r0]
 800020a:      	movw	r1, #0x1018
 800020e:      	movt	r1, #0x4800
 8000212:      	str	r0, [r1]
;         *(GPIOE_BSRR as *mut u32) = 1 << 11;
 8000214:      	movw	r0, #0x3684
 8000218:      	movt	r0, #0x800
 800021c:      	ldr	r0, [r0]
 800021e:      	str	r0, [r1]
;         *(GPIOE_BSRR as *mut u32) = 1 << (9 + 16);
 8000220:      	movw	r0, #0x368c
 8000224:      	movt	r0, #0x800
 8000228:      	ldr	r0, [r0]
 800022a:      	str	r0, [r1]
;         *(GPIOE_BSRR as *mut u32) = 1 << (11 + 16);
 800022c:      	movw	r0, #0x3674
 8000230:      	movt	r0, #0x800
 8000234:      	ldr	r0, [r0]
 8000236:      	str	r0, [r1]
;     loop {}
 8000238:      	b	#-0x2 <registers::__cortex_m_rt_main::hab9796ba6df3be8e+0x44>
 800023a:      	b	#-0x4 <registers::__cortex_m_rt_main::hab9796ba6df3be8e+0x44>

0800023c <aux7::init::heaf7d7d34cbd65cd>:
; pub fn init() -> (ITM, &'static RegisterBlock) {
 800023c:      	push	{r7, lr}
 800023e:      	mov	r7, sp
 8000240:      	sub	sp, #0x58
;     let device_periphs = stm32::Peripherals::take().unwrap();
 8000242:      	bl	#0x238
 8000246:      	str	r0, [sp, #0x8]
 8000248:      	b	#-0x2 <aux7::init::heaf7d7d34cbd65cd+0xe>
 800024a:      	ldr	r0, [sp, #0x8]
 800024c:      	and	r0, r0, #0x1
 8000250:      	movw	r1, #0x36bc
 8000254:      	movt	r1, #0x800
 8000258:      	bl	#0xf4e
 800025c:      	b	#-0x2 <aux7::init::heaf7d7d34cbd65cd+0x22>
 800025e:      	add	r0, sp, #0x10
;     let mut reset_and_clock_control = device_periphs.RCC.constrain();
 8000260:      	bl	#0x10f2
 8000264:      	b	#-0x2 <aux7::init::heaf7d7d34cbd65cd+0x2a>
 8000266:      	add	r0, sp, #0x10
;     let mut gpioe = device_periphs.GPIOE.split(&mut reset_and_clock_control.ahb);
 8000268:      	bl	#0x1114
 800026c:      	b	#-0x2 <aux7::init::heaf7d7d34cbd65cd+0x32>
 800026e:      	add	r0, sp, #0x3c
;     let _leds = Leds::new(
 8000270:      	str	r0, [sp, #0x4]
 8000272:      	ldr	r1, [sp, #0x4]
 8000274:      	bl	#0x3c
 8000278:      	str	r1, [sp, #0x54]
 800027a:      	str	r0, [sp, #0x50]
 800027c:      	ldr	r0, [sp, #0x50]
 800027e:      	ldr	r1, [sp, #0x54]
 8000280:      	str	r1, [sp, #0x44]
 8000282:      	str	r0, [sp, #0x40]
 8000284:      	b	#-0x2 <aux7::init::heaf7d7d34cbd65cd+0x4a>
;     let core_periphs = cortex_m::Peripherals::take().unwrap();
 8000286:      	bl	#0xe74
 800028a:      	str	r0, [sp]
 800028c:      	b	#-0x2 <aux7::init::heaf7d7d34cbd65cd+0x52>
 800028e:      	ldr	r0, [sp]
 8000290:      	and	r0, r0, #0x1
 8000294:      	movw	r1, #0x36cc
 8000298:      	movt	r1, #0x800
 800029c:      	bl	#0xf3e
 80002a0:      	b	#-0x2 <aux7::init::heaf7d7d34cbd65cd+0x66>
;     (core_periphs.ITM, unsafe { &*stm32f303::GPIOE::ptr() })
 80002a2:      	b	#-0x2 <aux7::init::heaf7d7d34cbd65cd+0x68>
 80002a4:      	movw	r0, #0x1000
 80002a8:      	movt	r0, #0x4800
;     (core_periphs.ITM, unsafe { &*stm32f303::GPIOE::ptr() })
 80002ac:      	str	r0, [sp, #0xc]
; }
 80002ae:      	ldr	r0, [sp, #0xc]
 80002b0:      	add	sp, #0x58
 80002b2:      	pop	{r7, pc}

080002b4 <stm32f3_discovery::leds::Leds::new::hb02396ee289d8121>:
;     pub fn new<PE8Mode, PE9Mode, PE10Mode, PE11Mode, PE12Mode, PE13Mode, PE14Mode, PE15Mode>(
 80002b4:      	push	{r4, r5, r7, lr}
 80002b6:      	add	r7, sp, #0x8
 80002b8:      	sub	sp, #0x78
 80002ba:      	str	r0, [sp, #0x70]
 80002bc:      	str	r1, [sp, #0x74]
;             ld3: pe9
 80002be:      	str	r0, [sp, #0x44]
 80002c0:      	str	r1, [sp, #0x40]
 80002c2:      	bl	#0x542
 80002c6:      	b	#-0x2 <stm32f3_discovery::leds::Leds::new::hb02396ee289d8121+0x14>
 80002c8:      	bl	#0xda6
 80002cc:      	str	r0, [sp, #0x3c]
 80002ce:      	b	#-0x2 <stm32f3_discovery::leds::Leds::new::hb02396ee289d8121+0x1c>
 80002d0:      	ldr	r0, [sp, #0x3c]
 80002d2:      	bl	#0x324
 80002d6:      	str	r0, [sp, #0x38]
 80002d8:      	b	#-0x2 <stm32f3_discovery::leds::Leds::new::hb02396ee289d8121+0x26>
;             ld4: pe8
 80002da:      	ldr	r0, [sp, #0x44]
 80002dc:      	ldr	r1, [sp, #0x40]
 80002de:      	bl	#0x3f4
 80002e2:      	b	#-0x2 <stm32f3_discovery::leds::Leds::new::hb02396ee289d8121+0x30>
 80002e4:      	bl	#0xd7a
 80002e8:      	str	r0, [sp, #0x34]
 80002ea:      	b	#-0x2 <stm32f3_discovery::leds::Leds::new::hb02396ee289d8121+0x38>
 80002ec:      	ldr	r0, [sp, #0x34]
 80002ee:      	bl	#0x308
 80002f2:      	str	r0, [sp, #0x30]
 80002f4:      	b	#-0x2 <stm32f3_discovery::leds::Leds::new::hb02396ee289d8121+0x42>
;             ld5: pe10
 80002f6:      	ldr	r0, [sp, #0x44]
 80002f8:      	ldr	r1, [sp, #0x40]
 80002fa:      	bl	#0x63c
 80002fe:      	b	#-0x2 <stm32f3_discovery::leds::Leds::new::hb02396ee289d8121+0x4c>
 8000300:      	bl	#0xd7e
 8000304:      	str	r0, [sp, #0x2c]
 8000306:      	b	#-0x2 <stm32f3_discovery::leds::Leds::new::hb02396ee289d8121+0x54>
 8000308:      	ldr	r0, [sp, #0x2c]
 800030a:      	bl	#0x2ec
 800030e:      	str	r0, [sp, #0x28]
 8000310:      	b	#-0x2 <stm32f3_discovery::leds::Leds::new::hb02396ee289d8121+0x5e>
;             ld6: pe15
 8000312:      	ldr	r0, [sp, #0x44]
 8000314:      	ldr	r1, [sp, #0x40]
 8000316:      	bl	#0xc1a
 800031a:      	b	#-0x2 <stm32f3_discovery::leds::Leds::new::hb02396ee289d8121+0x68>
 800031c:      	bl	#0xdb2
 8000320:      	str	r0, [sp, #0x24]
 8000322:      	b	#-0x2 <stm32f3_discovery::leds::Leds::new::hb02396ee289d8121+0x70>
 8000324:      	ldr	r0, [sp, #0x24]
 8000326:      	bl	#0x2d0
 800032a:      	str	r0, [sp, #0x20]
 800032c:      	b	#-0x2 <stm32f3_discovery::leds::Leds::new::hb02396ee289d8121+0x7a>
;             ld7: pe11
 800032e:      	ldr	r0, [sp, #0x44]
 8000330:      	ldr	r1, [sp, #0x40]
 8000332:      	bl	#0x736
 8000336:      	b	#-0x2 <stm32f3_discovery::leds::Leds::new::hb02396ee289d8121+0x84>
 8000338:      	bl	#0xd56
 800033c:      	str	r0, [sp, #0x1c]
 800033e:      	b	#-0x2 <stm32f3_discovery::leds::Leds::new::hb02396ee289d8121+0x8c>
 8000340:      	ldr	r0, [sp, #0x1c]
 8000342:      	bl	#0x2b4
 8000346:      	str	r0, [sp, #0x18]
 8000348:      	b	#-0x2 <stm32f3_discovery::leds::Leds::new::hb02396ee289d8121+0x96>
;             ld8: pe14
 800034a:      	ldr	r0, [sp, #0x44]
 800034c:      	ldr	r1, [sp, #0x40]
 800034e:      	bl	#0xab0
 8000352:      	b	#-0x2 <stm32f3_discovery::leds::Leds::new::hb02396ee289d8121+0xa0>
 8000354:      	bl	#0xd6a
 8000358:      	str	r0, [sp, #0x14]
 800035a:      	b	#-0x2 <stm32f3_discovery::leds::Leds::new::hb02396ee289d8121+0xa8>
 800035c:      	ldr	r0, [sp, #0x14]
 800035e:      	bl	#0x298
 8000362:      	str	r0, [sp, #0x10]
 8000364:      	b	#-0x2 <stm32f3_discovery::leds::Leds::new::hb02396ee289d8121+0xb2>
;             ld9: pe12
 8000366:      	ldr	r0, [sp, #0x44]
 8000368:      	ldr	r1, [sp, #0x40]
 800036a:      	bl	#0x830
 800036e:      	b	#-0x2 <stm32f3_discovery::leds::Leds::new::hb02396ee289d8121+0xbc>
 8000370:      	bl	#0xd2e
 8000374:      	str	r0, [sp, #0xc]
 8000376:      	b	#-0x2 <stm32f3_discovery::leds::Leds::new::hb02396ee289d8121+0xc4>
 8000378:      	ldr	r0, [sp, #0xc]
 800037a:      	bl	#0x27c
 800037e:      	str	r0, [sp, #0x8]
 8000380:      	b	#-0x2 <stm32f3_discovery::leds::Leds::new::hb02396ee289d8121+0xce>
;             ld10: pe13
 8000382:      	ldr	r0, [sp, #0x44]
 8000384:      	ldr	r1, [sp, #0x40]
 8000386:      	bl	#0x946
 800038a:      	b	#-0x2 <stm32f3_discovery::leds::Leds::new::hb02396ee289d8121+0xd8>
 800038c:      	bl	#0xd22
 8000390:      	str	r0, [sp, #0x4]
 8000392:      	b	#-0x2 <stm32f3_discovery::leds::Leds::new::hb02396ee289d8121+0xe0>
 8000394:      	ldr	r0, [sp, #0x4]
 8000396:      	bl	#0x260
 800039a:      	str	r0, [sp]
 800039c:      	b	#-0x2 <stm32f3_discovery::leds::Leds::new::hb02396ee289d8121+0xea>
;         let mut leds = Leds {
 800039e:      	ldr	r0, [sp, #0x38]
 80003a0:      	strb.w	r0, [sp, #0x48]
 80003a4:      	ldr	r1, [sp, #0x30]
 80003a6:      	strb.w	r1, [sp, #0x49]
 80003aa:      	ldr	r2, [sp, #0x28]
 80003ac:      	strb.w	r2, [sp, #0x4a]
 80003b0:      	ldr	r3, [sp, #0x20]
 80003b2:      	strb.w	r3, [sp, #0x4b]
 80003b6:      	ldr.w	r12, [sp, #0x18]
 80003ba:      	strb.w	r12, [sp, #0x4c]
 80003be:      	ldr.w	lr, [sp, #0x10]
 80003c2:      	strb.w	lr, [sp, #0x4d]
 80003c6:      	ldr	r4, [sp, #0x8]
 80003c8:      	strb.w	r4, [sp, #0x4e]
 80003cc:      	ldr	r5, [sp]
 80003ce:      	strb.w	r5, [sp, #0x4f]
 80003d2:      	add	r0, sp, #0x48
;         leds.ld3.off().ok();
 80003d4:      	bl	#0x94
 80003d8:      	b	#-0x2 <stm32f3_discovery::leds::Leds::new::hb02396ee289d8121+0x126>
 80003da:      	bl	#0xe86
 80003de:      	b	#-0x2 <stm32f3_discovery::leds::Leds::new::hb02396ee289d8121+0x12c>
 80003e0:      	add	r0, sp, #0x48
;         leds.ld4.off().ok();
 80003e2:      	adds	r0, #0x1
 80003e4:      	bl	#0x84
 80003e8:      	b	#-0x2 <stm32f3_discovery::leds::Leds::new::hb02396ee289d8121+0x136>
 80003ea:      	bl	#0xe76
 80003ee:      	b	#-0x2 <stm32f3_discovery::leds::Leds::new::hb02396ee289d8121+0x13c>
 80003f0:      	add	r0, sp, #0x48
;         leds.ld5.off().ok();
 80003f2:      	adds	r0, #0x2
 80003f4:      	bl	#0x74
 80003f8:      	b	#-0x2 <stm32f3_discovery::leds::Leds::new::hb02396ee289d8121+0x146>
 80003fa:      	bl	#0xe66
 80003fe:      	b	#-0x2 <stm32f3_discovery::leds::Leds::new::hb02396ee289d8121+0x14c>
 8000400:      	add	r0, sp, #0x48
;         leds.ld6.off().ok();
 8000402:      	adds	r0, #0x3
 8000404:      	bl	#0x64
 8000408:      	b	#-0x2 <stm32f3_discovery::leds::Leds::new::hb02396ee289d8121+0x156>
 800040a:      	bl	#0xe56
 800040e:      	b	#-0x2 <stm32f3_discovery::leds::Leds::new::hb02396ee289d8121+0x15c>
 8000410:      	add	r0, sp, #0x48
;         leds.ld7.off().ok();
 8000412:      	adds	r0, #0x4
 8000414:      	bl	#0x54
 8000418:      	b	#-0x2 <stm32f3_discovery::leds::Leds::new::hb02396ee289d8121+0x166>
 800041a:      	bl	#0xe46
 800041e:      	b	#-0x2 <stm32f3_discovery::leds::Leds::new::hb02396ee289d8121+0x16c>
 8000420:      	add	r0, sp, #0x48
;         leds.ld8.off().ok();
 8000422:      	adds	r0, #0x5
 8000424:      	bl	#0x44
 8000428:      	b	#-0x2 <stm32f3_discovery::leds::Leds::new::hb02396ee289d8121+0x176>
 800042a:      	bl	#0xe36
 800042e:      	b	#-0x2 <stm32f3_discovery::leds::Leds::new::hb02396ee289d8121+0x17c>
 8000430:      	add	r0, sp, #0x48
;         leds.ld9.off().ok();
 8000432:      	adds	r0, #0x6
 8000434:      	bl	#0x34
 8000438:      	b	#-0x2 <stm32f3_discovery::leds::Leds::new::hb02396ee289d8121+0x186>
 800043a:      	bl	#0xe26
 800043e:      	b	#-0x2 <stm32f3_discovery::leds::Leds::new::hb02396ee289d8121+0x18c>
 8000440:      	add	r0, sp, #0x48
;         leds.ld10.off().ok();
 8000442:      	adds	r0, #0x7
 8000444:      	bl	#0x24
 8000448:      	b	#-0x2 <stm32f3_discovery::leds::Leds::new::hb02396ee289d8121+0x196>
 800044a:      	bl	#0xe16
 800044e:      	b	#-0x2 <stm32f3_discovery::leds::Leds::new::hb02396ee289d8121+0x19c>
;     }
 8000450:      	ldr	r0, [sp, #0x48]
 8000452:      	ldr	r1, [sp, #0x4c]
 8000454:      	add	sp, #0x78
 8000456:      	pop	{r4, r5, r7, pc}

08000458 <switch_hal::Switch<IoPin,ActiveLevel>::new::h570d40e6b7e99760>:
;     pub fn new(pin: IoPin) -> Self {
 8000458:      	sub	sp, #0x8
 800045a:      	mov	r1, r0
 800045c:      	strb.w	r0, [sp, #0x7]
;         Switch {
 8000460:      	strb.w	r0, [sp, #0x3]
;     }
 8000464:      	ldrb.w	r0, [sp, #0x3]
 8000468:      	add	sp, #0x8
 800046a:      	bx	lr

0800046c <switch_hal::output::<impl switch_hal::OutputSwitch for switch_hal::Switch<T,switch_hal::ActiveHigh>>::off::h71c293fce759a066>:
;     fn off(&mut self) -> Result<(), Self::Error> {
 800046c:      	push	{r7, lr}
 800046e:      	mov	r7, sp
 8000470:      	sub	sp, #0x8
 8000472:      	str	r0, [sp, #0x4]
;         self.pin.set_low()
 8000474:      	bl	#0x19e
 8000478:      	b	#-0x2 <switch_hal::output::<impl switch_hal::OutputSwitch for switch_hal::Switch<T,switch_hal::ActiveHigh>>::off::h71c293fce759a066+0xe>
;     }
 800047a:      	add	sp, #0x8
 800047c:      	pop	{r7, pc}

0800047e <stm32f3::stm32f303::Peripherals::take::hab7850b835842ff1>:
;     pub fn take() -> Option<Self> {
 800047e:      	push	{r7, lr}
 8000480:      	mov	r7, sp
 8000482:      	sub	sp, #0x8
;         cortex_m::interrupt::free(|_| {
 8000484:      	bl	#0x20
 8000488:      	str	r0, [sp]
 800048a:      	b	#-0x2 <stm32f3::stm32f303::Peripherals::take::hab7850b835842ff1+0xe>
;     }
 800048c:      	ldr	r0, [sp]
 800048e:      	and	r0, r0, #0x1
 8000492:      	add	sp, #0x8
 8000494:      	pop	{r7, pc}

08000496 <stm32f3::stm32f303::Peripherals::steal::h5e9035fb63d8b56a>:
;     pub unsafe fn steal() -> Self {
 8000496:      	sub	sp, #0x4
;         DEVICE_PERIPHERALS = true;
 8000498:      	movw	r0, #0x0
 800049c:      	movt	r0, #0x2000
 80004a0:      	movs	r1, #0x1
 80004a2:      	strb	r1, [r0]
;     }
 80004a4:      	add	sp, #0x4
 80004a6:      	bx	lr

080004a8 <cortex_m::interrupt::free::h18e41aa5a1035bb5>:
; pub fn free<F, R>(f: F) -> R
 80004a8:      	push	{r7, lr}
 80004aa:      	mov	r7, sp
 80004ac:      	sub	sp, #0x20
;     let primask = crate::register::primask::read();
 80004ae:      	bl	#0xe28
 80004b2:      	mov	r1, r0
 80004b4:      	strb	r0, [r7, #-2]
 80004b8:      	str	r1, [sp, #0xc]
 80004ba:      	b	#-0x2 <cortex_m::interrupt::free::h18e41aa5a1035bb5+0x14>
;     disable();
 80004bc:      	bl	#0xc74
 80004c0:      	b	#-0x2 <cortex_m::interrupt::free::h18e41aa5a1035bb5+0x1a>
;     let r = f(unsafe { &CriticalSection::new() });
 80004c2:      	bl	#0x1778
 80004c6:      	b	#-0x2 <cortex_m::interrupt::free::h18e41aa5a1035bb5+0x20>
 80004c8:      	add	r0, sp, #0x14
;     let r = f(unsafe { &CriticalSection::new() });
 80004ca:      	str	r0, [sp, #0x10]
 80004cc:      	ldr	r0, [sp, #0x10]
 80004ce:      	bl	#0xd40
 80004d2:      	mov	r1, r0
 80004d4:      	strb	r0, [r7, #-1]
 80004d8:      	str	r1, [sp, #0x8]
 80004da:      	b	#-0x2 <cortex_m::interrupt::free::h18e41aa5a1035bb5+0x34>
;     if primask.is_active() {
 80004dc:      	ldr	r0, [sp, #0xc]
 80004de:      	and	r0, r0, #0x1
 80004e2:      	bl	#0xe28
 80004e6:      	str	r0, [sp, #0x4]
 80004e8:      	b	#-0x2 <cortex_m::interrupt::free::h18e41aa5a1035bb5+0x42>
 80004ea:      	ldr	r0, [sp, #0x4]
 80004ec:      	lsls	r1, r0, #0x1f
 80004ee:      	cmp	r1, #0x0
 80004f0:      	beq	#0x6 <cortex_m::interrupt::free::h18e41aa5a1035bb5+0x52>
 80004f2:      	b	#-0x2 <cortex_m::interrupt::free::h18e41aa5a1035bb5+0x4c>
;         unsafe { enable() }
 80004f4:      	bl	#0xc30
 80004f8:      	b	#0x0 <cortex_m::interrupt::free::h18e41aa5a1035bb5+0x54>
;     if primask.is_active() {
 80004fa:      	b	#-0x2 <cortex_m::interrupt::free::h18e41aa5a1035bb5+0x54>
; }
 80004fc:      	ldr	r0, [sp, #0x8]
 80004fe:      	and	r0, r0, #0x1
 8000502:      	add	sp, #0x20
 8000504:      	pop	{r7, pc}

08000506 <cortex_m::interrupt::free::h34f7b4e852e6cec8>:
; pub fn free<F, R>(f: F) -> R
 8000506:      	push	{r7, lr}
 8000508:      	mov	r7, sp
 800050a:      	sub	sp, #0x20
;     let primask = crate::register::primask::read();
 800050c:      	bl	#0xdca
 8000510:      	mov	r1, r0
 8000512:      	strb	r0, [r7, #-2]
 8000516:      	str	r1, [sp, #0xc]
 8000518:      	b	#-0x2 <cortex_m::interrupt::free::h34f7b4e852e6cec8+0x14>
;     disable();
 800051a:      	bl	#0xc16
 800051e:      	b	#-0x2 <cortex_m::interrupt::free::h34f7b4e852e6cec8+0x1a>
;     let r = f(unsafe { &CriticalSection::new() });
 8000520:      	bl	#0x171a
 8000524:      	b	#-0x2 <cortex_m::interrupt::free::h34f7b4e852e6cec8+0x20>
 8000526:      	add	r0, sp, #0x14
;     let r = f(unsafe { &CriticalSection::new() });
 8000528:      	str	r0, [sp, #0x10]
 800052a:      	ldr	r0, [sp, #0x10]
 800052c:      	bl	#0x92
 8000530:      	mov	r1, r0
 8000532:      	strb	r0, [r7, #-1]
 8000536:      	str	r1, [sp, #0x8]
 8000538:      	b	#-0x2 <cortex_m::interrupt::free::h34f7b4e852e6cec8+0x34>
;     if primask.is_active() {
 800053a:      	ldr	r0, [sp, #0xc]
 800053c:      	and	r0, r0, #0x1
 8000540:      	bl	#0xdca
 8000544:      	str	r0, [sp, #0x4]
 8000546:      	b	#-0x2 <cortex_m::interrupt::free::h34f7b4e852e6cec8+0x42>
 8000548:      	ldr	r0, [sp, #0x4]
 800054a:      	lsls	r1, r0, #0x1f
 800054c:      	cmp	r1, #0x0
 800054e:      	beq	#0x6 <cortex_m::interrupt::free::h34f7b4e852e6cec8+0x52>
 8000550:      	b	#-0x2 <cortex_m::interrupt::free::h34f7b4e852e6cec8+0x4c>
;         unsafe { enable() }
 8000552:      	bl	#0xbd2
 8000556:      	b	#0x0 <cortex_m::interrupt::free::h34f7b4e852e6cec8+0x54>
;     if primask.is_active() {
 8000558:      	b	#-0x2 <cortex_m::interrupt::free::h34f7b4e852e6cec8+0x54>
; }
 800055a:      	ldr	r0, [sp, #0x8]
 800055c:      	and	r0, r0, #0x1
 8000560:      	add	sp, #0x20
 8000562:      	pop	{r7, pc}

08000564 <cortex_m::interrupt::free::h63690b9e96260c46>:
; pub fn free<F, R>(f: F) -> R
 8000564:      	push	{r7, lr}
 8000566:      	mov	r7, sp
 8000568:      	sub	sp, #0x20
;     let primask = crate::register::primask::read();
 800056a:      	bl	#0xd6c
 800056e:      	mov	r1, r0
 8000570:      	strb	r0, [r7, #-2]
 8000574:      	str	r1, [sp, #0xc]
 8000576:      	b	#-0x2 <cortex_m::interrupt::free::h63690b9e96260c46+0x14>
;     disable();
 8000578:      	bl	#0xbb8
 800057c:      	b	#-0x2 <cortex_m::interrupt::free::h63690b9e96260c46+0x1a>
;     let r = f(unsafe { &CriticalSection::new() });
 800057e:      	bl	#0x16bc
 8000582:      	b	#-0x2 <cortex_m::interrupt::free::h63690b9e96260c46+0x20>
 8000584:      	add	r0, sp, #0x14
;     let r = f(unsafe { &CriticalSection::new() });
 8000586:      	str	r0, [sp, #0x10]
 8000588:      	ldr	r0, [sp, #0x10]
 800058a:      	bl	#0xbdc
 800058e:      	mov	r1, r0
 8000590:      	strb	r0, [r7, #-1]
 8000594:      	str	r1, [sp, #0x8]
 8000596:      	b	#-0x2 <cortex_m::interrupt::free::h63690b9e96260c46+0x34>
;     if primask.is_active() {
 8000598:      	ldr	r0, [sp, #0xc]
 800059a:      	and	r0, r0, #0x1
 800059e:      	bl	#0xd6c
 80005a2:      	str	r0, [sp, #0x4]
 80005a4:      	b	#-0x2 <cortex_m::interrupt::free::h63690b9e96260c46+0x42>
 80005a6:      	ldr	r0, [sp, #0x4]
 80005a8:      	lsls	r1, r0, #0x1f
 80005aa:      	cmp	r1, #0x0
 80005ac:      	beq	#0x6 <cortex_m::interrupt::free::h63690b9e96260c46+0x52>
 80005ae:      	b	#-0x2 <cortex_m::interrupt::free::h63690b9e96260c46+0x4c>
;         unsafe { enable() }
 80005b0:      	bl	#0xb74
 80005b4:      	b	#0x0 <cortex_m::interrupt::free::h63690b9e96260c46+0x54>
;     if primask.is_active() {
 80005b6:      	b	#-0x2 <cortex_m::interrupt::free::h63690b9e96260c46+0x54>
; }
 80005b8:      	ldr	r0, [sp, #0x8]
 80005ba:      	and	r0, r0, #0x1
 80005be:      	add	sp, #0x20
 80005c0:      	pop	{r7, pc}

080005c2 <cortex_m::peripheral::Peripherals::take::{{closure}}::h4836f701856ecfdd>:
;         interrupt::free(|_| {
 80005c2:      	push	{r7, lr}
 80005c4:      	mov	r7, sp
 80005c6:      	sub	sp, #0x10
 80005c8:      	str	r0, [sp, #0xc]
;             if unsafe { TAKEN } {
 80005ca:      	movw	r0, #0x1
 80005ce:      	movt	r0, #0x2000
 80005d2:      	ldrb	r0, [r0]
 80005d4:      	lsls	r0, r0, #0x1f
 80005d6:      	cmp	r0, #0x0
 80005d8:      	beq	#0x8 <cortex_m::peripheral::Peripherals::take::{{closure}}::h4836f701856ecfdd+0x22>
 80005da:      	b	#-0x2 <cortex_m::peripheral::Peripherals::take::{{closure}}::h4836f701856ecfdd+0x1a>
 80005dc:      	movs	r0, #0x0
;                 None
 80005de:      	strb	r0, [r7, #-9]
;             if unsafe { TAKEN } {
 80005e2:      	b	#0xc <cortex_m::peripheral::Peripherals::take::{{closure}}::h4836f701856ecfdd+0x30>
;                 Some(unsafe { Peripherals::steal() })
 80005e4:      	bl	#0xb70
 80005e8:      	b	#-0x2 <cortex_m::peripheral::Peripherals::take::{{closure}}::h4836f701856ecfdd+0x28>
 80005ea:      	movs	r0, #0x1
;                 Some(unsafe { Peripherals::steal() })
 80005ec:      	strb	r0, [r7, #-9]
;             if unsafe { TAKEN } {
 80005f0:      	b	#-0x2 <cortex_m::peripheral::Peripherals::take::{{closure}}::h4836f701856ecfdd+0x30>
;         })
 80005f2:      	ldrb	r0, [r7, #-9]
 80005f6:      	add	sp, #0x10
 80005f8:      	pop	{r7, pc}

080005fa <switch_hal::IntoSwitch::into_active_high_switch::hb25a7aa2615cb7e9>:
;     fn into_active_high_switch(self) -> Switch<Self, ActiveHigh>
 80005fa:      	push	{r7, lr}
 80005fc:      	mov	r7, sp
 80005fe:      	sub	sp, #0x10
 8000600:      	mov	r1, r0
 8000602:      	strb	r0, [r7, #-1]
;         self.into_switch::<ActiveHigh>()
 8000606:      	str	r1, [sp, #0x8]
 8000608:      	bl	#0xad6
 800060c:      	str	r0, [sp, #0x4]
 800060e:      	b	#-0x2 <switch_hal::IntoSwitch::into_active_high_switch::hb25a7aa2615cb7e9+0x16>
;     }
 8000610:      	ldr	r0, [sp, #0x4]
 8000612:      	add	sp, #0x10
 8000614:      	pop	{r7, pc}

08000616 <_ZN135_$LT$stm32f3xx_hal..gpio..gpioe..PEx$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17ha91c1803cfdf4612E>:
;                         fn set_low(&mut self) -> Result<(), Self::Error> {
 8000616:      	push	{r7, lr}
 8000618:      	mov	r7, sp
 800061a:      	sub	sp, #0x30
 800061c:      	str	r0, [sp, #0xc]
; gpio!([
 800061e:      	b	#-0x2 <_ZN135_$LT$stm32f3xx_hal..gpio..gpioe..PEx$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17ha91c1803cfdf4612E+0xa>
 8000620:      	add	r0, sp, #0xc
;                             unsafe { (*$GPIOX::ptr()).bsrr.write(|w| w.bits(1 << (16 + self.i))) }
 8000622:      	str	r0, [sp, #0x14]
 8000624:      	ldr	r0, [sp, #0x14]
 8000626:      	movw	r1, #0x1018
 800062a:      	movt	r1, #0x4800
 800062e:      	str	r1, [sp, #0x20]
 8000630:      	str	r0, [sp, #0x24]
 8000632:      	movs	r2, #0x0
;         self.register.set(f(&mut W {bits: Self::reset_value(), _reg: marker::PhantomData}).bits);
 8000634:      	str	r2, [sp, #0x1c]
 8000636:      	add	r2, sp, #0x1c
 8000638:      	str	r2, [sp, #0x18]
 800063a:      	ldr	r2, [sp, #0x18]
 800063c:      	str	r1, [sp, #0x8]
 800063e:      	mov	r1, r2
 8000640:      	bl	#0x1c
 8000644:      	ldr	r0, [r0]
 8000646:      	ldr	r1, [sp, #0x8]
 8000648:      	str	r1, [sp, #0x28]
 800064a:      	str	r0, [sp, #0x2c]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 800064c:      	str	r0, [sp, #0x4]
 800064e:      	mov	r0, r1
 8000650:      	bl	#0x15ca
 8000654:      	ldr	r1, [sp, #0x4]
 8000656:      	bl	#0x11c4
;                             unsafe { (*$GPIOX::ptr()).bsrr.write(|w| w.bits(1 << (16 + self.i))) }
 800065a:      	b	#-0x2 <_ZN135_$LT$stm32f3xx_hal..gpio..gpioe..PEx$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17ha91c1803cfdf4612E+0x46>
;                         }
 800065c:      	add	sp, #0x30
 800065e:      	pop	{r7, pc}

08000660 <_ZN135_$LT$stm32f3xx_hal..gpio..gpioe..PEx$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low28_$u7b$$u7b$closure$u7d$$u7d$17hc74451c39f3684d5E>:
;                             unsafe { (*$GPIOX::ptr()).bsrr.write(|w| w.bits(1 << (16 + self.i))) }
 8000660:      	push	{r7, lr}
 8000662:      	mov	r7, sp
 8000664:      	sub	sp, #0x20
 8000666:      	str	r0, [sp, #0x10]
 8000668:      	str	r1, [sp, #0x14]
 800066a:      	ldr	r0, [r0]
 800066c:      	ldrb	r0, [r0]
 800066e:      	adds	r0, #0x10
 8000670:      	uxtb	r2, r0
 8000672:      	mov	r3, r0
 8000674:      	cmp	r2, r0
 8000676:      	str	r1, [sp, #0xc]
 8000678:      	str	r3, [sp, #0x8]
 800067a:      	bne	#0x28 <_ZN135_$LT$stm32f3xx_hal..gpio..gpioe..PEx$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low28_$u7b$$u7b$closure$u7d$$u7d$17hc74451c39f3684d5E+0x46>
 800067c:      	b	#-0x2 <_ZN135_$LT$stm32f3xx_hal..gpio..gpioe..PEx$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low28_$u7b$$u7b$closure$u7d$$u7d$17hc74451c39f3684d5E+0x1e>
 800067e:      	ldr	r0, [sp, #0x8]
 8000680:      	and	r1, r0, #0x1f
 8000684:      	movs	r2, #0x1
 8000686:      	lsl.w	r1, r2, r1
 800068a:      	tst.w	r0, #0xe0
 800068e:      	str	r1, [sp, #0x4]
 8000690:      	bne	#0x2a <_ZN135_$LT$stm32f3xx_hal..gpio..gpioe..PEx$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low28_$u7b$$u7b$closure$u7d$$u7d$17hc74451c39f3684d5E+0x5e>
 8000692:      	b	#-0x2 <_ZN135_$LT$stm32f3xx_hal..gpio..gpioe..PEx$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low28_$u7b$$u7b$closure$u7d$$u7d$17hc74451c39f3684d5E+0x34>
 8000694:      	ldr	r0, [sp, #0xc]
 8000696:      	str	r0, [sp, #0x18]
 8000698:      	ldr	r1, [sp, #0x4]
 800069a:      	str	r1, [sp, #0x1c]
;         self.bits = bits;
 800069c:      	str	r1, [r0]
;                             unsafe { (*$GPIOX::ptr()).bsrr.write(|w| w.bits(1 << (16 + self.i))) }
 800069e:      	b	#-0x2 <_ZN135_$LT$stm32f3xx_hal..gpio..gpioe..PEx$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low28_$u7b$$u7b$closure$u7d$$u7d$17hc74451c39f3684d5E+0x40>
 80006a0:      	ldr	r0, [sp, #0xc]
 80006a2:      	add	sp, #0x20
 80006a4:      	pop	{r7, pc}
 80006a6:      	movw	r0, #0x3750
 80006aa:      	movt	r0, #0x800
 80006ae:      	movw	r2, #0x3740
 80006b2:      	movt	r2, #0x800
 80006b6:      	movs	r1, #0x1c
 80006b8:      	bl	#0x1694
 80006bc:      	trap
 80006be:      	movw	r0, #0x3770
 80006c2:      	movt	r0, #0x800
 80006c6:      	movw	r2, #0x3740
 80006ca:      	movt	r2, #0x800
 80006ce:      	movs	r1, #0x23
 80006d0:      	bl	#0x167c
 80006d4:      	trap

080006d6 <_ZN13stm32f3xx_hal4gpio5gpioe15PE8$LT$MODE$GT$21into_push_pull_output17h7556a6934bd57fb7E>:
;                             pub fn into_push_pull_output(
 80006d6:      	push	{r7, lr}
 80006d8:      	mov	r7, sp
 80006da:      	sub	sp, #0x78
 80006dc:      	str	r0, [sp, #0x28]
 80006de:      	str	r1, [sp, #0x2c]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 80006e0:      	str	r1, [sp, #0x14]
 80006e2:      	bl	#0xedc
 80006e6:      	str	r0, [sp, #0x10]
 80006e8:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe15PE8$LT$MODE$GT$21into_push_pull_output17h7556a6934bd57fb7E+0x14>
 80006ea:      	ldr	r0, [sp, #0x10]
 80006ec:      	str	r0, [sp, #0x40]
 80006ee:      	str	r0, [sp, #0x48]
;         unsafe { ptr::read_volatile(self.value.get()) }
 80006f0:      	bl	#0x152a
 80006f4:      	bl	#0x1100
;         let bits = self.register.get();
 80006f8:      	str	r0, [sp, #0x44]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 80006fa:      	str	r0, [sp, #0x38]
 80006fc:      	str	r0, [sp, #0x3c]
 80006fe:      	add	r0, sp, #0x38
 8000700:      	str	r0, [sp, #0x30]
 8000702:      	add	r0, sp, #0x3c
 8000704:      	str	r0, [sp, #0x34]
 8000706:      	ldr	r0, [sp, #0x30]
 8000708:      	ldr	r1, [sp, #0x34]
 800070a:      	bl	#0xac
 800070e:      	ldr	r0, [r0]
 8000710:      	ldr	r1, [sp, #0x10]
 8000712:      	str	r1, [sp, #0x4c]
 8000714:      	str	r0, [sp, #0x50]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 8000716:      	str	r0, [sp, #0xc]
 8000718:      	mov	r0, r1
 800071a:      	bl	#0x1500
 800071e:      	ldr	r1, [sp, #0xc]
 8000720:      	bl	#0x10fa
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000724:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe15PE8$LT$MODE$GT$21into_push_pull_output17h7556a6934bd57fb7E+0x50>
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000726:      	ldr	r0, [sp, #0x14]
 8000728:      	bl	#0xea8
 800072c:      	str	r0, [sp, #0x8]
 800072e:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe15PE8$LT$MODE$GT$21into_push_pull_output17h7556a6934bd57fb7E+0x5a>
 8000730:      	ldr	r0, [sp, #0x8]
 8000732:      	str	r0, [sp, #0x64]
 8000734:      	str	r0, [sp, #0x6c]
;         unsafe { ptr::read_volatile(self.value.get()) }
 8000736:      	bl	#0x14e4
 800073a:      	bl	#0x10ba
;         let bits = self.register.get();
 800073e:      	str	r0, [sp, #0x68]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 8000740:      	str	r0, [sp, #0x5c]
 8000742:      	str	r0, [sp, #0x60]
 8000744:      	add	r0, sp, #0x5c
 8000746:      	str	r0, [sp, #0x54]
 8000748:      	add	r0, sp, #0x60
 800074a:      	str	r0, [sp, #0x58]
 800074c:      	ldr	r0, [sp, #0x54]
 800074e:      	ldr	r1, [sp, #0x58]
 8000750:      	bl	#0x1c
 8000754:      	ldr	r0, [r0]
 8000756:      	ldr	r1, [sp, #0x8]
 8000758:      	str	r1, [sp, #0x70]
 800075a:      	str	r0, [sp, #0x74]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 800075c:      	str	r0, [sp, #0x4]
 800075e:      	mov	r0, r1
 8000760:      	bl	#0x14ba
 8000764:      	ldr	r1, [sp, #0x4]
 8000766:      	bl	#0x10b4
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 800076a:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe15PE8$LT$MODE$GT$21into_push_pull_output17h7556a6934bd57fb7E+0x96>
;                             }
 800076c:      	add	sp, #0x78
 800076e:      	pop	{r7, pc}

08000770 <_ZN13stm32f3xx_hal4gpio5gpioe15PE8$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h31d7269a05332093E>:
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000770:      	push	{r7, lr}
 8000772:      	mov	r7, sp
 8000774:      	sub	sp, #0x30
 8000776:      	str	r0, [sp, #0x8]
 8000778:      	str	r1, [sp, #0xc]
 800077a:      	str	r1, [sp, #0x14]
;         OT8_W { w: self }
 800077c:      	str	r1, [sp, #0x10]
;     }
 800077e:      	ldr	r0, [sp, #0x10]
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000780:      	str	r0, [sp]
 8000782:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe15PE8$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h31d7269a05332093E+0x14>
 8000784:      	ldr	r0, [sp]
 8000786:      	str	r0, [sp, #0x1c]
 8000788:      	movs	r1, #0x0
;         self.variant(OT15_A::PUSHPULL)
 800078a:      	strb	r1, [r7, #-21]
 800078e:      	ldrb	r1, [r7, #-21]
 8000792:      	str	r0, [sp, #0x20]
 8000794:      	strb	r1, [r7, #-9]
;             self.bit(variant.into())
 8000798:      	mov	r0, r1
 800079a:      	bl	#0xaac
 800079e:      	ldr	r1, [sp]
 80007a0:      	str	r1, [sp, #0x28]
 80007a2:      	strb	r0, [r7, #-1]
;         self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
 80007a6:      	ldr	r2, [r1]
 80007a8:      	bic	r2, r2, #0x100
 80007ac:      	orr.w	r0, r2, r0, lsl #8
 80007b0:      	str	r0, [r1]
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 80007b2:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe15PE8$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h31d7269a05332093E+0x44>
 80007b4:      	ldr	r0, [sp]
 80007b6:      	add	sp, #0x30
 80007b8:      	pop	{r7, pc}

080007ba <_ZN13stm32f3xx_hal4gpio5gpioe15PE8$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h3b4219cdb0f22d99E>:
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 80007ba:      	push	{r7, lr}
 80007bc:      	mov	r7, sp
 80007be:      	sub	sp, #0x30
 80007c0:      	str	r0, [sp, #0x8]
 80007c2:      	str	r1, [sp, #0xc]
 80007c4:      	str	r1, [sp, #0x14]
;         MODER8_W { w: self }
 80007c6:      	str	r1, [sp, #0x10]
;     }
 80007c8:      	ldr	r0, [sp, #0x10]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 80007ca:      	str	r0, [sp]
 80007cc:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe15PE8$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h3b4219cdb0f22d99E+0x14>
 80007ce:      	ldr	r0, [sp]
 80007d0:      	str	r0, [sp, #0x1c]
 80007d2:      	movs	r1, #0x1
;         self.variant(MODER15_A::OUTPUT)
 80007d4:      	strb	r1, [r7, #-21]
 80007d8:      	ldrb	r1, [r7, #-21]
 80007dc:      	str	r0, [sp, #0x20]
 80007de:      	strb	r1, [r7, #-9]
;             self.bits(variant.into())
 80007e2:      	mov	r0, r1
 80007e4:      	bl	#0xb58
 80007e8:      	ldr	r1, [sp]
 80007ea:      	str	r1, [sp, #0x28]
 80007ec:      	strb	r0, [r7, #-1]
;         self.w.bits = (self.w.bits & !(0x03 << 16)) | (((value as u32) & 0x03) << 16);
 80007f0:      	ldr	r2, [r1]
 80007f2:      	bic	r2, r2, #0x30000
 80007f6:      	and	r0, r0, #0x3
 80007fa:      	orr.w	r0, r2, r0, lsl #16
 80007fe:      	str	r0, [r1]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000800:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe15PE8$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h3b4219cdb0f22d99E+0x48>
 8000802:      	ldr	r0, [sp]
 8000804:      	add	sp, #0x30
 8000806:      	pop	{r7, pc}

08000808 <_ZN13stm32f3xx_hal4gpio5gpioe15PE9$LT$MODE$GT$21into_push_pull_output17h84423fc03e642433E>:
;                             pub fn into_push_pull_output(
 8000808:      	push	{r7, lr}
 800080a:      	mov	r7, sp
 800080c:      	sub	sp, #0x78
 800080e:      	str	r0, [sp, #0x28]
 8000810:      	str	r1, [sp, #0x2c]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000812:      	str	r1, [sp, #0x14]
 8000814:      	bl	#0xdaa
 8000818:      	str	r0, [sp, #0x10]
 800081a:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe15PE9$LT$MODE$GT$21into_push_pull_output17h84423fc03e642433E+0x14>
 800081c:      	ldr	r0, [sp, #0x10]
 800081e:      	str	r0, [sp, #0x40]
 8000820:      	str	r0, [sp, #0x48]
;         unsafe { ptr::read_volatile(self.value.get()) }
 8000822:      	bl	#0x13f8
 8000826:      	bl	#0xfce
;         let bits = self.register.get();
 800082a:      	str	r0, [sp, #0x44]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 800082c:      	str	r0, [sp, #0x38]
 800082e:      	str	r0, [sp, #0x3c]
 8000830:      	add	r0, sp, #0x38
 8000832:      	str	r0, [sp, #0x30]
 8000834:      	add	r0, sp, #0x3c
 8000836:      	str	r0, [sp, #0x34]
 8000838:      	ldr	r0, [sp, #0x30]
 800083a:      	ldr	r1, [sp, #0x34]
 800083c:      	bl	#0xac
 8000840:      	ldr	r0, [r0]
 8000842:      	ldr	r1, [sp, #0x10]
 8000844:      	str	r1, [sp, #0x4c]
 8000846:      	str	r0, [sp, #0x50]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 8000848:      	str	r0, [sp, #0xc]
 800084a:      	mov	r0, r1
 800084c:      	bl	#0x13ce
 8000850:      	ldr	r1, [sp, #0xc]
 8000852:      	bl	#0xfc8
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000856:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe15PE9$LT$MODE$GT$21into_push_pull_output17h84423fc03e642433E+0x50>
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000858:      	ldr	r0, [sp, #0x14]
 800085a:      	bl	#0xd76
 800085e:      	str	r0, [sp, #0x8]
 8000860:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe15PE9$LT$MODE$GT$21into_push_pull_output17h84423fc03e642433E+0x5a>
 8000862:      	ldr	r0, [sp, #0x8]
 8000864:      	str	r0, [sp, #0x64]
 8000866:      	str	r0, [sp, #0x6c]
;         unsafe { ptr::read_volatile(self.value.get()) }
 8000868:      	bl	#0x13b2
 800086c:      	bl	#0xf88
;         let bits = self.register.get();
 8000870:      	str	r0, [sp, #0x68]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 8000872:      	str	r0, [sp, #0x5c]
 8000874:      	str	r0, [sp, #0x60]
 8000876:      	add	r0, sp, #0x5c
 8000878:      	str	r0, [sp, #0x54]
 800087a:      	add	r0, sp, #0x60
 800087c:      	str	r0, [sp, #0x58]
 800087e:      	ldr	r0, [sp, #0x54]
 8000880:      	ldr	r1, [sp, #0x58]
 8000882:      	bl	#0x1c
 8000886:      	ldr	r0, [r0]
 8000888:      	ldr	r1, [sp, #0x8]
 800088a:      	str	r1, [sp, #0x70]
 800088c:      	str	r0, [sp, #0x74]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 800088e:      	str	r0, [sp, #0x4]
 8000890:      	mov	r0, r1
 8000892:      	bl	#0x1388
 8000896:      	ldr	r1, [sp, #0x4]
 8000898:      	bl	#0xf82
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 800089c:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe15PE9$LT$MODE$GT$21into_push_pull_output17h84423fc03e642433E+0x96>
;                             }
 800089e:      	add	sp, #0x78
 80008a0:      	pop	{r7, pc}

080008a2 <_ZN13stm32f3xx_hal4gpio5gpioe15PE9$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h13066bf82a91e73cE>:
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 80008a2:      	push	{r7, lr}
 80008a4:      	mov	r7, sp
 80008a6:      	sub	sp, #0x30
 80008a8:      	str	r0, [sp, #0x8]
 80008aa:      	str	r1, [sp, #0xc]
 80008ac:      	str	r1, [sp, #0x14]
;         OT9_W { w: self }
 80008ae:      	str	r1, [sp, #0x10]
;     }
 80008b0:      	ldr	r0, [sp, #0x10]
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 80008b2:      	str	r0, [sp]
 80008b4:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe15PE9$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h13066bf82a91e73cE+0x14>
 80008b6:      	ldr	r0, [sp]
 80008b8:      	str	r0, [sp, #0x1c]
 80008ba:      	movs	r1, #0x0
;         self.variant(OT15_A::PUSHPULL)
 80008bc:      	strb	r1, [r7, #-21]
 80008c0:      	ldrb	r1, [r7, #-21]
 80008c4:      	str	r0, [sp, #0x20]
 80008c6:      	strb	r1, [r7, #-9]
;             self.bit(variant.into())
 80008ca:      	mov	r0, r1
 80008cc:      	bl	#0x97a
 80008d0:      	ldr	r1, [sp]
 80008d2:      	str	r1, [sp, #0x28]
 80008d4:      	strb	r0, [r7, #-1]
;         self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
 80008d8:      	ldr	r2, [r1]
 80008da:      	bic	r2, r2, #0x200
 80008de:      	orr.w	r0, r2, r0, lsl #9
 80008e2:      	str	r0, [r1]
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 80008e4:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe15PE9$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h13066bf82a91e73cE+0x44>
 80008e6:      	ldr	r0, [sp]
 80008e8:      	add	sp, #0x30
 80008ea:      	pop	{r7, pc}

080008ec <_ZN13stm32f3xx_hal4gpio5gpioe15PE9$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hfea05a2e79122e86E>:
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 80008ec:      	push	{r7, lr}
 80008ee:      	mov	r7, sp
 80008f0:      	sub	sp, #0x30
 80008f2:      	str	r0, [sp, #0x8]
 80008f4:      	str	r1, [sp, #0xc]
 80008f6:      	str	r1, [sp, #0x14]
;         MODER9_W { w: self }
 80008f8:      	str	r1, [sp, #0x10]
;     }
 80008fa:      	ldr	r0, [sp, #0x10]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 80008fc:      	str	r0, [sp]
 80008fe:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe15PE9$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hfea05a2e79122e86E+0x14>
 8000900:      	ldr	r0, [sp]
 8000902:      	str	r0, [sp, #0x1c]
 8000904:      	movs	r1, #0x1
;         self.variant(MODER15_A::OUTPUT)
 8000906:      	strb	r1, [r7, #-21]
 800090a:      	ldrb	r1, [r7, #-21]
 800090e:      	str	r0, [sp, #0x20]
 8000910:      	strb	r1, [r7, #-9]
;             self.bits(variant.into())
 8000914:      	mov	r0, r1
 8000916:      	bl	#0xa26
 800091a:      	ldr	r1, [sp]
 800091c:      	str	r1, [sp, #0x28]
 800091e:      	strb	r0, [r7, #-1]
;         self.w.bits = (self.w.bits & !(0x03 << 18)) | (((value as u32) & 0x03) << 18);
 8000922:      	ldr	r2, [r1]
 8000924:      	bic	r2, r2, #0xc0000
 8000928:      	and	r0, r0, #0x3
 800092c:      	orr.w	r0, r2, r0, lsl #18
 8000930:      	str	r0, [r1]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000932:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe15PE9$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hfea05a2e79122e86E+0x48>
 8000934:      	ldr	r0, [sp]
 8000936:      	add	sp, #0x30
 8000938:      	pop	{r7, pc}

0800093a <_ZN13stm32f3xx_hal4gpio5gpioe16PE10$LT$MODE$GT$21into_push_pull_output17h7a93b9138a8a1facE>:
;                             pub fn into_push_pull_output(
 800093a:      	push	{r7, lr}
 800093c:      	mov	r7, sp
 800093e:      	sub	sp, #0x78
 8000940:      	str	r0, [sp, #0x28]
 8000942:      	str	r1, [sp, #0x2c]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000944:      	str	r1, [sp, #0x14]
 8000946:      	bl	#0xc78
 800094a:      	str	r0, [sp, #0x10]
 800094c:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE10$LT$MODE$GT$21into_push_pull_output17h7a93b9138a8a1facE+0x14>
 800094e:      	ldr	r0, [sp, #0x10]
 8000950:      	str	r0, [sp, #0x40]
 8000952:      	str	r0, [sp, #0x48]
;         unsafe { ptr::read_volatile(self.value.get()) }
 8000954:      	bl	#0x12c6
 8000958:      	bl	#0xe9c
;         let bits = self.register.get();
 800095c:      	str	r0, [sp, #0x44]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 800095e:      	str	r0, [sp, #0x38]
 8000960:      	str	r0, [sp, #0x3c]
 8000962:      	add	r0, sp, #0x38
 8000964:      	str	r0, [sp, #0x30]
 8000966:      	add	r0, sp, #0x3c
 8000968:      	str	r0, [sp, #0x34]
 800096a:      	ldr	r0, [sp, #0x30]
 800096c:      	ldr	r1, [sp, #0x34]
 800096e:      	bl	#0xac
 8000972:      	ldr	r0, [r0]
 8000974:      	ldr	r1, [sp, #0x10]
 8000976:      	str	r1, [sp, #0x4c]
 8000978:      	str	r0, [sp, #0x50]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 800097a:      	str	r0, [sp, #0xc]
 800097c:      	mov	r0, r1
 800097e:      	bl	#0x129c
 8000982:      	ldr	r1, [sp, #0xc]
 8000984:      	bl	#0xe96
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000988:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE10$LT$MODE$GT$21into_push_pull_output17h7a93b9138a8a1facE+0x50>
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 800098a:      	ldr	r0, [sp, #0x14]
 800098c:      	bl	#0xc44
 8000990:      	str	r0, [sp, #0x8]
 8000992:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE10$LT$MODE$GT$21into_push_pull_output17h7a93b9138a8a1facE+0x5a>
 8000994:      	ldr	r0, [sp, #0x8]
 8000996:      	str	r0, [sp, #0x64]
 8000998:      	str	r0, [sp, #0x6c]
;         unsafe { ptr::read_volatile(self.value.get()) }
 800099a:      	bl	#0x1280
 800099e:      	bl	#0xe56
;         let bits = self.register.get();
 80009a2:      	str	r0, [sp, #0x68]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 80009a4:      	str	r0, [sp, #0x5c]
 80009a6:      	str	r0, [sp, #0x60]
 80009a8:      	add	r0, sp, #0x5c
 80009aa:      	str	r0, [sp, #0x54]
 80009ac:      	add	r0, sp, #0x60
 80009ae:      	str	r0, [sp, #0x58]
 80009b0:      	ldr	r0, [sp, #0x54]
 80009b2:      	ldr	r1, [sp, #0x58]
 80009b4:      	bl	#0x1c
 80009b8:      	ldr	r0, [r0]
 80009ba:      	ldr	r1, [sp, #0x8]
 80009bc:      	str	r1, [sp, #0x70]
 80009be:      	str	r0, [sp, #0x74]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 80009c0:      	str	r0, [sp, #0x4]
 80009c2:      	mov	r0, r1
 80009c4:      	bl	#0x1256
 80009c8:      	ldr	r1, [sp, #0x4]
 80009ca:      	bl	#0xe50
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 80009ce:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE10$LT$MODE$GT$21into_push_pull_output17h7a93b9138a8a1facE+0x96>
;                             }
 80009d0:      	add	sp, #0x78
 80009d2:      	pop	{r7, pc}

080009d4 <_ZN13stm32f3xx_hal4gpio5gpioe16PE10$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h97f5a4bc32580842E>:
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 80009d4:      	push	{r7, lr}
 80009d6:      	mov	r7, sp
 80009d8:      	sub	sp, #0x30
 80009da:      	str	r0, [sp, #0x8]
 80009dc:      	str	r1, [sp, #0xc]
 80009de:      	str	r1, [sp, #0x14]
;         OT10_W { w: self }
 80009e0:      	str	r1, [sp, #0x10]
;     }
 80009e2:      	ldr	r0, [sp, #0x10]
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 80009e4:      	str	r0, [sp]
 80009e6:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE10$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h97f5a4bc32580842E+0x14>
 80009e8:      	ldr	r0, [sp]
 80009ea:      	str	r0, [sp, #0x1c]
 80009ec:      	movs	r1, #0x0
;         self.variant(OT15_A::PUSHPULL)
 80009ee:      	strb	r1, [r7, #-21]
 80009f2:      	ldrb	r1, [r7, #-21]
 80009f6:      	str	r0, [sp, #0x20]
 80009f8:      	strb	r1, [r7, #-9]
;             self.bit(variant.into())
 80009fc:      	mov	r0, r1
 80009fe:      	bl	#0x848
 8000a02:      	ldr	r1, [sp]
 8000a04:      	str	r1, [sp, #0x28]
 8000a06:      	strb	r0, [r7, #-1]
;         self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
 8000a0a:      	ldr	r2, [r1]
 8000a0c:      	bic	r2, r2, #0x400
 8000a10:      	orr.w	r0, r2, r0, lsl #10
 8000a14:      	str	r0, [r1]
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000a16:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE10$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h97f5a4bc32580842E+0x44>
 8000a18:      	ldr	r0, [sp]
 8000a1a:      	add	sp, #0x30
 8000a1c:      	pop	{r7, pc}

08000a1e <_ZN13stm32f3xx_hal4gpio5gpioe16PE10$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17he4495541f90bc1a5E>:
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000a1e:      	push	{r7, lr}
 8000a20:      	mov	r7, sp
 8000a22:      	sub	sp, #0x30
 8000a24:      	str	r0, [sp, #0x8]
 8000a26:      	str	r1, [sp, #0xc]
 8000a28:      	str	r1, [sp, #0x14]
;         MODER10_W { w: self }
 8000a2a:      	str	r1, [sp, #0x10]
;     }
 8000a2c:      	ldr	r0, [sp, #0x10]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000a2e:      	str	r0, [sp]
 8000a30:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE10$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17he4495541f90bc1a5E+0x14>
 8000a32:      	ldr	r0, [sp]
 8000a34:      	str	r0, [sp, #0x1c]
 8000a36:      	movs	r1, #0x1
;         self.variant(MODER15_A::OUTPUT)
 8000a38:      	strb	r1, [r7, #-21]
 8000a3c:      	ldrb	r1, [r7, #-21]
 8000a40:      	str	r0, [sp, #0x20]
 8000a42:      	strb	r1, [r7, #-9]
;             self.bits(variant.into())
 8000a46:      	mov	r0, r1
 8000a48:      	bl	#0x8f4
 8000a4c:      	ldr	r1, [sp]
 8000a4e:      	str	r1, [sp, #0x28]
 8000a50:      	strb	r0, [r7, #-1]
;         self.w.bits = (self.w.bits & !(0x03 << 20)) | (((value as u32) & 0x03) << 20);
 8000a54:      	ldr	r2, [r1]
 8000a56:      	bic	r2, r2, #0x300000
 8000a5a:      	and	r0, r0, #0x3
 8000a5e:      	orr.w	r0, r2, r0, lsl #20
 8000a62:      	str	r0, [r1]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000a64:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE10$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17he4495541f90bc1a5E+0x48>
 8000a66:      	ldr	r0, [sp]
 8000a68:      	add	sp, #0x30
 8000a6a:      	pop	{r7, pc}

08000a6c <_ZN13stm32f3xx_hal4gpio5gpioe16PE11$LT$MODE$GT$21into_push_pull_output17he8915a675bac70aeE>:
;                             pub fn into_push_pull_output(
 8000a6c:      	push	{r7, lr}
 8000a6e:      	mov	r7, sp
 8000a70:      	sub	sp, #0x78
 8000a72:      	str	r0, [sp, #0x28]
 8000a74:      	str	r1, [sp, #0x2c]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000a76:      	str	r1, [sp, #0x14]
 8000a78:      	bl	#0xb46
 8000a7c:      	str	r0, [sp, #0x10]
 8000a7e:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE11$LT$MODE$GT$21into_push_pull_output17he8915a675bac70aeE+0x14>
 8000a80:      	ldr	r0, [sp, #0x10]
 8000a82:      	str	r0, [sp, #0x40]
 8000a84:      	str	r0, [sp, #0x48]
;         unsafe { ptr::read_volatile(self.value.get()) }
 8000a86:      	bl	#0x1194
 8000a8a:      	bl	#0xd6a
;         let bits = self.register.get();
 8000a8e:      	str	r0, [sp, #0x44]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 8000a90:      	str	r0, [sp, #0x38]
 8000a92:      	str	r0, [sp, #0x3c]
 8000a94:      	add	r0, sp, #0x38
 8000a96:      	str	r0, [sp, #0x30]
 8000a98:      	add	r0, sp, #0x3c
 8000a9a:      	str	r0, [sp, #0x34]
 8000a9c:      	ldr	r0, [sp, #0x30]
 8000a9e:      	ldr	r1, [sp, #0x34]
 8000aa0:      	bl	#0x62
 8000aa4:      	ldr	r0, [r0]
 8000aa6:      	ldr	r1, [sp, #0x10]
 8000aa8:      	str	r1, [sp, #0x4c]
 8000aaa:      	str	r0, [sp, #0x50]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 8000aac:      	str	r0, [sp, #0xc]
 8000aae:      	mov	r0, r1
 8000ab0:      	bl	#0x116a
 8000ab4:      	ldr	r1, [sp, #0xc]
 8000ab6:      	bl	#0xd64
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000aba:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE11$LT$MODE$GT$21into_push_pull_output17he8915a675bac70aeE+0x50>
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000abc:      	ldr	r0, [sp, #0x14]
 8000abe:      	bl	#0xb12
 8000ac2:      	str	r0, [sp, #0x8]
 8000ac4:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE11$LT$MODE$GT$21into_push_pull_output17he8915a675bac70aeE+0x5a>
 8000ac6:      	ldr	r0, [sp, #0x8]
 8000ac8:      	str	r0, [sp, #0x64]
 8000aca:      	str	r0, [sp, #0x6c]
;         unsafe { ptr::read_volatile(self.value.get()) }
 8000acc:      	bl	#0x114e
 8000ad0:      	bl	#0xd24
;         let bits = self.register.get();
 8000ad4:      	str	r0, [sp, #0x68]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 8000ad6:      	str	r0, [sp, #0x5c]
 8000ad8:      	str	r0, [sp, #0x60]
 8000ada:      	add	r0, sp, #0x5c
 8000adc:      	str	r0, [sp, #0x54]
 8000ade:      	add	r0, sp, #0x60
 8000ae0:      	str	r0, [sp, #0x58]
 8000ae2:      	ldr	r0, [sp, #0x54]
 8000ae4:      	ldr	r1, [sp, #0x58]
 8000ae6:      	bl	#0x6a
 8000aea:      	ldr	r0, [r0]
 8000aec:      	ldr	r1, [sp, #0x8]
 8000aee:      	str	r1, [sp, #0x70]
 8000af0:      	str	r0, [sp, #0x74]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 8000af2:      	str	r0, [sp, #0x4]
 8000af4:      	mov	r0, r1
 8000af6:      	bl	#0x1124
 8000afa:      	ldr	r1, [sp, #0x4]
 8000afc:      	bl	#0xd1e
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000b00:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE11$LT$MODE$GT$21into_push_pull_output17he8915a675bac70aeE+0x96>
;                             }
 8000b02:      	add	sp, #0x78
 8000b04:      	pop	{r7, pc}

08000b06 <_ZN13stm32f3xx_hal4gpio5gpioe16PE11$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h1e893b4cc260b0acE>:
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000b06:      	push	{r7, lr}
 8000b08:      	mov	r7, sp
 8000b0a:      	sub	sp, #0x30
 8000b0c:      	str	r0, [sp, #0x8]
 8000b0e:      	str	r1, [sp, #0xc]
 8000b10:      	str	r1, [sp, #0x14]
;         MODER11_W { w: self }
 8000b12:      	str	r1, [sp, #0x10]
;     }
 8000b14:      	ldr	r0, [sp, #0x10]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000b16:      	str	r0, [sp]
 8000b18:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE11$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h1e893b4cc260b0acE+0x14>
 8000b1a:      	ldr	r0, [sp]
 8000b1c:      	str	r0, [sp, #0x1c]
 8000b1e:      	movs	r1, #0x1
;         self.variant(MODER15_A::OUTPUT)
 8000b20:      	strb	r1, [r7, #-21]
 8000b24:      	ldrb	r1, [r7, #-21]
 8000b28:      	str	r0, [sp, #0x20]
 8000b2a:      	strb	r1, [r7, #-9]
;             self.bits(variant.into())
 8000b2e:      	mov	r0, r1
 8000b30:      	bl	#0x80c
 8000b34:      	ldr	r1, [sp]
 8000b36:      	str	r1, [sp, #0x28]
 8000b38:      	strb	r0, [r7, #-1]
;         self.w.bits = (self.w.bits & !(0x03 << 22)) | (((value as u32) & 0x03) << 22);
 8000b3c:      	ldr	r2, [r1]
 8000b3e:      	bic	r2, r2, #0xc00000
 8000b42:      	and	r0, r0, #0x3
 8000b46:      	orr.w	r0, r2, r0, lsl #22
 8000b4a:      	str	r0, [r1]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000b4c:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE11$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h1e893b4cc260b0acE+0x48>
 8000b4e:      	ldr	r0, [sp]
 8000b50:      	add	sp, #0x30
 8000b52:      	pop	{r7, pc}

08000b54 <_ZN13stm32f3xx_hal4gpio5gpioe16PE11$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h30907c2457c1b492E>:
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000b54:      	push	{r7, lr}
 8000b56:      	mov	r7, sp
 8000b58:      	sub	sp, #0x30
 8000b5a:      	str	r0, [sp, #0x8]
 8000b5c:      	str	r1, [sp, #0xc]
 8000b5e:      	str	r1, [sp, #0x14]
;         OT11_W { w: self }
 8000b60:      	str	r1, [sp, #0x10]
;     }
 8000b62:      	ldr	r0, [sp, #0x10]
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000b64:      	str	r0, [sp]
 8000b66:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE11$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h30907c2457c1b492E+0x14>
 8000b68:      	ldr	r0, [sp]
 8000b6a:      	str	r0, [sp, #0x1c]
 8000b6c:      	movs	r1, #0x0
;         self.variant(OT15_A::PUSHPULL)
 8000b6e:      	strb	r1, [r7, #-21]
 8000b72:      	ldrb	r1, [r7, #-21]
 8000b76:      	str	r0, [sp, #0x20]
 8000b78:      	strb	r1, [r7, #-9]
;             self.bit(variant.into())
 8000b7c:      	mov	r0, r1
 8000b7e:      	bl	#0x6c8
 8000b82:      	ldr	r1, [sp]
 8000b84:      	str	r1, [sp, #0x28]
 8000b86:      	strb	r0, [r7, #-1]
;         self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
 8000b8a:      	ldr	r2, [r1]
 8000b8c:      	bic	r2, r2, #0x800
 8000b90:      	orr.w	r0, r2, r0, lsl #11
 8000b94:      	str	r0, [r1]
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000b96:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE11$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h30907c2457c1b492E+0x44>
 8000b98:      	ldr	r0, [sp]
 8000b9a:      	add	sp, #0x30
 8000b9c:      	pop	{r7, pc}

08000b9e <_ZN13stm32f3xx_hal4gpio5gpioe16PE12$LT$MODE$GT$21into_push_pull_output17hc8932b8352d5258dE>:
;                             pub fn into_push_pull_output(
 8000b9e:      	push	{r7, lr}
 8000ba0:      	mov	r7, sp
 8000ba2:      	sub	sp, #0x78
 8000ba4:      	str	r0, [sp, #0x28]
 8000ba6:      	str	r1, [sp, #0x2c]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000ba8:      	str	r1, [sp, #0x14]
 8000baa:      	bl	#0xa14
 8000bae:      	str	r0, [sp, #0x10]
 8000bb0:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE12$LT$MODE$GT$21into_push_pull_output17hc8932b8352d5258dE+0x14>
 8000bb2:      	ldr	r0, [sp, #0x10]
 8000bb4:      	str	r0, [sp, #0x40]
 8000bb6:      	str	r0, [sp, #0x48]
;         unsafe { ptr::read_volatile(self.value.get()) }
 8000bb8:      	bl	#0x1062
 8000bbc:      	bl	#0xc38
;         let bits = self.register.get();
 8000bc0:      	str	r0, [sp, #0x44]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 8000bc2:      	str	r0, [sp, #0x38]
 8000bc4:      	str	r0, [sp, #0x3c]
 8000bc6:      	add	r0, sp, #0x38
 8000bc8:      	str	r0, [sp, #0x30]
 8000bca:      	add	r0, sp, #0x3c
 8000bcc:      	str	r0, [sp, #0x34]
 8000bce:      	ldr	r0, [sp, #0x30]
 8000bd0:      	ldr	r1, [sp, #0x34]
 8000bd2:      	bl	#0xac
 8000bd6:      	ldr	r0, [r0]
 8000bd8:      	ldr	r1, [sp, #0x10]
 8000bda:      	str	r1, [sp, #0x4c]
 8000bdc:      	str	r0, [sp, #0x50]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 8000bde:      	str	r0, [sp, #0xc]
 8000be0:      	mov	r0, r1
 8000be2:      	bl	#0x1038
 8000be6:      	ldr	r1, [sp, #0xc]
 8000be8:      	bl	#0xc32
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000bec:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE12$LT$MODE$GT$21into_push_pull_output17hc8932b8352d5258dE+0x50>
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000bee:      	ldr	r0, [sp, #0x14]
 8000bf0:      	bl	#0x9e0
 8000bf4:      	str	r0, [sp, #0x8]
 8000bf6:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE12$LT$MODE$GT$21into_push_pull_output17hc8932b8352d5258dE+0x5a>
 8000bf8:      	ldr	r0, [sp, #0x8]
 8000bfa:      	str	r0, [sp, #0x64]
 8000bfc:      	str	r0, [sp, #0x6c]
;         unsafe { ptr::read_volatile(self.value.get()) }
 8000bfe:      	bl	#0x101c
 8000c02:      	bl	#0xbf2
;         let bits = self.register.get();
 8000c06:      	str	r0, [sp, #0x68]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 8000c08:      	str	r0, [sp, #0x5c]
 8000c0a:      	str	r0, [sp, #0x60]
 8000c0c:      	add	r0, sp, #0x5c
 8000c0e:      	str	r0, [sp, #0x54]
 8000c10:      	add	r0, sp, #0x60
 8000c12:      	str	r0, [sp, #0x58]
 8000c14:      	ldr	r0, [sp, #0x54]
 8000c16:      	ldr	r1, [sp, #0x58]
 8000c18:      	bl	#0x1c
 8000c1c:      	ldr	r0, [r0]
 8000c1e:      	ldr	r1, [sp, #0x8]
 8000c20:      	str	r1, [sp, #0x70]
 8000c22:      	str	r0, [sp, #0x74]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 8000c24:      	str	r0, [sp, #0x4]
 8000c26:      	mov	r0, r1
 8000c28:      	bl	#0xff2
 8000c2c:      	ldr	r1, [sp, #0x4]
 8000c2e:      	bl	#0xbec
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000c32:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE12$LT$MODE$GT$21into_push_pull_output17hc8932b8352d5258dE+0x96>
;                             }
 8000c34:      	add	sp, #0x78
 8000c36:      	pop	{r7, pc}

08000c38 <_ZN13stm32f3xx_hal4gpio5gpioe16PE12$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h163d7d4aa4aade00E>:
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000c38:      	push	{r7, lr}
 8000c3a:      	mov	r7, sp
 8000c3c:      	sub	sp, #0x30
 8000c3e:      	str	r0, [sp, #0x8]
 8000c40:      	str	r1, [sp, #0xc]
 8000c42:      	str	r1, [sp, #0x14]
;         OT12_W { w: self }
 8000c44:      	str	r1, [sp, #0x10]
;     }
 8000c46:      	ldr	r0, [sp, #0x10]
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000c48:      	str	r0, [sp]
 8000c4a:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE12$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h163d7d4aa4aade00E+0x14>
 8000c4c:      	ldr	r0, [sp]
 8000c4e:      	str	r0, [sp, #0x1c]
 8000c50:      	movs	r1, #0x0
;         self.variant(OT15_A::PUSHPULL)
 8000c52:      	strb	r1, [r7, #-21]
 8000c56:      	ldrb	r1, [r7, #-21]
 8000c5a:      	str	r0, [sp, #0x20]
 8000c5c:      	strb	r1, [r7, #-9]
;             self.bit(variant.into())
 8000c60:      	mov	r0, r1
 8000c62:      	bl	#0x5e4
 8000c66:      	ldr	r1, [sp]
 8000c68:      	str	r1, [sp, #0x28]
 8000c6a:      	strb	r0, [r7, #-1]
;         self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
 8000c6e:      	ldr	r2, [r1]
 8000c70:      	bic	r2, r2, #0x1000
 8000c74:      	orr.w	r0, r2, r0, lsl #12
 8000c78:      	str	r0, [r1]
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000c7a:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE12$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h163d7d4aa4aade00E+0x44>
 8000c7c:      	ldr	r0, [sp]
 8000c7e:      	add	sp, #0x30
 8000c80:      	pop	{r7, pc}

08000c82 <_ZN13stm32f3xx_hal4gpio5gpioe16PE12$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h1f3236304f4ea8edE>:
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000c82:      	push	{r7, lr}
 8000c84:      	mov	r7, sp
 8000c86:      	sub	sp, #0x30
 8000c88:      	str	r0, [sp, #0x8]
 8000c8a:      	str	r1, [sp, #0xc]
 8000c8c:      	str	r1, [sp, #0x14]
;         MODER12_W { w: self }
 8000c8e:      	str	r1, [sp, #0x10]
;     }
 8000c90:      	ldr	r0, [sp, #0x10]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000c92:      	str	r0, [sp]
 8000c94:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE12$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h1f3236304f4ea8edE+0x14>
 8000c96:      	ldr	r0, [sp]
 8000c98:      	str	r0, [sp, #0x1c]
 8000c9a:      	movs	r1, #0x1
;         self.variant(MODER15_A::OUTPUT)
 8000c9c:      	strb	r1, [r7, #-21]
 8000ca0:      	ldrb	r1, [r7, #-21]
 8000ca4:      	str	r0, [sp, #0x20]
 8000ca6:      	strb	r1, [r7, #-9]
;             self.bits(variant.into())
 8000caa:      	mov	r0, r1
 8000cac:      	bl	#0x690
 8000cb0:      	ldr	r1, [sp]
 8000cb2:      	str	r1, [sp, #0x28]
 8000cb4:      	strb	r0, [r7, #-1]
;         self.w.bits = (self.w.bits & !(0x03 << 24)) | (((value as u32) & 0x03) << 24);
 8000cb8:      	ldr	r2, [r1]
 8000cba:      	bic	r2, r2, #0x3000000
 8000cbe:      	and	r0, r0, #0x3
 8000cc2:      	orr.w	r0, r2, r0, lsl #24
 8000cc6:      	str	r0, [r1]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000cc8:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE12$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h1f3236304f4ea8edE+0x48>
 8000cca:      	ldr	r0, [sp]
 8000ccc:      	add	sp, #0x30
 8000cce:      	pop	{r7, pc}

08000cd0 <_ZN13stm32f3xx_hal4gpio5gpioe16PE13$LT$MODE$GT$21into_push_pull_output17h2b1df1aa21b3d76eE>:
;                             pub fn into_push_pull_output(
 8000cd0:      	push	{r7, lr}
 8000cd2:      	mov	r7, sp
 8000cd4:      	sub	sp, #0x78
 8000cd6:      	str	r0, [sp, #0x28]
 8000cd8:      	str	r1, [sp, #0x2c]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000cda:      	str	r1, [sp, #0x14]
 8000cdc:      	bl	#0x8e2
 8000ce0:      	str	r0, [sp, #0x10]
 8000ce2:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE13$LT$MODE$GT$21into_push_pull_output17h2b1df1aa21b3d76eE+0x14>
 8000ce4:      	ldr	r0, [sp, #0x10]
 8000ce6:      	str	r0, [sp, #0x40]
 8000ce8:      	str	r0, [sp, #0x48]
;         unsafe { ptr::read_volatile(self.value.get()) }
 8000cea:      	bl	#0xf30
 8000cee:      	bl	#0xb06
;         let bits = self.register.get();
 8000cf2:      	str	r0, [sp, #0x44]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 8000cf4:      	str	r0, [sp, #0x38]
 8000cf6:      	str	r0, [sp, #0x3c]
 8000cf8:      	add	r0, sp, #0x38
 8000cfa:      	str	r0, [sp, #0x30]
 8000cfc:      	add	r0, sp, #0x3c
 8000cfe:      	str	r0, [sp, #0x34]
 8000d00:      	ldr	r0, [sp, #0x30]
 8000d02:      	ldr	r1, [sp, #0x34]
 8000d04:      	bl	#0x62
 8000d08:      	ldr	r0, [r0]
 8000d0a:      	ldr	r1, [sp, #0x10]
 8000d0c:      	str	r1, [sp, #0x4c]
 8000d0e:      	str	r0, [sp, #0x50]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 8000d10:      	str	r0, [sp, #0xc]
 8000d12:      	mov	r0, r1
 8000d14:      	bl	#0xf06
 8000d18:      	ldr	r1, [sp, #0xc]
 8000d1a:      	bl	#0xb00
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000d1e:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE13$LT$MODE$GT$21into_push_pull_output17h2b1df1aa21b3d76eE+0x50>
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000d20:      	ldr	r0, [sp, #0x14]
 8000d22:      	bl	#0x8ae
 8000d26:      	str	r0, [sp, #0x8]
 8000d28:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE13$LT$MODE$GT$21into_push_pull_output17h2b1df1aa21b3d76eE+0x5a>
 8000d2a:      	ldr	r0, [sp, #0x8]
 8000d2c:      	str	r0, [sp, #0x64]
 8000d2e:      	str	r0, [sp, #0x6c]
;         unsafe { ptr::read_volatile(self.value.get()) }
 8000d30:      	bl	#0xeea
 8000d34:      	bl	#0xac0
;         let bits = self.register.get();
 8000d38:      	str	r0, [sp, #0x68]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 8000d3a:      	str	r0, [sp, #0x5c]
 8000d3c:      	str	r0, [sp, #0x60]
 8000d3e:      	add	r0, sp, #0x5c
 8000d40:      	str	r0, [sp, #0x54]
 8000d42:      	add	r0, sp, #0x60
 8000d44:      	str	r0, [sp, #0x58]
 8000d46:      	ldr	r0, [sp, #0x54]
 8000d48:      	ldr	r1, [sp, #0x58]
 8000d4a:      	bl	#0x6a
 8000d4e:      	ldr	r0, [r0]
 8000d50:      	ldr	r1, [sp, #0x8]
 8000d52:      	str	r1, [sp, #0x70]
 8000d54:      	str	r0, [sp, #0x74]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 8000d56:      	str	r0, [sp, #0x4]
 8000d58:      	mov	r0, r1
 8000d5a:      	bl	#0xec0
 8000d5e:      	ldr	r1, [sp, #0x4]
 8000d60:      	bl	#0xaba
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000d64:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE13$LT$MODE$GT$21into_push_pull_output17h2b1df1aa21b3d76eE+0x96>
;                             }
 8000d66:      	add	sp, #0x78
 8000d68:      	pop	{r7, pc}

08000d6a <_ZN13stm32f3xx_hal4gpio5gpioe16PE13$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h1e266adcf4c816f6E>:
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000d6a:      	push	{r7, lr}
 8000d6c:      	mov	r7, sp
 8000d6e:      	sub	sp, #0x30
 8000d70:      	str	r0, [sp, #0x8]
 8000d72:      	str	r1, [sp, #0xc]
 8000d74:      	str	r1, [sp, #0x14]
;         MODER13_W { w: self }
 8000d76:      	str	r1, [sp, #0x10]
;     }
 8000d78:      	ldr	r0, [sp, #0x10]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000d7a:      	str	r0, [sp]
 8000d7c:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE13$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h1e266adcf4c816f6E+0x14>
 8000d7e:      	ldr	r0, [sp]
 8000d80:      	str	r0, [sp, #0x1c]
 8000d82:      	movs	r1, #0x1
;         self.variant(MODER15_A::OUTPUT)
 8000d84:      	strb	r1, [r7, #-21]
 8000d88:      	ldrb	r1, [r7, #-21]
 8000d8c:      	str	r0, [sp, #0x20]
 8000d8e:      	strb	r1, [r7, #-9]
;             self.bits(variant.into())
 8000d92:      	mov	r0, r1
 8000d94:      	bl	#0x5a8
 8000d98:      	ldr	r1, [sp]
 8000d9a:      	str	r1, [sp, #0x28]
 8000d9c:      	strb	r0, [r7, #-1]
;         self.w.bits = (self.w.bits & !(0x03 << 26)) | (((value as u32) & 0x03) << 26);
 8000da0:      	ldr	r2, [r1]
 8000da2:      	bic	r2, r2, #0xc000000
 8000da6:      	and	r0, r0, #0x3
 8000daa:      	orr.w	r0, r2, r0, lsl #26
 8000dae:      	str	r0, [r1]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000db0:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE13$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h1e266adcf4c816f6E+0x48>
 8000db2:      	ldr	r0, [sp]
 8000db4:      	add	sp, #0x30
 8000db6:      	pop	{r7, pc}

08000db8 <_ZN13stm32f3xx_hal4gpio5gpioe16PE13$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h41951d451d0c80afE>:
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000db8:      	push	{r7, lr}
 8000dba:      	mov	r7, sp
 8000dbc:      	sub	sp, #0x30
 8000dbe:      	str	r0, [sp, #0x8]
 8000dc0:      	str	r1, [sp, #0xc]
 8000dc2:      	str	r1, [sp, #0x14]
;         OT13_W { w: self }
 8000dc4:      	str	r1, [sp, #0x10]
;     }
 8000dc6:      	ldr	r0, [sp, #0x10]
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000dc8:      	str	r0, [sp]
 8000dca:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE13$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h41951d451d0c80afE+0x14>
 8000dcc:      	ldr	r0, [sp]
 8000dce:      	str	r0, [sp, #0x1c]
 8000dd0:      	movs	r1, #0x0
;         self.variant(OT15_A::PUSHPULL)
 8000dd2:      	strb	r1, [r7, #-21]
 8000dd6:      	ldrb	r1, [r7, #-21]
 8000dda:      	str	r0, [sp, #0x20]
 8000ddc:      	strb	r1, [r7, #-9]
;             self.bit(variant.into())
 8000de0:      	mov	r0, r1
 8000de2:      	bl	#0x464
 8000de6:      	ldr	r1, [sp]
 8000de8:      	str	r1, [sp, #0x28]
 8000dea:      	strb	r0, [r7, #-1]
;         self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
 8000dee:      	ldr	r2, [r1]
 8000df0:      	bic	r2, r2, #0x2000
 8000df4:      	orr.w	r0, r2, r0, lsl #13
 8000df8:      	str	r0, [r1]
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000dfa:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE13$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h41951d451d0c80afE+0x44>
 8000dfc:      	ldr	r0, [sp]
 8000dfe:      	add	sp, #0x30
 8000e00:      	pop	{r7, pc}

08000e02 <_ZN13stm32f3xx_hal4gpio5gpioe16PE14$LT$MODE$GT$21into_push_pull_output17h33bd8ffecf80c683E>:
;                             pub fn into_push_pull_output(
 8000e02:      	push	{r7, lr}
 8000e04:      	mov	r7, sp
 8000e06:      	sub	sp, #0x78
 8000e08:      	str	r0, [sp, #0x28]
 8000e0a:      	str	r1, [sp, #0x2c]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000e0c:      	str	r1, [sp, #0x14]
 8000e0e:      	bl	#0x7b0
 8000e12:      	str	r0, [sp, #0x10]
 8000e14:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE14$LT$MODE$GT$21into_push_pull_output17h33bd8ffecf80c683E+0x14>
 8000e16:      	ldr	r0, [sp, #0x10]
 8000e18:      	str	r0, [sp, #0x40]
 8000e1a:      	str	r0, [sp, #0x48]
;         unsafe { ptr::read_volatile(self.value.get()) }
 8000e1c:      	bl	#0xdfe
 8000e20:      	bl	#0x9d4
;         let bits = self.register.get();
 8000e24:      	str	r0, [sp, #0x44]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 8000e26:      	str	r0, [sp, #0x38]
 8000e28:      	str	r0, [sp, #0x3c]
 8000e2a:      	add	r0, sp, #0x38
 8000e2c:      	str	r0, [sp, #0x30]
 8000e2e:      	add	r0, sp, #0x3c
 8000e30:      	str	r0, [sp, #0x34]
 8000e32:      	ldr	r0, [sp, #0x30]
 8000e34:      	ldr	r1, [sp, #0x34]
 8000e36:      	bl	#0x62
 8000e3a:      	ldr	r0, [r0]
 8000e3c:      	ldr	r1, [sp, #0x10]
 8000e3e:      	str	r1, [sp, #0x4c]
 8000e40:      	str	r0, [sp, #0x50]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 8000e42:      	str	r0, [sp, #0xc]
 8000e44:      	mov	r0, r1
 8000e46:      	bl	#0xdd4
 8000e4a:      	ldr	r1, [sp, #0xc]
 8000e4c:      	bl	#0x9ce
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000e50:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE14$LT$MODE$GT$21into_push_pull_output17h33bd8ffecf80c683E+0x50>
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000e52:      	ldr	r0, [sp, #0x14]
 8000e54:      	bl	#0x77c
 8000e58:      	str	r0, [sp, #0x8]
 8000e5a:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE14$LT$MODE$GT$21into_push_pull_output17h33bd8ffecf80c683E+0x5a>
 8000e5c:      	ldr	r0, [sp, #0x8]
 8000e5e:      	str	r0, [sp, #0x64]
 8000e60:      	str	r0, [sp, #0x6c]
;         unsafe { ptr::read_volatile(self.value.get()) }
 8000e62:      	bl	#0xdb8
 8000e66:      	bl	#0x98e
;         let bits = self.register.get();
 8000e6a:      	str	r0, [sp, #0x68]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 8000e6c:      	str	r0, [sp, #0x5c]
 8000e6e:      	str	r0, [sp, #0x60]
 8000e70:      	add	r0, sp, #0x5c
 8000e72:      	str	r0, [sp, #0x54]
 8000e74:      	add	r0, sp, #0x60
 8000e76:      	str	r0, [sp, #0x58]
 8000e78:      	ldr	r0, [sp, #0x54]
 8000e7a:      	ldr	r1, [sp, #0x58]
 8000e7c:      	bl	#0x6a
 8000e80:      	ldr	r0, [r0]
 8000e82:      	ldr	r1, [sp, #0x8]
 8000e84:      	str	r1, [sp, #0x70]
 8000e86:      	str	r0, [sp, #0x74]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 8000e88:      	str	r0, [sp, #0x4]
 8000e8a:      	mov	r0, r1
 8000e8c:      	bl	#0xd8e
 8000e90:      	ldr	r1, [sp, #0x4]
 8000e92:      	bl	#0x988
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000e96:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE14$LT$MODE$GT$21into_push_pull_output17h33bd8ffecf80c683E+0x96>
;                             }
 8000e98:      	add	sp, #0x78
 8000e9a:      	pop	{r7, pc}

08000e9c <_ZN13stm32f3xx_hal4gpio5gpioe16PE14$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h055551fb4798fa46E>:
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000e9c:      	push	{r7, lr}
 8000e9e:      	mov	r7, sp
 8000ea0:      	sub	sp, #0x30
 8000ea2:      	str	r0, [sp, #0x8]
 8000ea4:      	str	r1, [sp, #0xc]
 8000ea6:      	str	r1, [sp, #0x14]
;         MODER14_W { w: self }
 8000ea8:      	str	r1, [sp, #0x10]
;     }
 8000eaa:      	ldr	r0, [sp, #0x10]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000eac:      	str	r0, [sp]
 8000eae:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE14$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h055551fb4798fa46E+0x14>
 8000eb0:      	ldr	r0, [sp]
 8000eb2:      	str	r0, [sp, #0x1c]
 8000eb4:      	movs	r1, #0x1
;         self.variant(MODER15_A::OUTPUT)
 8000eb6:      	strb	r1, [r7, #-21]
 8000eba:      	ldrb	r1, [r7, #-21]
 8000ebe:      	str	r0, [sp, #0x20]
 8000ec0:      	strb	r1, [r7, #-9]
;             self.bits(variant.into())
 8000ec4:      	mov	r0, r1
 8000ec6:      	bl	#0x476
 8000eca:      	ldr	r1, [sp]
 8000ecc:      	str	r1, [sp, #0x28]
 8000ece:      	strb	r0, [r7, #-1]
;         self.w.bits = (self.w.bits & !(0x03 << 28)) | (((value as u32) & 0x03) << 28);
 8000ed2:      	ldr	r2, [r1]
 8000ed4:      	bic	r2, r2, #0x30000000
 8000ed8:      	and	r0, r0, #0x3
 8000edc:      	orr.w	r0, r2, r0, lsl #28
 8000ee0:      	str	r0, [r1]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000ee2:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE14$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h055551fb4798fa46E+0x48>
 8000ee4:      	ldr	r0, [sp]
 8000ee6:      	add	sp, #0x30
 8000ee8:      	pop	{r7, pc}

08000eea <_ZN13stm32f3xx_hal4gpio5gpioe16PE14$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hf272f0f4cfd9fd7cE>:
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000eea:      	push	{r7, lr}
 8000eec:      	mov	r7, sp
 8000eee:      	sub	sp, #0x30
 8000ef0:      	str	r0, [sp, #0x8]
 8000ef2:      	str	r1, [sp, #0xc]
 8000ef4:      	str	r1, [sp, #0x14]
;         OT14_W { w: self }
 8000ef6:      	str	r1, [sp, #0x10]
;     }
 8000ef8:      	ldr	r0, [sp, #0x10]
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000efa:      	str	r0, [sp]
 8000efc:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE14$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hf272f0f4cfd9fd7cE+0x14>
 8000efe:      	ldr	r0, [sp]
 8000f00:      	str	r0, [sp, #0x1c]
 8000f02:      	movs	r1, #0x0
;         self.variant(OT15_A::PUSHPULL)
 8000f04:      	strb	r1, [r7, #-21]
 8000f08:      	ldrb	r1, [r7, #-21]
 8000f0c:      	str	r0, [sp, #0x20]
 8000f0e:      	strb	r1, [r7, #-9]
;             self.bit(variant.into())
 8000f12:      	mov	r0, r1
 8000f14:      	bl	#0x332
 8000f18:      	ldr	r1, [sp]
 8000f1a:      	str	r1, [sp, #0x28]
 8000f1c:      	strb	r0, [r7, #-1]
;         self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
 8000f20:      	ldr	r2, [r1]
 8000f22:      	bic	r2, r2, #0x4000
 8000f26:      	orr.w	r0, r2, r0, lsl #14
 8000f2a:      	str	r0, [r1]
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000f2c:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE14$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hf272f0f4cfd9fd7cE+0x44>
 8000f2e:      	ldr	r0, [sp]
 8000f30:      	add	sp, #0x30
 8000f32:      	pop	{r7, pc}

08000f34 <_ZN13stm32f3xx_hal4gpio5gpioe16PE15$LT$MODE$GT$21into_push_pull_output17hdbbcd9cf76d4b18fE>:
;                             pub fn into_push_pull_output(
 8000f34:      	push	{r7, lr}
 8000f36:      	mov	r7, sp
 8000f38:      	sub	sp, #0x78
 8000f3a:      	str	r0, [sp, #0x28]
 8000f3c:      	str	r1, [sp, #0x2c]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000f3e:      	str	r1, [sp, #0x14]
 8000f40:      	bl	#0x67e
 8000f44:      	str	r0, [sp, #0x10]
 8000f46:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE15$LT$MODE$GT$21into_push_pull_output17hdbbcd9cf76d4b18fE+0x14>
 8000f48:      	ldr	r0, [sp, #0x10]
 8000f4a:      	str	r0, [sp, #0x40]
 8000f4c:      	str	r0, [sp, #0x48]
;         unsafe { ptr::read_volatile(self.value.get()) }
 8000f4e:      	bl	#0xccc
 8000f52:      	bl	#0x8a2
;         let bits = self.register.get();
 8000f56:      	str	r0, [sp, #0x44]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 8000f58:      	str	r0, [sp, #0x38]
 8000f5a:      	str	r0, [sp, #0x3c]
 8000f5c:      	add	r0, sp, #0x38
 8000f5e:      	str	r0, [sp, #0x30]
 8000f60:      	add	r0, sp, #0x3c
 8000f62:      	str	r0, [sp, #0x34]
 8000f64:      	ldr	r0, [sp, #0x30]
 8000f66:      	ldr	r1, [sp, #0x34]
 8000f68:      	bl	#0x62
 8000f6c:      	ldr	r0, [r0]
 8000f6e:      	ldr	r1, [sp, #0x10]
 8000f70:      	str	r1, [sp, #0x4c]
 8000f72:      	str	r0, [sp, #0x50]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 8000f74:      	str	r0, [sp, #0xc]
 8000f76:      	mov	r0, r1
 8000f78:      	bl	#0xca2
 8000f7c:      	ldr	r1, [sp, #0xc]
 8000f7e:      	bl	#0x89c
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000f82:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE15$LT$MODE$GT$21into_push_pull_output17hdbbcd9cf76d4b18fE+0x50>
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000f84:      	ldr	r0, [sp, #0x14]
 8000f86:      	bl	#0x64a
 8000f8a:      	str	r0, [sp, #0x8]
 8000f8c:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE15$LT$MODE$GT$21into_push_pull_output17hdbbcd9cf76d4b18fE+0x5a>
 8000f8e:      	ldr	r0, [sp, #0x8]
 8000f90:      	str	r0, [sp, #0x64]
 8000f92:      	str	r0, [sp, #0x6c]
;         unsafe { ptr::read_volatile(self.value.get()) }
 8000f94:      	bl	#0xc86
 8000f98:      	bl	#0x85c
;         let bits = self.register.get();
 8000f9c:      	str	r0, [sp, #0x68]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 8000f9e:      	str	r0, [sp, #0x5c]
 8000fa0:      	str	r0, [sp, #0x60]
 8000fa2:      	add	r0, sp, #0x5c
 8000fa4:      	str	r0, [sp, #0x54]
 8000fa6:      	add	r0, sp, #0x60
 8000fa8:      	str	r0, [sp, #0x58]
 8000faa:      	ldr	r0, [sp, #0x54]
 8000fac:      	ldr	r1, [sp, #0x58]
 8000fae:      	bl	#0x66
 8000fb2:      	ldr	r0, [r0]
 8000fb4:      	ldr	r1, [sp, #0x8]
 8000fb6:      	str	r1, [sp, #0x70]
 8000fb8:      	str	r0, [sp, #0x74]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 8000fba:      	str	r0, [sp, #0x4]
 8000fbc:      	mov	r0, r1
 8000fbe:      	bl	#0xc5c
 8000fc2:      	ldr	r1, [sp, #0x4]
 8000fc4:      	bl	#0x856
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000fc8:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE15$LT$MODE$GT$21into_push_pull_output17hdbbcd9cf76d4b18fE+0x96>
;                             }
 8000fca:      	add	sp, #0x78
 8000fcc:      	pop	{r7, pc}

08000fce <_ZN13stm32f3xx_hal4gpio5gpioe16PE15$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h5c5901409fca1eb2E>:
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000fce:      	push	{r7, lr}
 8000fd0:      	mov	r7, sp
 8000fd2:      	sub	sp, #0x30
 8000fd4:      	str	r0, [sp, #0x8]
 8000fd6:      	str	r1, [sp, #0xc]
 8000fd8:      	str	r1, [sp, #0x14]
;         MODER15_W { w: self }
 8000fda:      	str	r1, [sp, #0x10]
;     }
 8000fdc:      	ldr	r0, [sp, #0x10]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000fde:      	str	r0, [sp]
 8000fe0:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE15$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h5c5901409fca1eb2E+0x14>
 8000fe2:      	ldr	r0, [sp]
 8000fe4:      	str	r0, [sp, #0x1c]
 8000fe6:      	movs	r1, #0x1
;         self.variant(MODER15_A::OUTPUT)
 8000fe8:      	strb	r1, [r7, #-21]
 8000fec:      	ldrb	r1, [r7, #-21]
 8000ff0:      	str	r0, [sp, #0x20]
 8000ff2:      	strb	r1, [r7, #-9]
;             self.bits(variant.into())
 8000ff6:      	mov	r0, r1
 8000ff8:      	bl	#0x344
 8000ffc:      	ldr	r1, [sp]
 8000ffe:      	str	r1, [sp, #0x28]
 8001000:      	strb	r0, [r7, #-1]
;         self.w.bits = (self.w.bits & !(0x03 << 30)) | (((value as u32) & 0x03) << 30);
 8001004:      	ldr	r2, [r1]
 8001006:      	bic	r2, r2, #0xc0000000
 800100a:      	orr.w	r0, r2, r0, lsl #30
 800100e:      	str	r0, [r1]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8001010:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE15$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h5c5901409fca1eb2E+0x44>
 8001012:      	ldr	r0, [sp]
 8001014:      	add	sp, #0x30
 8001016:      	pop	{r7, pc}

08001018 <_ZN13stm32f3xx_hal4gpio5gpioe16PE15$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h75c0d787dd948decE>:
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8001018:      	push	{r7, lr}
 800101a:      	mov	r7, sp
 800101c:      	sub	sp, #0x30
 800101e:      	str	r0, [sp, #0x8]
 8001020:      	str	r1, [sp, #0xc]
 8001022:      	str	r1, [sp, #0x14]
;         OT15_W { w: self }
 8001024:      	str	r1, [sp, #0x10]
;     }
 8001026:      	ldr	r0, [sp, #0x10]
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8001028:      	str	r0, [sp]
 800102a:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE15$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h75c0d787dd948decE+0x14>
 800102c:      	ldr	r0, [sp]
 800102e:      	str	r0, [sp, #0x1c]
 8001030:      	movs	r1, #0x0
;         self.variant(OT15_A::PUSHPULL)
 8001032:      	strb	r1, [r7, #-21]
 8001036:      	ldrb	r1, [r7, #-21]
 800103a:      	str	r0, [sp, #0x20]
 800103c:      	strb	r1, [r7, #-9]
;             self.bit(variant.into())
 8001040:      	mov	r0, r1
 8001042:      	bl	#0x204
 8001046:      	ldr	r1, [sp]
 8001048:      	str	r1, [sp, #0x28]
 800104a:      	strb	r0, [r7, #-1]
;         self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
 800104e:      	ldr	r2, [r1]
 8001050:      	bic	r2, r2, #0x8000
 8001054:      	orr.w	r0, r2, r0, lsl #15
 8001058:      	str	r0, [r1]
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 800105a:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE15$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h75c0d787dd948decE+0x44>
 800105c:      	ldr	r0, [sp]
 800105e:      	add	sp, #0x30
 8001060:      	pop	{r7, pc}

08001062 <_ZN13stm32f3xx_hal4gpio5gpioe50PE8$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$9downgrade17hd57a5fec90ed5036E>:
;                             pub fn downgrade(self) -> $PXx<Output<MODE>> {
 8001062:      	sub	sp, #0x8
 8001064:      	movs	r0, #0x8
; gpio!([
 8001066:      	strb.w	r0, [sp, #0x3]
;                             }
 800106a:      	ldrb.w	r0, [sp, #0x3]
 800106e:      	add	sp, #0x8
 8001070:      	bx	lr

08001072 <_ZN13stm32f3xx_hal4gpio5gpioe50PE9$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$9downgrade17h69c52ba5c3560f82E>:
;                             pub fn downgrade(self) -> $PXx<Output<MODE>> {
 8001072:      	sub	sp, #0x8
 8001074:      	movs	r0, #0x9
; gpio!([
 8001076:      	strb.w	r0, [sp, #0x3]
;                             }
 800107a:      	ldrb.w	r0, [sp, #0x3]
 800107e:      	add	sp, #0x8
 8001080:      	bx	lr

08001082 <_ZN13stm32f3xx_hal4gpio5gpioe51PE10$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$9downgrade17hf45035354028de4dE>:
;                             pub fn downgrade(self) -> $PXx<Output<MODE>> {
 8001082:      	sub	sp, #0x8
 8001084:      	movs	r0, #0xa
; gpio!([
 8001086:      	strb.w	r0, [sp, #0x3]
;                             }
 800108a:      	ldrb.w	r0, [sp, #0x3]
 800108e:      	add	sp, #0x8
 8001090:      	bx	lr

08001092 <_ZN13stm32f3xx_hal4gpio5gpioe51PE11$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$9downgrade17h99ce628973c6bb40E>:
;                             pub fn downgrade(self) -> $PXx<Output<MODE>> {
 8001092:      	sub	sp, #0x8
 8001094:      	movs	r0, #0xb
; gpio!([
 8001096:      	strb.w	r0, [sp, #0x3]
;                             }
 800109a:      	ldrb.w	r0, [sp, #0x3]
 800109e:      	add	sp, #0x8
 80010a0:      	bx	lr

080010a2 <_ZN13stm32f3xx_hal4gpio5gpioe51PE12$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$9downgrade17hac924decc8451af0E>:
;                             pub fn downgrade(self) -> $PXx<Output<MODE>> {
 80010a2:      	sub	sp, #0x8
 80010a4:      	movs	r0, #0xc
; gpio!([
 80010a6:      	strb.w	r0, [sp, #0x3]
;                             }
 80010aa:      	ldrb.w	r0, [sp, #0x3]
 80010ae:      	add	sp, #0x8
 80010b0:      	bx	lr

080010b2 <_ZN13stm32f3xx_hal4gpio5gpioe51PE13$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$9downgrade17h1fbaa156068e858eE>:
;                             pub fn downgrade(self) -> $PXx<Output<MODE>> {
 80010b2:      	sub	sp, #0x8
 80010b4:      	movs	r0, #0xd
; gpio!([
 80010b6:      	strb.w	r0, [sp, #0x3]
;                             }
 80010ba:      	ldrb.w	r0, [sp, #0x3]
 80010be:      	add	sp, #0x8
 80010c0:      	bx	lr

080010c2 <_ZN13stm32f3xx_hal4gpio5gpioe51PE14$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$9downgrade17h0d7fe482780a060fE>:
;                             pub fn downgrade(self) -> $PXx<Output<MODE>> {
 80010c2:      	sub	sp, #0x8
 80010c4:      	movs	r0, #0xe
; gpio!([
 80010c6:      	strb.w	r0, [sp, #0x3]
;                             }
 80010ca:      	ldrb.w	r0, [sp, #0x3]
 80010ce:      	add	sp, #0x8
 80010d0:      	bx	lr

080010d2 <_ZN13stm32f3xx_hal4gpio5gpioe51PE15$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$9downgrade17h9a80ac3fc31d3f77E>:
;                             pub fn downgrade(self) -> $PXx<Output<MODE>> {
 80010d2:      	sub	sp, #0x8
 80010d4:      	movs	r0, #0xf
; gpio!([
 80010d6:      	strb.w	r0, [sp, #0x3]
;                             }
 80010da:      	ldrb.w	r0, [sp, #0x3]
 80010de:      	add	sp, #0x8
 80010e0:      	bx	lr

080010e2 <<T as switch_hal::IntoSwitch>::into_switch::hf25bdc0dd500bc6b>:
;     fn into_switch<ActiveLevel>(self) -> Switch<Self, ActiveLevel> {
 80010e2:      	push	{r7, lr}
 80010e4:      	mov	r7, sp
 80010e6:      	sub	sp, #0x10
 80010e8:      	mov	r1, r0
 80010ea:      	strb	r0, [r7, #-1]
;         Switch::<Self, ActiveLevel>::new(self)
 80010ee:      	str	r1, [sp, #0x8]
 80010f0:      	bl	#-0xc9c
 80010f4:      	str	r0, [sp, #0x4]
 80010f6:      	b	#-0x2 <<T as switch_hal::IntoSwitch>::into_switch::hf25bdc0dd500bc6b+0x16>
;     }
 80010f8:      	ldr	r0, [sp, #0x4]
 80010fa:      	add	sp, #0x10
 80010fc:      	pop	{r7, pc}

080010fe <cortex_m::peripheral::Peripherals::take::h1803e38465015c8e>:
;     pub fn take() -> Option<Self> {
 80010fe:      	push	{r7, lr}
 8001100:      	mov	r7, sp
 8001102:      	sub	sp, #0x8
;         interrupt::free(|_| match cortex_m_0_7::peripheral::Peripherals::take() {
 8001104:      	bl	#-0xba4
 8001108:      	str	r0, [sp]
 800110a:      	b	#-0x2 <cortex_m::peripheral::Peripherals::take::h1803e38465015c8e+0xe>
;     }
 800110c:      	ldr	r0, [sp]
 800110e:      	and	r0, r0, #0x1
 8001112:      	add	sp, #0x8
 8001114:      	pop	{r7, pc}

08001116 <cortex_m::peripheral::Peripherals::steal::h5c4527d8b5a5bc4e>:
;     pub unsafe fn steal() -> Self {
 8001116:      	push	{r7, lr}
 8001118:      	mov	r7, sp
 800111a:      	sub	sp, #0x8
;         cortex_m_0_7::peripheral::Peripherals::steal();
 800111c:      	bl	#0x38
 8001120:      	b	#-0x2 <cortex_m::peripheral::Peripherals::steal::h5c4527d8b5a5bc4e+0xc>
;         core::mem::transmute(())
 8001122:      	b	#-0x2 <cortex_m::peripheral::Peripherals::steal::h5c4527d8b5a5bc4e+0xe>
;     }
 8001124:      	add	sp, #0x8
 8001126:      	pop	{r7, pc}

08001128 <cortex_m::interrupt::enable::hf9a64ec5f74a515c>:
; pub unsafe fn enable() {
 8001128:      	push	{r7, lr}
 800112a:      	mov	r7, sp
;     call_asm!(__cpsie());
 800112c:      	bl	#0xb04
 8001130:      	b	#-0x2 <cortex_m::interrupt::enable::hf9a64ec5f74a515c+0xa>
; }
 8001132:      	pop	{r7, pc}

08001134 <cortex_m::interrupt::disable::h98ee2fcb0e92ba42>:
; pub fn disable() {
 8001134:      	push	{r7, lr}
 8001136:      	mov	r7, sp
;     call_asm!(__cpsid());
 8001138:      	bl	#0xaf4
 800113c:      	b	#-0x2 <cortex_m::interrupt::disable::h98ee2fcb0e92ba42+0xa>
; }
 800113e:      	pop	{r7, pc}

08001140 <cortex_m::peripheral::Peripherals::take::ha1a5bdc6ec317e19>:
;     pub fn take() -> Option<Self> {
 8001140:      	push	{r7, lr}
 8001142:      	mov	r7, sp
 8001144:      	sub	sp, #0x8
;         interrupt::free(|_| {
 8001146:      	bl	#-0xc44
 800114a:      	str	r0, [sp]
 800114c:      	b	#-0x2 <cortex_m::peripheral::Peripherals::take::ha1a5bdc6ec317e19+0xe>
;     }
 800114e:      	ldr	r0, [sp]
 8001150:      	and	r0, r0, #0x1
 8001154:      	add	sp, #0x8
 8001156:      	pop	{r7, pc}

08001158 <cortex_m::peripheral::Peripherals::steal::h7d1371f432865b97>:
;     pub unsafe fn steal() -> Self {
 8001158:      	sub	sp, #0x4
;         TAKEN = true;
 800115a:      	movw	r0, #0x1
 800115e:      	movt	r0, #0x2000
 8001162:      	movs	r1, #0x1
 8001164:      	strb	r1, [r0]
;     }
 8001166:      	add	sp, #0x4
 8001168:      	bx	lr

0800116a <cortex_m::peripheral::Peripherals::take::{{closure}}::h7c186df93c603233>:
;         interrupt::free(|_| match cortex_m_0_7::peripheral::Peripherals::take() {
 800116a:      	push	{r7, lr}
 800116c:      	mov	r7, sp
 800116e:      	sub	sp, #0x10
 8001170:      	str	r0, [sp, #0xc]
 8001172:      	bl	#-0x36
 8001176:      	strb	r0, [r7, #-9]
 800117a:      	b	#-0x2 <cortex_m::peripheral::Peripherals::take::{{closure}}::h7c186df93c603233+0x12>
;             Some(_) => { Some(unsafe { Peripherals::steal() }) },
 800117c:      	ldrb	r0, [r7, #-9]
 8001180:      	lsls	r1, r0, #0x1f
 8001182:      	cmp	r1, #0x0
 8001184:      	beq	#0x2 <cortex_m::peripheral::Peripherals::take::{{closure}}::h7c186df93c603233+0x20>
 8001186:      	b	#-0x2 <cortex_m::peripheral::Peripherals::take::{{closure}}::h7c186df93c603233+0x1e>
 8001188:      	b	#0x8 <cortex_m::peripheral::Peripherals::take::{{closure}}::h7c186df93c603233+0x2a>
 800118a:      	movs	r0, #0x0
;             None    => None,
 800118c:      	strb	r0, [r7, #-10]
;         interrupt::free(|_| match cortex_m_0_7::peripheral::Peripherals::take() {
 8001190:      	b	#0xe <cortex_m::peripheral::Peripherals::take::{{closure}}::h7c186df93c603233+0x38>
 8001192:      	trap
;             Some(_) => { Some(unsafe { Peripherals::steal() }) },
 8001194:      	bl	#-0x82
 8001198:      	b	#-0x2 <cortex_m::peripheral::Peripherals::take::{{closure}}::h7c186df93c603233+0x30>
 800119a:      	movs	r0, #0x1
;             Some(_) => { Some(unsafe { Peripherals::steal() }) },
 800119c:      	strb	r0, [r7, #-10]
;         interrupt::free(|_| match cortex_m_0_7::peripheral::Peripherals::take() {
 80011a0:      	b	#-0x2 <cortex_m::peripheral::Peripherals::take::{{closure}}::h7c186df93c603233+0x38>
;         })
 80011a2:      	ldrb	r0, [r7, #-10]
 80011a6:      	add	sp, #0x10
 80011a8:      	pop	{r7, pc}

080011aa <core::option::Option<T>::unwrap::h3fead937d905cd21>:
;     pub const fn unwrap(self) -> T {
 80011aa:      	push	{r7, lr}
 80011ac:      	mov	r7, sp
 80011ae:      	sub	sp, #0x10
 80011b0:      	mov	r2, r0
 80011b2:      	strb	r0, [r7, #-5]
;             Some(val) => val,
 80011b6:      	ldrb	r0, [r7, #-5]
 80011ba:      	lsls	r3, r0, #0x1f
 80011bc:      	cmp	r3, #0x0
 80011be:      	str	r1, [sp, #0x4]
 80011c0:      	beq	#0x2 <core::option::Option<T>::unwrap::h3fead937d905cd21+0x1c>
 80011c2:      	b	#-0x2 <core::option::Option<T>::unwrap::h3fead937d905cd21+0x1a>
 80011c4:      	b	#0x12 <core::option::Option<T>::unwrap::h3fead937d905cd21+0x30>
;             None => panic!("called `Option::unwrap()` on a `None` value"),
 80011c6:      	movw	r0, #0x3793
 80011ca:      	movt	r0, #0x800
 80011ce:      	movs	r1, #0x2b
 80011d0:      	ldr	r2, [sp, #0x4]
 80011d2:      	bl	#0xb7a
 80011d6:      	trap
;         match self {
 80011d8:      	trap
;     }
 80011da:      	add	sp, #0x10
 80011dc:      	pop	{r7, pc}

080011de <core::option::Option<T>::unwrap::hb0f055583d2d511b>:
;     pub const fn unwrap(self) -> T {
 80011de:      	push	{r7, lr}
 80011e0:      	mov	r7, sp
 80011e2:      	sub	sp, #0x10
 80011e4:      	mov	r2, r0
 80011e6:      	strb	r0, [r7, #-5]
;             Some(val) => val,
 80011ea:      	ldrb	r0, [r7, #-5]
 80011ee:      	lsls	r3, r0, #0x1f
 80011f0:      	cmp	r3, #0x0
 80011f2:      	str	r1, [sp, #0x4]
 80011f4:      	beq	#0x2 <core::option::Option<T>::unwrap::hb0f055583d2d511b+0x1c>
 80011f6:      	b	#-0x2 <core::option::Option<T>::unwrap::hb0f055583d2d511b+0x1a>
 80011f8:      	b	#0x12 <core::option::Option<T>::unwrap::hb0f055583d2d511b+0x30>
;             None => panic!("called `Option::unwrap()` on a `None` value"),
 80011fa:      	movw	r0, #0x3793
 80011fe:      	movt	r0, #0x800
 8001202:      	movs	r1, #0x2b
 8001204:      	ldr	r2, [sp, #0x4]
 8001206:      	bl	#0xb46
 800120a:      	trap
;         match self {
 800120c:      	trap
;     }
 800120e:      	add	sp, #0x10
 8001210:      	pop	{r7, pc}

08001212 <stm32f3::stm32f303::Peripherals::take::{{closure}}::h06e96f406244128b>:
;         cortex_m::interrupt::free(|_| {
 8001212:      	push	{r7, lr}
 8001214:      	mov	r7, sp
 8001216:      	sub	sp, #0x10
 8001218:      	str	r0, [sp, #0xc]
;             if unsafe { DEVICE_PERIPHERALS } {
 800121a:      	movw	r0, #0x0
 800121e:      	movt	r0, #0x2000
 8001222:      	ldrb	r0, [r0]
 8001224:      	lsls	r0, r0, #0x1f
 8001226:      	cmp	r0, #0x0
 8001228:      	beq	#0x8 <stm32f3::stm32f303::Peripherals::take::{{closure}}::h06e96f406244128b+0x22>
 800122a:      	b	#-0x2 <stm32f3::stm32f303::Peripherals::take::{{closure}}::h06e96f406244128b+0x1a>
 800122c:      	movs	r0, #0x0
;                 None
 800122e:      	strb	r0, [r7, #-9]
;             if unsafe { DEVICE_PERIPHERALS } {
 8001232:      	b	#0xc <stm32f3::stm32f303::Peripherals::take::{{closure}}::h06e96f406244128b+0x30>
;                 Some(unsafe { Peripherals::steal() })
 8001234:      	bl	#-0xda2
 8001238:      	b	#-0x2 <stm32f3::stm32f303::Peripherals::take::{{closure}}::h06e96f406244128b+0x28>
 800123a:      	movs	r0, #0x1
;                 Some(unsafe { Peripherals::steal() })
 800123c:      	strb	r0, [r7, #-9]
;             if unsafe { DEVICE_PERIPHERALS } {
 8001240:      	b	#-0x2 <stm32f3::stm32f303::Peripherals::take::{{closure}}::h06e96f406244128b+0x30>
;         })
 8001242:      	ldrb	r0, [r7, #-9]
 8001246:      	add	sp, #0x10
 8001248:      	pop	{r7, pc}

0800124a <<T as core::convert::Into<U>>::into::h0d7552b6cbfc95dc>:
;     fn into(self) -> U {
 800124a:      	sub	sp, #0x8
 800124c:      	mov	r1, r0
 800124e:      	strb.w	r0, [sp, #0x6]
 8001252:      	strb.w	r0, [sp, #0x7]
;         U::from(self)
 8001256:      	str	r1, [sp]
 8001258:      	b	#-0x2 <<T as core::convert::Into<U>>::into::h0d7552b6cbfc95dc+0x10>
;     }
 800125a:      	ldr	r0, [sp]
 800125c:      	and	r0, r0, #0x1
 8001260:      	add	sp, #0x8
 8001262:      	bx	lr

08001264 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17ha707dfb50a0eb9e4E>:
;     pub fn ok(self) -> Option<T> {
 8001264:      	sub	sp, #0x8
 8001266:      	movs	r0, #0x1
;             Ok(x) => Some(x),
 8001268:      	cmp	r0, #0x0
 800126a:      	bne	#0xa <_ZN4core6result19Result$LT$T$C$E$GT$2ok17ha707dfb50a0eb9e4E+0x14>
 800126c:      	b	#-0x2 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17ha707dfb50a0eb9e4E+0xa>
 800126e:      	movs	r0, #0x0
;             Err(_) => None,
 8001270:      	strb.w	r0, [sp, #0x3]
;         match self {
 8001274:      	b	#0x12 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17ha707dfb50a0eb9e4E+0x26>
 8001276:      	trap
 8001278:      	movs	r0, #0x1
;             Ok(x) => Some(x),
 800127a:      	strb.w	r0, [sp, #0x3]
;     }
 800127e:      	b	#0x8 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17ha707dfb50a0eb9e4E+0x26>
 8001280:      	ldrb.w	r0, [sp, #0x3]
 8001284:      	add	sp, #0x8
 8001286:      	bx	lr
 8001288:      	b	#-0xc <_ZN4core6result19Result$LT$T$C$E$GT$2ok17ha707dfb50a0eb9e4E+0x1c>
 800128a:      	movs	r0, #0x1
;     }
 800128c:      	cmp	r0, #0x0
 800128e:      	bne	#-0x12 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17ha707dfb50a0eb9e4E+0x1c>
 8001290:      	b	#-0xc <_ZN4core6result19Result$LT$T$C$E$GT$2ok17ha707dfb50a0eb9e4E+0x24>

08001292 <<cortex_m::register::primask::Primask as core::cmp::PartialEq>::eq::hf134905975b3ea2e>:
; #[derive(Clone, Copy, Debug, Eq, PartialEq)]
 8001292:      	sub	sp, #0x14
 8001294:      	str	r0, [sp, #0x4]
 8001296:      	str	r1, [sp, #0x8]
 8001298:      	ldrb	r0, [r0]
 800129a:      	str	r0, [sp, #0xc]
 800129c:      	ldrb	r1, [r1]
 800129e:      	str	r1, [sp, #0x10]
 80012a0:      	cmp	r0, r1
 80012a2:      	bne	#0x8 <<cortex_m::register::primask::Primask as core::cmp::PartialEq>::eq::hf134905975b3ea2e+0x1c>
 80012a4:      	b	#-0x2 <<cortex_m::register::primask::Primask as core::cmp::PartialEq>::eq::hf134905975b3ea2e+0x14>
 80012a6:      	movs	r0, #0x1
; #[derive(Clone, Copy, Debug, Eq, PartialEq)]
 80012a8:      	strb.w	r0, [sp, #0x3]
 80012ac:      	b	#0x6 <<cortex_m::register::primask::Primask as core::cmp::PartialEq>::eq::hf134905975b3ea2e+0x24>
 80012ae:      	movs	r0, #0x0
; #[derive(Clone, Copy, Debug, Eq, PartialEq)]
 80012b0:      	strb.w	r0, [sp, #0x3]
 80012b4:      	b	#-0x2 <<cortex_m::register::primask::Primask as core::cmp::PartialEq>::eq::hf134905975b3ea2e+0x24>
 80012b6:      	ldrb.w	r0, [sp, #0x3]
 80012ba:      	lsls	r0, r0, #0x1f
 80012bc:      	cmp	r0, #0x0
 80012be:      	beq	#0x8 <<cortex_m::register::primask::Primask as core::cmp::PartialEq>::eq::hf134905975b3ea2e+0x38>
 80012c0:      	b	#-0x2 <<cortex_m::register::primask::Primask as core::cmp::PartialEq>::eq::hf134905975b3ea2e+0x30>
 80012c2:      	movs	r0, #0x1
; #[derive(Clone, Copy, Debug, Eq, PartialEq)]
 80012c4:      	strb.w	r0, [sp, #0x2]
 80012c8:      	b	#0x6 <<cortex_m::register::primask::Primask as core::cmp::PartialEq>::eq::hf134905975b3ea2e+0x40>
 80012ca:      	movs	r0, #0x0
; #[derive(Clone, Copy, Debug, Eq, PartialEq)]
 80012cc:      	strb.w	r0, [sp, #0x2]
 80012d0:      	b	#-0x2 <<cortex_m::register::primask::Primask as core::cmp::PartialEq>::eq::hf134905975b3ea2e+0x40>
 80012d2:      	ldrb.w	r0, [sp, #0x2]
 80012d6:      	add	sp, #0x14
 80012d8:      	bx	lr

080012da <cortex_m::register::primask::read::hec0118cd3532442b>:
; pub fn read() -> Primask {
 80012da:      	push	{r7, lr}
 80012dc:      	mov	r7, sp
 80012de:      	sub	sp, #0x10
;     let r: u32 = call_asm!(__primask_r() -> u32);
 80012e0:      	bl	#0x954
 80012e4:      	mov	r1, r0
 80012e6:      	str	r0, [sp, #0xc]
 80012e8:      	str	r1, [sp, #0x4]
 80012ea:      	b	#-0x2 <cortex_m::register::primask::read::hec0118cd3532442b+0x12>
;     if r & (1 << 0) == (1 << 0) {
 80012ec:      	ldr	r0, [sp, #0x4]
 80012ee:      	lsls	r1, r0, #0x1f
 80012f0:      	cmp	r1, #0x0
 80012f2:      	beq	#0x8 <cortex_m::register::primask::read::hec0118cd3532442b+0x24>
 80012f4:      	b	#-0x2 <cortex_m::register::primask::read::hec0118cd3532442b+0x1c>
 80012f6:      	movs	r0, #0x1
;         Primask::Inactive
 80012f8:      	strb	r0, [r7, #-5]
;     if r & (1 << 0) == (1 << 0) {
 80012fc:      	b	#0x6 <cortex_m::register::primask::read::hec0118cd3532442b+0x2c>
 80012fe:      	movs	r0, #0x0
;         Primask::Active
 8001300:      	strb	r0, [r7, #-5]
;     if r & (1 << 0) == (1 << 0) {
 8001304:      	b	#-0x2 <cortex_m::register::primask::read::hec0118cd3532442b+0x2c>
; }
 8001306:      	ldrb	r0, [r7, #-5]
 800130a:      	add	sp, #0x10
 800130c:      	pop	{r7, pc}

0800130e <cortex_m::register::primask::Primask::is_active::h7321713f50991de4>:
;     pub fn is_active(self) -> bool {
 800130e:      	push	{r7, lr}
 8001310:      	mov	r7, sp
 8001312:      	sub	sp, #0x10
 8001314:      	mov	r1, r0
 8001316:      	strb	r0, [r7, #-1]
;         self == Primask::Active
 800131a:      	movw	r0, #0x37be
 800131e:      	movt	r0, #0x800
 8001322:      	subs	r2, r7, #0x1
 8001324:      	str	r0, [sp, #0x8]
 8001326:      	mov	r0, r2
 8001328:      	ldr	r2, [sp, #0x8]
 800132a:      	str	r1, [sp, #0x4]
 800132c:      	mov	r1, r2
 800132e:      	bl	#-0xa0
 8001332:      	str	r0, [sp]
 8001334:      	b	#-0x2 <cortex_m::register::primask::Primask::is_active::h7321713f50991de4+0x28>
;     }
 8001336:      	ldr	r0, [sp]
 8001338:      	and	r0, r0, #0x1
 800133c:      	add	sp, #0x10
 800133e:      	pop	{r7, pc}

08001340 <<T as core::convert::Into<U>>::into::habee3580467fbca7>:
;     fn into(self) -> U {
 8001340:      	sub	sp, #0x8
 8001342:      	mov	r1, r0
 8001344:      	strb.w	r0, [sp, #0x6]
 8001348:      	strb.w	r0, [sp, #0x7]
;         U::from(self)
 800134c:      	str	r1, [sp]
 800134e:      	b	#-0x2 <<T as core::convert::Into<U>>::into::habee3580467fbca7+0x10>
;     }
 8001350:      	ldr	r0, [sp]
 8001352:      	add	sp, #0x8
 8001354:      	bx	lr

08001356 <<stm32f3::stm32f303::RCC as stm32f3xx_hal::rcc::RccExt>::constrain::hfb7e009cd9ffeb29>:
;     fn constrain(self) -> Rcc {
 8001356:      	push	{r4, r5, r7, lr}
 8001358:      	add	r7, sp, #0x8
 800135a:      	sub	sp, #0x38
 800135c:      	add	r1, sp, #0x8
;             cfgr: CFGR::default(),
 800135e:      	str	r0, [sp, #0x4]
 8001360:      	mov	r0, r1
 8001362:      	bl	#0x11c
 8001366:      	b	#-0x2 <<stm32f3::stm32f303::RCC as stm32f3xx_hal::rcc::RccExt>::constrain::hfb7e009cd9ffeb29+0x12>
 8001368:      	add	r0, sp, #0x8
;         Rcc {
 800136a:      	ldr	r1, [sp, #0x4]
 800136c:      	ldm.w	r0!, {r2, r3, r4, r12, lr}
 8001370:      	stm.w	r1!, {r2, r3, r4, r12, lr}
 8001374:      	ldm.w	r0, {r2, r3, r4, r5, r12, lr}
 8001378:      	stm.w	r1, {r2, r3, r4, r5, r12, lr}
;     }
 800137c:      	add	sp, #0x38
 800137e:      	pop	{r4, r5, r7, pc}

08001380 <_ZN13stm32f3xx_hal4gpio5gpioe84_$LT$impl$u20$stm32f3xx_hal..gpio..GpioExt$u20$for$u20$stm32f3..stm32f303..GPIOE$GT$5split17h01efd540550159d6E>:
;                         fn split(self, ahb: &mut AHB) -> Parts {
 8001380:      	push	{r7, lr}
 8001382:      	mov	r7, sp
 8001384:      	sub	sp, #0xa0
 8001386:      	str	r0, [sp, #0x30]
;                             ahb.enr().modify(|_, w| w.$iopxenr().set_bit());
 8001388:      	str	r0, [sp, #0x18]
 800138a:      	bl	#0xd0
 800138e:      	str	r0, [sp, #0x14]
 8001390:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe84_$LT$impl$u20$stm32f3xx_hal..gpio..GpioExt$u20$for$u20$stm32f3..stm32f303..GPIOE$GT$5split17h01efd540550159d6E+0x12>
 8001392:      	ldr	r0, [sp, #0x14]
 8001394:      	str	r0, [sp, #0x44]
 8001396:      	str	r0, [sp, #0x4c]
;         unsafe { ptr::read_volatile(self.value.get()) }
 8001398:      	bl	#0x882
 800139c:      	bl	#0x458
;         let bits = self.register.get();
 80013a0:      	str	r0, [sp, #0x48]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 80013a2:      	str	r0, [sp, #0x3c]
 80013a4:      	str	r0, [sp, #0x40]
 80013a6:      	add	r0, sp, #0x3c
 80013a8:      	str	r0, [sp, #0x34]
 80013aa:      	add	r0, sp, #0x40
 80013ac:      	str	r0, [sp, #0x38]
 80013ae:      	ldr	r0, [sp, #0x34]
 80013b0:      	ldr	r1, [sp, #0x38]
 80013b2:      	bl	#0x188
 80013b6:      	ldr	r0, [r0]
 80013b8:      	ldr	r1, [sp, #0x14]
 80013ba:      	str	r1, [sp, #0x50]
 80013bc:      	str	r0, [sp, #0x54]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 80013be:      	str	r0, [sp, #0x10]
 80013c0:      	mov	r0, r1
 80013c2:      	bl	#0x858
 80013c6:      	ldr	r1, [sp, #0x10]
 80013c8:      	bl	#0x452
;                             ahb.enr().modify(|_, w| w.$iopxenr().set_bit());
 80013cc:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe84_$LT$impl$u20$stm32f3xx_hal..gpio..GpioExt$u20$for$u20$stm32f3..stm32f303..GPIOE$GT$5split17h01efd540550159d6E+0x4e>
;                             ahb.rstr().modify(|_, w| w.$iopxrst().set_bit());
 80013ce:      	ldr	r0, [sp, #0x18]
 80013d0:      	bl	#0x9c
 80013d4:      	str	r0, [sp, #0xc]
 80013d6:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe84_$LT$impl$u20$stm32f3xx_hal..gpio..GpioExt$u20$for$u20$stm32f3..stm32f303..GPIOE$GT$5split17h01efd540550159d6E+0x58>
 80013d8:      	ldr	r0, [sp, #0xc]
 80013da:      	str	r0, [sp, #0x68]
 80013dc:      	str	r0, [sp, #0x70]
;         unsafe { ptr::read_volatile(self.value.get()) }
 80013de:      	bl	#0x83c
 80013e2:      	bl	#0x412
;         let bits = self.register.get();
 80013e6:      	str	r0, [sp, #0x6c]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 80013e8:      	str	r0, [sp, #0x60]
 80013ea:      	str	r0, [sp, #0x64]
 80013ec:      	add	r0, sp, #0x60
 80013ee:      	str	r0, [sp, #0x58]
 80013f0:      	add	r0, sp, #0x64
 80013f2:      	str	r0, [sp, #0x5c]
 80013f4:      	ldr	r0, [sp, #0x58]
 80013f6:      	ldr	r1, [sp, #0x5c]
 80013f8:      	bl	#0x16e
 80013fc:      	ldr	r0, [r0]
 80013fe:      	ldr	r1, [sp, #0xc]
 8001400:      	str	r1, [sp, #0x74]
 8001402:      	str	r0, [sp, #0x78]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 8001404:      	str	r0, [sp, #0x8]
 8001406:      	mov	r0, r1
 8001408:      	bl	#0x812
 800140c:      	ldr	r1, [sp, #0x8]
 800140e:      	bl	#0x40c
;                             ahb.rstr().modify(|_, w| w.$iopxrst().set_bit());
 8001412:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe84_$LT$impl$u20$stm32f3xx_hal..gpio..GpioExt$u20$for$u20$stm32f3..stm32f303..GPIOE$GT$5split17h01efd540550159d6E+0x94>
;                             ahb.rstr().modify(|_, w| w.$iopxrst().clear_bit());
 8001414:      	ldr	r0, [sp, #0x18]
 8001416:      	bl	#0x56
 800141a:      	str	r0, [sp, #0x4]
 800141c:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe84_$LT$impl$u20$stm32f3xx_hal..gpio..GpioExt$u20$for$u20$stm32f3..stm32f303..GPIOE$GT$5split17h01efd540550159d6E+0x9e>
 800141e:      	ldr	r0, [sp, #0x4]
 8001420:      	str	r0, [sp, #0x8c]
 8001422:      	str	r0, [sp, #0x94]
;         unsafe { ptr::read_volatile(self.value.get()) }
 8001424:      	bl	#0x7f6
 8001428:      	bl	#0x3cc
;         let bits = self.register.get();
 800142c:      	str	r0, [sp, #0x90]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 800142e:      	str	r0, [sp, #0x84]
 8001430:      	str	r0, [sp, #0x88]
 8001432:      	add	r0, sp, #0x84
 8001434:      	str	r0, [sp, #0x7c]
 8001436:      	add	r0, sp, #0x88
 8001438:      	str	r0, [sp, #0x80]
 800143a:      	ldr	r0, [sp, #0x7c]
 800143c:      	ldr	r1, [sp, #0x80]
 800143e:      	bl	#0x154
 8001442:      	ldr	r0, [r0]
 8001444:      	ldr	r1, [sp, #0x4]
 8001446:      	str	r1, [sp, #0x98]
 8001448:      	str	r0, [sp, #0x9c]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 800144a:      	str	r0, [sp]
 800144c:      	mov	r0, r1
 800144e:      	bl	#0x7cc
 8001452:      	ldr	r1, [sp]
 8001454:      	bl	#0x3c6
;                             ahb.rstr().modify(|_, w| w.$iopxrst().clear_bit());
 8001458:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe84_$LT$impl$u20$stm32f3xx_hal..gpio..GpioExt$u20$for$u20$stm32f3..stm32f303..GPIOE$GT$5split17h01efd540550159d6E+0xda>
;                         }
 800145a:      	add	sp, #0xa0
 800145c:      	pop	{r7, pc}

0800145e <stm32f3xx_hal::rcc::AHB::enr::h705da750a914ef1b>:
;     pub(crate) fn enr(&mut self) -> &rcc::AHBENR {
 800145e:      	sub	sp, #0x4
 8001460:      	str	r0, [sp]
;         unsafe { &(*RCC::ptr()).ahbenr }
 8001462:      	b	#-0x2 <stm32f3xx_hal::rcc::AHB::enr::h705da750a914ef1b+0x6>
 8001464:      	movw	r0, #0x1014
 8001468:      	movt	r0, #0x4002
;     }
 800146c:      	add	sp, #0x4
 800146e:      	bx	lr

08001470 <stm32f3xx_hal::rcc::AHB::rstr::hbaab756b4aca362e>:
;     pub(crate) fn rstr(&mut self) -> &rcc::AHBRSTR {
 8001470:      	sub	sp, #0x4
 8001472:      	str	r0, [sp]
;         unsafe { &(*RCC::ptr()).ahbrstr }
 8001474:      	b	#-0x2 <stm32f3xx_hal::rcc::AHB::rstr::hbaab756b4aca362e+0x6>
 8001476:      	movw	r0, #0x1028
 800147a:      	movt	r0, #0x4002
;     }
 800147e:      	add	sp, #0x4
 8001480:      	bx	lr

08001482 <<stm32f3xx_hal::rcc::CFGR as core::default::Default>::default::hbfa560485dcc4ff8>:
; #[derive(Default)]
 8001482:      	push	{r4, r5, r6, r7, lr}
 8001484:      	add	r7, sp, #0xc
 8001486:      	push.w	{r8, r9, r10, r11}
 800148a:      	sub	sp, #0x34
;     hse: Option<u32>,
 800148c:      	str	r0, [sp, #0x30]
 800148e:      	bl	#0x9e
 8001492:      	str	r0, [sp, #0x2c]
 8001494:      	str	r1, [sp, #0x28]
 8001496:      	b	#-0x2 <<stm32f3xx_hal::rcc::CFGR as core::default::Default>::default::hbfa560485dcc4ff8+0x16>
;     hse_bypass: bool,
 8001498:      	bl	#0x90
 800149c:      	str	r0, [sp, #0x24]
 800149e:      	b	#-0x2 <<stm32f3xx_hal::rcc::CFGR as core::default::Default>::default::hbfa560485dcc4ff8+0x1e>
;     css: bool,
 80014a0:      	bl	#0x88
 80014a4:      	str	r0, [sp, #0x20]
 80014a6:      	b	#-0x2 <<stm32f3xx_hal::rcc::CFGR as core::default::Default>::default::hbfa560485dcc4ff8+0x26>
;     hclk: Option<u32>,
 80014a8:      	bl	#0x84
 80014ac:      	str	r0, [sp, #0x1c]
 80014ae:      	str	r1, [sp, #0x18]
 80014b0:      	b	#-0x2 <<stm32f3xx_hal::rcc::CFGR as core::default::Default>::default::hbfa560485dcc4ff8+0x30>
;     pclk1: Option<u32>,
 80014b2:      	bl	#0x7a
 80014b6:      	str	r0, [sp, #0x14]
 80014b8:      	str	r1, [sp, #0x10]
 80014ba:      	b	#-0x2 <<stm32f3xx_hal::rcc::CFGR as core::default::Default>::default::hbfa560485dcc4ff8+0x3a>
;     pclk2: Option<u32>,
 80014bc:      	bl	#0x70
 80014c0:      	str	r0, [sp, #0xc]
 80014c2:      	str	r1, [sp, #0x8]
 80014c4:      	b	#-0x2 <<stm32f3xx_hal::rcc::CFGR as core::default::Default>::default::hbfa560485dcc4ff8+0x44>
;     sysclk: Option<u32>,
 80014c6:      	bl	#0x66
 80014ca:      	str	r0, [sp, #0x4]
 80014cc:      	str	r1, [sp]
 80014ce:      	b	#-0x2 <<stm32f3xx_hal::rcc::CFGR as core::default::Default>::default::hbfa560485dcc4ff8+0x4e>
; #[derive(Default)]
 80014d0:      	ldr	r0, [sp, #0x2c]
 80014d2:      	ldr	r1, [sp, #0x30]
 80014d4:      	str	r0, [r1]
 80014d6:      	ldr	r2, [sp, #0x28]
 80014d8:      	str	r2, [r1, #0x4]
 80014da:      	ldr	r3, [sp, #0x24]
 80014dc:      	and	r12, r3, #0x1
 80014e0:      	strb.w	r12, [r1, #0x28]
 80014e4:      	ldr.w	r12, [sp, #0x20]
 80014e8:      	and	lr, r12, #0x1
 80014ec:      	strb.w	lr, [r1, #0x29]
 80014f0:      	ldr.w	lr, [sp, #0x1c]
 80014f4:      	str.w	lr, [r1, #0x8]
 80014f8:      	ldr	r4, [sp, #0x18]
 80014fa:      	str	r4, [r1, #0xc]
 80014fc:      	ldr	r5, [sp, #0x14]
 80014fe:      	str	r5, [r1, #0x10]
 8001500:      	ldr	r6, [sp, #0x10]
 8001502:      	str	r6, [r1, #0x14]
 8001504:      	ldr.w	r8, [sp, #0xc]
 8001508:      	str.w	r8, [r1, #0x18]
 800150c:      	ldr.w	r9, [sp, #0x8]
 8001510:      	str.w	r9, [r1, #0x1c]
 8001514:      	ldr.w	r10, [sp, #0x4]
 8001518:      	str.w	r10, [r1, #0x20]
 800151c:      	ldr.w	r11, [sp]
 8001520:      	str.w	r11, [r1, #0x24]
 8001524:      	add	sp, #0x34
 8001526:      	pop.w	{r8, r9, r10, r11}
 800152a:      	pop	{r4, r5, r6, r7, pc}

0800152c <<bool as core::default::Default>::default::hfd27d2b692d7cd56>:
;             fn default() -> $t {
 800152c:      	movs	r0, #0x0
;             }
 800152e:      	bx	lr

08001530 <<core::option::Option<T> as core::default::Default>::default::hb1e2b7fb04511cdf>:
;     fn default() -> Option<T> {
 8001530:      	sub	sp, #0x8
 8001532:      	movs	r0, #0x0
;         None
 8001534:      	str	r0, [sp]
;     }
 8001536:      	ldr	r0, [sp]
 8001538:      	ldr	r1, [sp, #0x4]
 800153a:      	add	sp, #0x8
 800153c:      	bx	lr

0800153e <_ZN13stm32f3xx_hal4gpio5gpioe84_$LT$impl$u20$stm32f3xx_hal..gpio..GpioExt$u20$for$u20$stm32f3..stm32f303..GPIOE$GT$5split28_$u7b$$u7b$closure$u7d$$u7d$17h27bf0c06f6a10437E>:
;                             ahb.enr().modify(|_, w| w.$iopxenr().set_bit());
 800153e:      	sub	sp, #0x24
 8001540:      	str	r0, [sp, #0x8]
 8001542:      	str	r1, [sp, #0xc]
 8001544:      	str	r1, [sp, #0x14]
;         IOPEEN_W { w: self }
 8001546:      	str	r1, [sp, #0x10]
;     }
 8001548:      	ldr	r0, [sp, #0x10]
;                             ahb.enr().modify(|_, w| w.$iopxenr().set_bit());
 800154a:      	str	r0, [sp]
 800154c:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe84_$LT$impl$u20$stm32f3xx_hal..gpio..GpioExt$u20$for$u20$stm32f3..stm32f303..GPIOE$GT$5split28_$u7b$$u7b$closure$u7d$$u7d$17h27bf0c06f6a10437E+0x10>
 800154e:      	ldr	r0, [sp]
 8001550:      	str	r0, [sp, #0x18]
 8001552:      	str	r0, [sp, #0x1c]
 8001554:      	movs	r1, #0x1
 8001556:      	strb.w	r1, [sp, #0x23]
;         self.w.bits = (self.w.bits & !(0x01 << 21)) | (((value as u32) & 0x01) << 21);
 800155a:      	ldr	r1, [r0]
 800155c:      	orr	r1, r1, #0x200000
 8001560:      	str	r1, [r0]
;                             ahb.enr().modify(|_, w| w.$iopxenr().set_bit());
 8001562:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe84_$LT$impl$u20$stm32f3xx_hal..gpio..GpioExt$u20$for$u20$stm32f3..stm32f303..GPIOE$GT$5split28_$u7b$$u7b$closure$u7d$$u7d$17h27bf0c06f6a10437E+0x26>
 8001564:      	ldr	r0, [sp]
 8001566:      	add	sp, #0x24
 8001568:      	bx	lr

0800156a <_ZN13stm32f3xx_hal4gpio5gpioe84_$LT$impl$u20$stm32f3xx_hal..gpio..GpioExt$u20$for$u20$stm32f3..stm32f303..GPIOE$GT$5split28_$u7b$$u7b$closure$u7d$$u7d$17h32a633f50c1ad3cdE>:
;                             ahb.rstr().modify(|_, w| w.$iopxrst().set_bit());
 800156a:      	sub	sp, #0x24
 800156c:      	str	r0, [sp, #0x8]
 800156e:      	str	r1, [sp, #0xc]
 8001570:      	str	r1, [sp, #0x14]
;         IOPERST_W { w: self }
 8001572:      	str	r1, [sp, #0x10]
;     }
 8001574:      	ldr	r0, [sp, #0x10]
;                             ahb.rstr().modify(|_, w| w.$iopxrst().set_bit());
 8001576:      	str	r0, [sp]
 8001578:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe84_$LT$impl$u20$stm32f3xx_hal..gpio..GpioExt$u20$for$u20$stm32f3..stm32f303..GPIOE$GT$5split28_$u7b$$u7b$closure$u7d$$u7d$17h32a633f50c1ad3cdE+0x10>
 800157a:      	ldr	r0, [sp]
 800157c:      	str	r0, [sp, #0x18]
 800157e:      	str	r0, [sp, #0x1c]
 8001580:      	movs	r1, #0x1
 8001582:      	strb.w	r1, [sp, #0x23]
;         self.w.bits = (self.w.bits & !(0x01 << 21)) | (((value as u32) & 0x01) << 21);
 8001586:      	ldr	r1, [r0]
 8001588:      	orr	r1, r1, #0x200000
 800158c:      	str	r1, [r0]
;                             ahb.rstr().modify(|_, w| w.$iopxrst().set_bit());
 800158e:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe84_$LT$impl$u20$stm32f3xx_hal..gpio..GpioExt$u20$for$u20$stm32f3..stm32f303..GPIOE$GT$5split28_$u7b$$u7b$closure$u7d$$u7d$17h32a633f50c1ad3cdE+0x26>
 8001590:      	ldr	r0, [sp]
 8001592:      	add	sp, #0x24
 8001594:      	bx	lr

08001596 <_ZN13stm32f3xx_hal4gpio5gpioe84_$LT$impl$u20$stm32f3xx_hal..gpio..GpioExt$u20$for$u20$stm32f3..stm32f303..GPIOE$GT$5split28_$u7b$$u7b$closure$u7d$$u7d$17he83af91c65b86566E>:
;                             ahb.rstr().modify(|_, w| w.$iopxrst().clear_bit());
 8001596:      	sub	sp, #0x24
 8001598:      	str	r0, [sp, #0x8]
 800159a:      	str	r1, [sp, #0xc]
 800159c:      	str	r1, [sp, #0x14]
;         IOPERST_W { w: self }
 800159e:      	str	r1, [sp, #0x10]
;     }
 80015a0:      	ldr	r0, [sp, #0x10]
;                             ahb.rstr().modify(|_, w| w.$iopxrst().clear_bit());
 80015a2:      	str	r0, [sp]
 80015a4:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe84_$LT$impl$u20$stm32f3xx_hal..gpio..GpioExt$u20$for$u20$stm32f3..stm32f303..GPIOE$GT$5split28_$u7b$$u7b$closure$u7d$$u7d$17he83af91c65b86566E+0x10>
 80015a6:      	ldr	r0, [sp]
 80015a8:      	str	r0, [sp, #0x18]
 80015aa:      	str	r0, [sp, #0x1c]
 80015ac:      	movs	r1, #0x0
 80015ae:      	strb.w	r1, [sp, #0x23]
;         self.w.bits = (self.w.bits & !(0x01 << 21)) | (((value as u32) & 0x01) << 21);
 80015b2:      	ldr	r1, [r0]
 80015b4:      	bic	r1, r1, #0x200000
 80015b8:      	str	r1, [r0]
;                             ahb.rstr().modify(|_, w| w.$iopxrst().clear_bit());
 80015ba:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe84_$LT$impl$u20$stm32f3xx_hal..gpio..GpioExt$u20$for$u20$stm32f3..stm32f303..GPIOE$GT$5split28_$u7b$$u7b$closure$u7d$$u7d$17he83af91c65b86566E+0x26>
 80015bc:      	ldr	r0, [sp]
 80015be:      	add	sp, #0x24
 80015c0:      	bx	lr

080015c2 <stm32f3xx_hal::gpio::gpioe::MODER::moder::hcb609b1f164c6aaa>:
;                         pub(crate) fn moder(&mut self) -> &$gpioy::MODER {
 80015c2:      	sub	sp, #0x4
 80015c4:      	str	r0, [sp]
; gpio!([
 80015c6:      	b	#-0x2 <stm32f3xx_hal::gpio::gpioe::MODER::moder::hcb609b1f164c6aaa+0x6>
 80015c8:      	movw	r0, #0x1000
 80015cc:      	movt	r0, #0x4800
;                         }
 80015d0:      	add	sp, #0x4
 80015d2:      	bx	lr

080015d4 <stm32f3xx_hal::gpio::gpioe::OTYPER::otyper::h69ba8b6db82eab52>:
;                         pub(crate) fn otyper(&mut self) -> &$gpioy::OTYPER {
 80015d4:      	sub	sp, #0x4
 80015d6:      	str	r0, [sp]
; gpio!([
 80015d8:      	b	#-0x2 <stm32f3xx_hal::gpio::gpioe::OTYPER::otyper::h69ba8b6db82eab52+0x6>
 80015da:      	movw	r0, #0x1004
 80015de:      	movt	r0, #0x4800
;                         }
 80015e2:      	add	sp, #0x4
 80015e4:      	bx	lr

080015e6 <ResetTrampoline>:
;             fn trampoline() -> ! {
 80015e6:      	push	{r7, lr}
 80015e8:      	mov	r7, sp
;                 unsafe { main() }
 80015ea:      	bl	#-0x1402
 80015ee:      	trap

080015f0 <WWDG>:
; pub unsafe extern "C" fn DefaultHandler_() -> ! {
 80015f0:      	push	{r7, lr}
 80015f2:      	mov	r7, sp
 80015f4:      	sub	sp, #0x8
;     loop {
 80015f6:      	b	#-0x2 <WWDG+0x8>
 80015f8:      	movs	r0, #0x4
;         atomic::compiler_fence(Ordering::SeqCst);
 80015fa:      	strb	r0, [r7, #-1]
 80015fe:      	ldrb	r0, [r7, #-1]
 8001602:      	bl	#0x196
 8001606:      	b	#-0x2 <WWDG+0x18>
;     loop {
 8001608:      	b	#-0x14 <WWDG+0x8>

0800160a <__pre_init>:
; pub unsafe extern "C" fn DefaultPreInit() {}
 800160a:      	bx	lr

0800160c <r0::zero_bss::h0e02b5b41b768509>:
; pub unsafe fn zero_bss<T>(mut sbss: *mut T, ebss: *mut T)
 800160c:      	push	{r7, lr}
 800160e:      	mov	r7, sp
 8001610:      	sub	sp, #0x20
 8001612:      	str	r0, [sp, #0x10]
 8001614:      	str	r1, [sp, #0x14]
 8001616:      	str	r1, [sp, #0xc]
 8001618:      	b	#-0x2 <r0::zero_bss::h0e02b5b41b768509+0xe>
;     while sbss < ebss {
 800161a:      	ldr	r0, [sp, #0x10]
 800161c:      	ldr	r1, [sp, #0xc]
 800161e:      	cmp	r0, r1
 8001620:      	blo	#0x4 <r0::zero_bss::h0e02b5b41b768509+0x1c>
 8001622:      	b	#-0x2 <r0::zero_bss::h0e02b5b41b768509+0x18>
; }
 8001624:      	add	sp, #0x20
 8001626:      	pop	{r7, pc}
;         ptr::write_volatile(sbss, mem::zeroed());
 8001628:      	ldr	r0, [sp, #0x10]
;         MaybeUninit::zeroed().assume_init()
 800162a:      	str	r0, [sp, #0x8]
 800162c:      	bl	#0x80
 8001630:      	mov	r1, r0
 8001632:      	str	r0, [sp, #0x18]
 8001634:      	str	r0, [sp, #0x1c]
;         ptr::write_volatile(sbss, mem::zeroed());
 8001636:      	str	r1, [sp, #0x4]
 8001638:      	b	#-0x2 <r0::zero_bss::h0e02b5b41b768509+0x2e>
 800163a:      	ldr	r0, [sp, #0x8]
 800163c:      	ldr	r1, [sp, #0x4]
 800163e:      	bl	#0x10a
 8001642:      	b	#-0x2 <r0::zero_bss::h0e02b5b41b768509+0x38>
;         sbss = sbss.offset(1);
 8001644:      	ldr	r0, [sp, #0x10]
 8001646:      	movs	r1, #0x1
 8001648:      	bl	#0xa4
 800164c:      	str	r0, [sp]
 800164e:      	b	#-0x2 <r0::zero_bss::h0e02b5b41b768509+0x44>
 8001650:      	ldr	r0, [sp]
 8001652:      	str	r0, [sp, #0x10]
;     while sbss < ebss {
 8001654:      	b	#-0x3e <r0::zero_bss::h0e02b5b41b768509+0xe>

08001656 <r0::init_data::h31e95992687b83dc>:
; pub unsafe fn init_data<T>(
 8001656:      	push	{r7, lr}
 8001658:      	mov	r7, sp
 800165a:      	sub	sp, #0x20
 800165c:      	str	r0, [sp, #0x14]
 800165e:      	str	r2, [sp, #0x18]
 8001660:      	str	r1, [sp, #0x1c]
 8001662:      	str	r1, [sp, #0x10]
 8001664:      	b	#-0x2 <r0::init_data::h31e95992687b83dc+0x10>
;     while sdata < edata {
 8001666:      	ldr	r0, [sp, #0x14]
 8001668:      	ldr	r1, [sp, #0x10]
 800166a:      	cmp	r0, r1
 800166c:      	blo	#0x4 <r0::init_data::h31e95992687b83dc+0x1e>
 800166e:      	b	#-0x2 <r0::init_data::h31e95992687b83dc+0x1a>
; }
 8001670:      	add	sp, #0x20
 8001672:      	pop	{r7, pc}
;         ptr::write(sdata, ptr::read(sidata));
 8001674:      	ldr	r0, [sp, #0x14]
 8001676:      	ldr	r1, [sp, #0x18]
 8001678:      	str	r0, [sp, #0xc]
 800167a:      	mov	r0, r1
 800167c:      	bl	#0xda
 8001680:      	str	r0, [sp, #0x8]
 8001682:      	b	#-0x2 <r0::init_data::h31e95992687b83dc+0x2e>
 8001684:      	ldr	r0, [sp, #0xc]
 8001686:      	ldr	r1, [sp, #0x8]
 8001688:      	bl	#0x100
 800168c:      	b	#-0x2 <r0::init_data::h31e95992687b83dc+0x38>
;         sdata = sdata.offset(1);
 800168e:      	ldr	r0, [sp, #0x14]
 8001690:      	movs	r1, #0x1
 8001692:      	bl	#0x5a
 8001696:      	str	r0, [sp, #0x4]
 8001698:      	b	#-0x2 <r0::init_data::h31e95992687b83dc+0x44>
 800169a:      	ldr	r0, [sp, #0x4]
 800169c:      	str	r0, [sp, #0x14]
;         sidata = sidata.offset(1);
 800169e:      	ldr	r0, [sp, #0x18]
 80016a0:      	movs	r1, #0x1
 80016a2:      	bl	#0x13a
 80016a6:      	str	r0, [sp]
 80016a8:      	b	#-0x2 <r0::init_data::h31e95992687b83dc+0x54>
 80016aa:      	ldr	r0, [sp]
 80016ac:      	str	r0, [sp, #0x18]
;     while sdata < edata {
 80016ae:      	b	#-0x4c <r0::init_data::h31e95992687b83dc+0x10>

080016b0 <core::mem::maybe_uninit::MaybeUninit<T>::zeroed::h7ab04f809a18241f>:
;     pub fn zeroed() -> MaybeUninit<T> {
 80016b0:      	push	{r7, lr}
 80016b2:      	mov	r7, sp
 80016b4:      	sub	sp, #0x10
;     }
 80016b6:      	ldr	r0, [sp, #0x8]
;         let mut u = MaybeUninit::<T>::uninit();
 80016b8:      	str	r0, [sp, #0x4]
 80016ba:      	b	#-0x2 <core::mem::maybe_uninit::MaybeUninit<T>::zeroed::h7ab04f809a18241f+0xc>
 80016bc:      	add	r0, sp, #0x4
 80016be:      	str	r0, [sp, #0xc]
;             u.as_mut_ptr().write_bytes(0u8, 1);
 80016c0:      	b	#-0x2 <core::mem::maybe_uninit::MaybeUninit<T>::zeroed::h7ab04f809a18241f+0x12>
 80016c2:      	add	r0, sp, #0x4
 80016c4:      	movs	r1, #0x0
 80016c6:      	movs	r2, #0x1
;             u.as_mut_ptr().write_bytes(0u8, 1);
 80016c8:      	bl	#0x8
 80016cc:      	b	#-0x2 <core::mem::maybe_uninit::MaybeUninit<T>::zeroed::h7ab04f809a18241f+0x1e>
;     }
 80016ce:      	ldr	r0, [sp, #0x4]
 80016d0:      	add	sp, #0x10
 80016d2:      	pop	{r7, pc}

080016d4 <core::ptr::mut_ptr::<impl *mut T>::write_bytes::h971c84ef3e3cdb38>:
;     pub unsafe fn write_bytes(self, val: u8, count: usize)
 80016d4:      	push	{r7, lr}
 80016d6:      	mov	r7, sp
 80016d8:      	sub	sp, #0x10
 80016da:      	mov	r3, r1
 80016dc:      	str	r0, [sp, #0x4]
 80016de:      	strb	r1, [r7, #-5]
 80016e2:      	str	r2, [sp, #0xc]
;         unsafe { write_bytes(self, val, count) }
 80016e4:      	str	r3, [sp]
 80016e6:      	bl	#0x1e
 80016ea:      	b	#-0x2 <core::ptr::mut_ptr::<impl *mut T>::write_bytes::h971c84ef3e3cdb38+0x18>
;     }
 80016ec:      	add	sp, #0x10
 80016ee:      	pop	{r7, pc}

080016f0 <core::ptr::mut_ptr::<impl *mut T>::offset::h37b46695e55a6e50>:
;     pub const unsafe fn offset(self, count: isize) -> *mut T
 80016f0:      	sub	sp, #0x10
 80016f2:      	str	r0, [sp, #0x4]
 80016f4:      	str	r1, [sp, #0x8]
;         unsafe { intrinsics::offset(self, count) as *mut T }
 80016f6:      	add.w	r0, r0, r1, lsl #2
 80016fa:      	str	r0, [sp, #0xc]
 80016fc:      	ldr	r0, [sp, #0xc]
 80016fe:      	str	r0, [sp]
 8001700:      	b	#-0x2 <core::ptr::mut_ptr::<impl *mut T>::offset::h37b46695e55a6e50+0x12>
;     }
 8001702:      	ldr	r0, [sp]
 8001704:      	add	sp, #0x10
 8001706:      	bx	lr

08001708 <core::intrinsics::write_bytes::h554bc72d5e409aa7>:
; pub unsafe fn write_bytes<T>(dst: *mut T, val: u8, count: usize) {
 8001708:      	push	{r7, lr}
 800170a:      	mov	r7, sp
 800170c:      	sub	sp, #0x18
 800170e:      	mov	r3, r1
 8001710:      	str	r0, [sp, #0xc]
 8001712:      	strb	r1, [r7, #-5]
 8001716:      	str	r2, [sp, #0x14]
;     unsafe { write_bytes(dst, val, count) }
 8001718:      	lsls	r2, r2, #0x2
 800171a:      	uxtb	r1, r1
 800171c:      	str	r1, [sp, #0x8]
 800171e:      	mov	r1, r2
 8001720:      	ldr	r2, [sp, #0x8]
 8001722:      	str	r3, [sp, #0x4]
 8001724:      	bl	#0x1e8e
 8001728:      	b	#-0x2 <core::intrinsics::write_bytes::h554bc72d5e409aa7+0x22>
; }
 800172a:      	add	sp, #0x18
 800172c:      	pop	{r7, pc}

0800172e <core::intrinsics::copy_nonoverlapping::hac53be997c1394ff>:
; pub const unsafe fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize) {
 800172e:      	push	{r7, lr}
 8001730:      	mov	r7, sp
 8001732:      	sub	sp, #0x10
 8001734:      	str	r0, [sp, #0x4]
 8001736:      	str	r1, [sp, #0x8]
 8001738:      	str	r2, [sp, #0xc]
;     unsafe { copy_nonoverlapping(src, dst, count) }
 800173a:      	lsls	r2, r2, #0x2
 800173c:      	str	r0, [sp]
 800173e:      	mov	r0, r1
 8001740:      	ldr	r1, [sp]
 8001742:      	bl	#0x1d94
 8001746:      	b	#-0x2 <core::intrinsics::copy_nonoverlapping::hac53be997c1394ff+0x1a>
; }
 8001748:      	add	sp, #0x10
 800174a:      	pop	{r7, pc}

0800174c <core::ptr::write_volatile::h931162e0370e4b73>:
; pub unsafe fn write_volatile<T>(dst: *mut T, src: T) {
 800174c:      	sub	sp, #0x8
 800174e:      	str	r0, [sp]
 8001750:      	str	r1, [sp, #0x4]
;         intrinsics::volatile_store(dst, src);
 8001752:      	str	r1, [r0]
 8001754:      	b	#-0x2 <core::ptr::write_volatile::h931162e0370e4b73+0xa>
; }
 8001756:      	add	sp, #0x8
 8001758:      	bx	lr

0800175a <core::ptr::read::hce9e06fcef664dd1>:
; pub const unsafe fn read<T>(src: *const T) -> T {
 800175a:      	push	{r7, lr}
 800175c:      	mov	r7, sp
 800175e:      	sub	sp, #0x20
 8001760:      	str	r0, [sp, #0xc]
;     }
 8001762:      	ldr	r1, [sp, #0x10]
;     let mut tmp = MaybeUninit::<T>::uninit();
 8001764:      	str	r1, [sp, #0x8]
 8001766:      	str	r0, [sp, #0x4]
 8001768:      	b	#-0x2 <core::ptr::read::hce9e06fcef664dd1+0x10>
 800176a:      	add	r0, sp, #0x8
 800176c:      	str	r0, [sp, #0x1c]
;         copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);
 800176e:      	b	#-0x2 <core::ptr::read::hce9e06fcef664dd1+0x16>
 8001770:      	add	r1, sp, #0x8
 8001772:      	movs	r2, #0x1
;         copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);
 8001774:      	ldr	r0, [sp, #0x4]
 8001776:      	bl	#-0x4c
 800177a:      	b	#-0x2 <core::ptr::read::hce9e06fcef664dd1+0x22>
;         tmp.assume_init()
 800177c:      	ldr	r0, [sp, #0x8]
 800177e:      	str	r0, [sp, #0x14]
 8001780:      	str	r0, [sp, #0x18]
 8001782:      	str	r0, [sp]
 8001784:      	b	#-0x2 <core::ptr::read::hce9e06fcef664dd1+0x2c>
; }
 8001786:      	ldr	r0, [sp]
 8001788:      	add	sp, #0x20
 800178a:      	pop	{r7, pc}

0800178c <core::ptr::write::hba5730843bb07da8>:
; pub unsafe fn write<T>(dst: *mut T, src: T) {
 800178c:      	sub	sp, #0x8
 800178e:      	str	r1, [sp]
 8001790:      	str	r0, [sp, #0x4]
;         copy_nonoverlapping(&src as *const T, dst, 1);
 8001792:      	ldr	r1, [sp]
 8001794:      	str	r1, [r0]
 8001796:      	b	#-0x2 <core::ptr::write::hba5730843bb07da8+0xc>
; }
 8001798:      	add	sp, #0x8
 800179a:      	bx	lr

0800179c <core::sync::atomic::compiler_fence::h757189d568c113ac>:
; pub fn compiler_fence(order: Ordering) {
 800179c:      	push	{r7, lr}
 800179e:      	mov	r7, sp
 80017a0:      	sub	sp, #0x10
 80017a2:      	mov	r1, r0
 80017a4:      	strb	r0, [r7, #-5]
;             Acquire => intrinsics::atomic_singlethreadfence_acq(),
 80017a8:      	ldrb	r0, [r7, #-5]
 80017ac:      	str	r0, [sp, #0x4]
 80017ae:      	ldr	r1, [sp, #0x4]
 80017b0:      	tbb	[pc, r1]

080017b4 <$d.1>:
 80017b4:	03 11 10 12	.word	0x12101103
 80017b8:	13 00		.short	0x0013

080017ba <$t.2>:
;             Relaxed => panic!("there is no such thing as a relaxed compiler fence"),
 80017ba:      	movw	r0, #0x37bf
 80017be:      	movt	r0, #0x800
 80017c2:      	movw	r2, #0x3868
 80017c6:      	movt	r2, #0x800
 80017ca:      	movs	r1, #0x32
 80017cc:      	bl	#0x580
 80017d0:      	trap
;         match order {
 80017d2:      	trap
;             Acquire => intrinsics::atomic_singlethreadfence_acq(),
 80017d4:      	b	#0x4 <$t.2+0x22>
;             Release => intrinsics::atomic_singlethreadfence_rel(),
 80017d6:      	b	#0x2 <$t.2+0x22>
;             AcqRel => intrinsics::atomic_singlethreadfence_acqrel(),
 80017d8:      	b	#0x0 <$t.2+0x22>
;             SeqCst => intrinsics::atomic_singlethreadfence(),
 80017da:      	b	#-0x2 <$t.2+0x22>
; }
 80017dc:      	add	sp, #0x10
 80017de:      	pop	{r7, pc}

080017e0 <core::ptr::const_ptr::<impl *const T>::offset::he6a4dca5b00cbfbf>:
;     pub const unsafe fn offset(self, count: isize) -> *const T
 80017e0:      	sub	sp, #0x10
 80017e2:      	str	r0, [sp, #0x4]
 80017e4:      	str	r1, [sp, #0x8]
;         unsafe { intrinsics::offset(self, count) }
 80017e6:      	add.w	r0, r0, r1, lsl #2
 80017ea:      	str	r0, [sp, #0xc]
 80017ec:      	ldr	r0, [sp, #0xc]
 80017ee:      	str	r0, [sp]
 80017f0:      	b	#-0x2 <core::ptr::const_ptr::<impl *const T>::offset::he6a4dca5b00cbfbf+0x12>
;     }
 80017f2:      	ldr	r0, [sp]
 80017f4:      	add	sp, #0x10
 80017f6:      	bx	lr

080017f8 <core::ptr::read_volatile::hd457e98c13874764>:
; pub unsafe fn read_volatile<T>(src: *const T) -> T {
 80017f8:      	sub	sp, #0xc
 80017fa:      	str	r0, [sp, #0x4]
;     unsafe { intrinsics::volatile_load(src) }
 80017fc:      	ldr	r0, [r0]
 80017fe:      	str	r0, [sp, #0x8]
 8001800:      	ldr	r0, [sp, #0x8]
 8001802:      	str	r0, [sp]
 8001804:      	b	#-0x2 <core::ptr::read_volatile::hd457e98c13874764+0xe>
; }
 8001806:      	ldr	r0, [sp]
 8001808:      	add	sp, #0xc
 800180a:      	bx	lr

0800180c <core::ptr::write_volatile::h28011571377ac269>:
; pub unsafe fn write_volatile<T>(dst: *mut T, src: T) {
 800180c:      	sub	sp, #0x8
 800180e:      	mov	r2, r1
 8001810:      	str	r0, [sp]
 8001812:      	strh.w	r1, [sp, #0x6]
;         intrinsics::volatile_store(dst, src);
 8001816:      	strh	r1, [r0]
 8001818:      	b	#-0x2 <core::ptr::write_volatile::h28011571377ac269+0xe>
; }
 800181a:      	add	sp, #0x8
 800181c:      	bx	lr

0800181e <core::ptr::write_volatile::hce5e54e735db1557>:
; pub unsafe fn write_volatile<T>(dst: *mut T, src: T) {
 800181e:      	sub	sp, #0x8
 8001820:      	str	r0, [sp]
 8001822:      	str	r1, [sp, #0x4]
;         intrinsics::volatile_store(dst, src);
 8001824:      	str	r1, [r0]
 8001826:      	b	#-0x2 <core::ptr::write_volatile::hce5e54e735db1557+0xa>
; }
 8001828:      	add	sp, #0x8
 800182a:      	bx	lr

0800182c <core::ptr::write_volatile::hf2190fcc1b1d5ffb>:
; pub unsafe fn write_volatile<T>(dst: *mut T, src: T) {
 800182c:      	sub	sp, #0x8
 800182e:      	mov	r2, r1
 8001830:      	str	r0, [sp]
 8001832:      	strb.w	r1, [sp, #0x7]
;         intrinsics::volatile_store(dst, src);
 8001836:      	strb	r1, [r0]
 8001838:      	b	#-0x2 <core::ptr::write_volatile::hf2190fcc1b1d5ffb+0xe>
; }
 800183a:      	add	sp, #0x8
 800183c:      	bx	lr

0800183e <core::ptr::swap_nonoverlapping::h4b86883e739ad441>:
; pub unsafe fn swap_nonoverlapping<T>(x: *mut T, y: *mut T, count: usize) {
 800183e:      	push	{r7, lr}
 8001840:      	mov	r7, sp
 8001842:      	sub	sp, #0x28
 8001844:      	str	r0, [sp, #0x10]
 8001846:      	str	r1, [sp, #0x14]
 8001848:      	str	r2, [sp, #0x18]
;     let x = x as *mut u8;
 800184a:      	mov	r3, r0
 800184c:      	str	r0, [sp, #0x1c]
;     let y = y as *mut u8;
 800184e:      	mov	r0, r1
 8001850:      	str	r1, [sp, #0x20]
;     let len = mem::size_of::<T>() * count;
 8001852:      	str	r2, [sp, #0xc]
 8001854:      	str	r3, [sp, #0x8]
 8001856:      	str	r0, [sp, #0x4]
 8001858:      	b	#-0x2 <core::ptr::swap_nonoverlapping::h4b86883e739ad441+0x1c>
 800185a:      	ldr	r0, [sp, #0xc]
 800185c:      	lsls	r1, r0, #0x2
 800185e:      	str	r1, [sp, #0x24]
;     unsafe { swap_nonoverlapping_bytes(x, y, len) }
 8001860:      	ldr	r0, [sp, #0x8]
 8001862:      	ldr	r2, [sp, #0x4]
 8001864:      	str	r1, [sp]
 8001866:      	mov	r1, r2
 8001868:      	ldr	r2, [sp]
 800186a:      	bl	#0x8a
 800186e:      	b	#-0x2 <core::ptr::swap_nonoverlapping::h4b86883e739ad441+0x32>
; }
 8001870:      	add	sp, #0x28
 8001872:      	pop	{r7, pc}

08001874 <core::ptr::slice_from_raw_parts::h783751f83a40c7e9>:
; pub const fn slice_from_raw_parts<T>(data: *const T, len: usize) -> *const [T] {
 8001874:      	sub	sp, #0x18
 8001876:      	str	r0, [sp, #0x10]
 8001878:      	str	r1, [sp, #0x14]
;     unsafe { Repr { raw: FatPtr { data, len } }.rust }
 800187a:      	str	r0, [sp, #0x8]
 800187c:      	str	r1, [sp, #0xc]
 800187e:      	ldr	r0, [sp, #0x8]
 8001880:      	ldr	r1, [sp, #0xc]
 8001882:      	str	r0, [sp]
 8001884:      	str	r1, [sp, #0x4]
 8001886:      	ldr	r0, [sp]
 8001888:      	ldr	r1, [sp, #0x4]
; }
 800188a:      	add	sp, #0x18
 800188c:      	bx	lr

0800188e <core::ptr::slice_from_raw_parts::hadbefcec16a756e9>:
; pub const fn slice_from_raw_parts<T>(data: *const T, len: usize) -> *const [T] {
 800188e:      	sub	sp, #0x18
 8001890:      	str	r0, [sp, #0x10]
 8001892:      	str	r1, [sp, #0x14]
;     unsafe { Repr { raw: FatPtr { data, len } }.rust }
 8001894:      	str	r0, [sp, #0x8]
 8001896:      	str	r1, [sp, #0xc]
 8001898:      	ldr	r0, [sp, #0x8]
 800189a:      	ldr	r1, [sp, #0xc]
 800189c:      	str	r0, [sp]
 800189e:      	str	r1, [sp, #0x4]
 80018a0:      	ldr	r0, [sp]
 80018a2:      	ldr	r1, [sp, #0x4]
; }
 80018a4:      	add	sp, #0x18
 80018a6:      	bx	lr

080018a8 <core::ptr::swap_nonoverlapping_one::h3fad8aef5bf1c260>:
; pub(crate) unsafe fn swap_nonoverlapping_one<T>(x: *mut T, y: *mut T) {
 80018a8:      	push	{r7, lr}
 80018aa:      	mov	r7, sp
 80018ac:      	sub	sp, #0x20
 80018ae:      	str	r0, [sp, #0x14]
 80018b0:      	str	r1, [sp, #0x18]
;     if mem::size_of::<T>() < 32 {
 80018b2:      	str	r1, [sp, #0xc]
 80018b4:      	str	r0, [sp, #0x8]
 80018b6:      	b	#-0x2 <core::ptr::swap_nonoverlapping_one::h3fad8aef5bf1c260+0x10>
 80018b8:      	movs	r0, #0x0
;     if mem::size_of::<T>() < 32 {
 80018ba:      	cmp	r0, #0x0
 80018bc:      	bne	#0xe <core::ptr::swap_nonoverlapping_one::h3fad8aef5bf1c260+0x26>
 80018be:      	b	#-0x2 <core::ptr::swap_nonoverlapping_one::h3fad8aef5bf1c260+0x18>
;             let z = read(x);
 80018c0:      	ldr	r0, [sp, #0x8]
 80018c2:      	bl	#0x174
 80018c6:      	mov	r1, r0
 80018c8:      	str	r0, [sp, #0x1c]
 80018ca:      	str	r1, [sp, #0x4]
 80018cc:      	b	#0xa <core::ptr::swap_nonoverlapping_one::h3fad8aef5bf1c260+0x32>
 80018ce:      	movs	r2, #0x1
;         unsafe { swap_nonoverlapping(x, y, 1) };
 80018d0:      	ldr	r0, [sp, #0x8]
 80018d2:      	ldr	r1, [sp, #0xc]
 80018d4:      	bl	#-0x9a
 80018d8:      	b	#0x16 <core::ptr::swap_nonoverlapping_one::h3fad8aef5bf1c260+0x4a>
 80018da:      	movs	r2, #0x1
;             copy_nonoverlapping(y, x, 1);
 80018dc:      	ldr	r0, [sp, #0xc]
 80018de:      	ldr	r1, [sp, #0x8]
 80018e0:      	bl	#0x1da
 80018e4:      	b	#-0x2 <core::ptr::swap_nonoverlapping_one::h3fad8aef5bf1c260+0x3e>
;             write(y, z);
 80018e6:      	ldr	r0, [sp, #0xc]
 80018e8:      	ldr	r1, [sp, #0x4]
 80018ea:      	bl	#0x1c0
 80018ee:      	b	#-0x2 <core::ptr::swap_nonoverlapping_one::h3fad8aef5bf1c260+0x48>
;     if mem::size_of::<T>() < 32 {
 80018f0:      	b	#0x0 <core::ptr::swap_nonoverlapping_one::h3fad8aef5bf1c260+0x4c>
 80018f2:      	b	#-0x2 <core::ptr::swap_nonoverlapping_one::h3fad8aef5bf1c260+0x4c>
; }
 80018f4:      	add	sp, #0x20
 80018f6:      	pop	{r7, pc}

080018f8 <core::ptr::swap_nonoverlapping_bytes::habbd347f88568121>:
; unsafe fn swap_nonoverlapping_bytes(x: *mut u8, y: *mut u8, len: usize) {
 80018f8:      	push	{r4, r6, r7, lr}
 80018fa:      	add	r7, sp, #0x8
 80018fc:      	sub	sp, #0xd0
 80018fe:      	mov	r4, sp
 8001900:      	bfc	r4, #0, #5
 8001904:      	mov	sp, r4
 8001906:      	str	r0, [sp, #0x9c]
 8001908:      	str	r1, [sp, #0xa0]
 800190a:      	str	r2, [sp, #0xa4]
 800190c:      	movs	r3, #0x20
;     let block_size = mem::size_of::<Block>();
 800190e:      	str	r3, [sp, #0xa8]
 8001910:      	str	r2, [sp, #0x34]
 8001912:      	str	r1, [sp, #0x30]
 8001914:      	str	r0, [sp, #0x2c]
 8001916:      	b	#-0x2 <core::ptr::swap_nonoverlapping_bytes::habbd347f88568121+0x20>
 8001918:      	movs	r0, #0x0
;     let mut i = 0;
 800191a:      	str	r0, [sp, #0x3c]
;     while i + block_size <= len {
 800191c:      	b	#-0x2 <core::ptr::swap_nonoverlapping_bytes::habbd347f88568121+0x26>
 800191e:      	ldr	r0, [sp, #0x3c]
 8001920:      	adds	r0, #0x20
 8001922:      	ldr	r1, [sp, #0x34]
 8001924:      	cmp	r0, r1
 8001926:      	bls	#0xa <core::ptr::swap_nonoverlapping_bytes::habbd347f88568121+0x3c>
 8001928:      	b	#-0x2 <core::ptr::swap_nonoverlapping_bytes::habbd347f88568121+0x32>
;     if i < len {
 800192a:      	ldr	r0, [sp, #0x3c]
 800192c:      	ldr	r1, [sp, #0x34]
 800192e:      	cmp	r0, r1
 8001930:      	blo	#0x64 <core::ptr::swap_nonoverlapping_bytes::habbd347f88568121+0xa0>
 8001932:      	b	#0x64 <core::ptr::swap_nonoverlapping_bytes::habbd347f88568121+0xa2>
;         let mut t = mem::MaybeUninit::<Block>::uninit();
 8001934:      	b	#-0x2 <core::ptr::swap_nonoverlapping_bytes::habbd347f88568121+0x3e>
 8001936:      	add	r0, sp, #0x40
 8001938:      	str	r0, [sp, #0xcc]
;         let t = t.as_mut_ptr() as *mut u8;
 800193a:      	b	#-0x2 <core::ptr::swap_nonoverlapping_bytes::habbd347f88568121+0x44>
 800193c:      	add	r0, sp, #0x40
;         let t = t.as_mut_ptr() as *mut u8;
 800193e:      	mov	r1, r0
 8001940:      	str	r0, [sp, #0xac]
;             let x = x.add(i);
 8001942:      	ldr	r0, [sp, #0x3c]
 8001944:      	ldr	r2, [sp, #0x2c]
 8001946:      	str	r0, [sp, #0x28]
 8001948:      	mov	r0, r2
 800194a:      	ldr	r3, [sp, #0x28]
 800194c:      	str	r1, [sp, #0x24]
 800194e:      	mov	r1, r3
 8001950:      	bl	#0x20c
 8001954:      	mov	r1, r0
 8001956:      	str	r0, [sp, #0xb0]
 8001958:      	str	r1, [sp, #0x20]
 800195a:      	b	#-0x2 <core::ptr::swap_nonoverlapping_bytes::habbd347f88568121+0x64>
;             let y = y.add(i);
 800195c:      	ldr	r1, [sp, #0x3c]
 800195e:      	ldr	r0, [sp, #0x30]
 8001960:      	bl	#0x1fc
 8001964:      	mov	r1, r0
 8001966:      	str	r0, [sp, #0xb4]
 8001968:      	str	r1, [sp, #0x1c]
 800196a:      	b	#-0x2 <core::ptr::swap_nonoverlapping_bytes::habbd347f88568121+0x74>
 800196c:      	movs	r2, #0x20
;             copy_nonoverlapping(x, t, block_size);
 800196e:      	ldr	r0, [sp, #0x20]
 8001970:      	ldr	r1, [sp, #0x24]
 8001972:      	bl	#0x1a2
 8001976:      	b	#-0x2 <core::ptr::swap_nonoverlapping_bytes::habbd347f88568121+0x80>
 8001978:      	movs	r2, #0x20
;             copy_nonoverlapping(y, x, block_size);
 800197a:      	ldr	r0, [sp, #0x1c]
 800197c:      	ldr	r1, [sp, #0x20]
 800197e:      	bl	#0x196
 8001982:      	b	#-0x2 <core::ptr::swap_nonoverlapping_bytes::habbd347f88568121+0x8c>
 8001984:      	movs	r2, #0x20
;             copy_nonoverlapping(t, y, block_size);
 8001986:      	ldr	r0, [sp, #0x24]
 8001988:      	ldr	r1, [sp, #0x1c]
 800198a:      	bl	#0x18a
 800198e:      	b	#-0x2 <core::ptr::swap_nonoverlapping_bytes::habbd347f88568121+0x98>
;         i += block_size;
 8001990:      	ldr	r0, [sp, #0x3c]
 8001992:      	adds	r0, #0x20
 8001994:      	str	r0, [sp, #0x3c]
;     while i + block_size <= len {
 8001996:      	b	#-0x7c <core::ptr::swap_nonoverlapping_bytes::habbd347f88568121+0x26>
;         let mut t = mem::MaybeUninit::<UnalignedBlock>::uninit();
 8001998:      	b	#0x0 <core::ptr::swap_nonoverlapping_bytes::habbd347f88568121+0xa4>
;     if i < len {
 800199a:      	b	#0x62 <core::ptr::swap_nonoverlapping_bytes::habbd347f88568121+0x108>
;         let rem = len - i;
 800199c:      	ldr	r0, [sp, #0x3c]
 800199e:      	ldr	r1, [sp, #0x34]
 80019a0:      	subs	r0, r1, r0
 80019a2:      	mov	r2, r0
 80019a4:      	str	r0, [sp, #0xb8]
 80019a6:      	add	r0, sp, #0x78
 80019a8:      	str	r0, [sp, #0xc8]
;         let t = t.as_mut_ptr() as *mut u8;
 80019aa:      	str	r2, [sp, #0x18]
 80019ac:      	str	r0, [sp, #0x14]
 80019ae:      	b	#-0x2 <core::ptr::swap_nonoverlapping_bytes::habbd347f88568121+0xb8>
 80019b0:      	ldr	r0, [sp, #0x14]
 80019b2:      	ldr	r1, [sp, #0x14]
 80019b4:      	str	r1, [sp, #0xbc]
;             let x = x.add(i);
 80019b6:      	ldr	r1, [sp, #0x3c]
 80019b8:      	ldr	r2, [sp, #0x2c]
 80019ba:      	str	r0, [sp, #0x10]
 80019bc:      	mov	r0, r2
 80019be:      	bl	#0x19e
 80019c2:      	mov	r1, r0
 80019c4:      	str	r0, [sp, #0xc0]
 80019c6:      	str	r1, [sp, #0xc]
 80019c8:      	b	#-0x2 <core::ptr::swap_nonoverlapping_bytes::habbd347f88568121+0xd2>
;             let y = y.add(i);
 80019ca:      	ldr	r1, [sp, #0x3c]
 80019cc:      	ldr	r0, [sp, #0x30]
 80019ce:      	bl	#0x18e
 80019d2:      	mov	r1, r0
 80019d4:      	str	r0, [sp, #0xc4]
 80019d6:      	str	r1, [sp, #0x8]
 80019d8:      	b	#-0x2 <core::ptr::swap_nonoverlapping_bytes::habbd347f88568121+0xe2>
;             copy_nonoverlapping(x, t, rem);
 80019da:      	ldr	r0, [sp, #0xc]
 80019dc:      	ldr	r1, [sp, #0x10]
 80019de:      	ldr	r2, [sp, #0x18]
 80019e0:      	bl	#0x134
 80019e4:      	b	#-0x2 <core::ptr::swap_nonoverlapping_bytes::habbd347f88568121+0xee>
;             copy_nonoverlapping(y, x, rem);
 80019e6:      	ldr	r0, [sp, #0x8]
 80019e8:      	ldr	r1, [sp, #0xc]
 80019ea:      	ldr	r2, [sp, #0x18]
 80019ec:      	bl	#0x128
 80019f0:      	b	#-0x2 <core::ptr::swap_nonoverlapping_bytes::habbd347f88568121+0xfa>
;             copy_nonoverlapping(t, y, rem);
 80019f2:      	ldr	r0, [sp, #0x10]
 80019f4:      	ldr	r1, [sp, #0x8]
 80019f6:      	ldr	r2, [sp, #0x18]
 80019f8:      	bl	#0x11c
 80019fc:      	b	#-0x2 <core::ptr::swap_nonoverlapping_bytes::habbd347f88568121+0x106>
;     if i < len {
 80019fe:      	b	#-0x2 <core::ptr::swap_nonoverlapping_bytes::habbd347f88568121+0x108>
; }
 8001a00:      	sub.w	r4, r7, #0x8
 8001a04:      	mov	sp, r4
 8001a06:      	pop	{r4, r6, r7, pc}

08001a08 <core::ptr::read::h05b66d8c8e283524>:
; pub const unsafe fn read<T>(src: *const T) -> T {
 8001a08:      	push	{r7, lr}
 8001a0a:      	mov	r7, sp
 8001a0c:      	sub	sp, #0x20
 8001a0e:      	str	r0, [sp, #0xc]
;     }
 8001a10:      	ldr	r1, [sp, #0x10]
;     let mut tmp = MaybeUninit::<T>::uninit();
 8001a12:      	str	r1, [sp, #0x8]
 8001a14:      	str	r0, [sp, #0x4]
 8001a16:      	b	#-0x2 <core::ptr::read::h05b66d8c8e283524+0x10>
 8001a18:      	add	r0, sp, #0x8
 8001a1a:      	str	r0, [sp, #0x1c]
;         copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);
 8001a1c:      	b	#-0x2 <core::ptr::read::h05b66d8c8e283524+0x16>
 8001a1e:      	add	r1, sp, #0x8
 8001a20:      	movs	r2, #0x1
;         copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);
 8001a22:      	ldr	r0, [sp, #0x4]
 8001a24:      	bl	#0xb4
 8001a28:      	b	#-0x2 <core::ptr::read::h05b66d8c8e283524+0x22>
;         tmp.assume_init()
 8001a2a:      	ldr	r0, [sp, #0x8]
 8001a2c:      	str	r0, [sp, #0x14]
 8001a2e:      	str	r0, [sp, #0x18]
 8001a30:      	str	r0, [sp]
 8001a32:      	b	#-0x2 <core::ptr::read::h05b66d8c8e283524+0x2c>
; }
 8001a34:      	ldr	r0, [sp]
 8001a36:      	add	sp, #0x20
 8001a38:      	pop	{r7, pc}

08001a3a <core::ptr::read::h3bfcf13ad2a18d96>:
; pub const unsafe fn read<T>(src: *const T) -> T {
 8001a3a:      	push	{r7, lr}
 8001a3c:      	mov	r7, sp
 8001a3e:      	sub	sp, #0x20
 8001a40:      	str	r0, [sp, #0xc]
;     }
 8001a42:      	ldr	r1, [sp, #0x10]
;     let mut tmp = MaybeUninit::<T>::uninit();
 8001a44:      	str	r1, [sp, #0x8]
 8001a46:      	str	r0, [sp, #0x4]
 8001a48:      	b	#-0x2 <core::ptr::read::h3bfcf13ad2a18d96+0x10>
 8001a4a:      	add	r0, sp, #0x8
 8001a4c:      	str	r0, [sp, #0x1c]
;         copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);
 8001a4e:      	b	#-0x2 <core::ptr::read::h3bfcf13ad2a18d96+0x16>
 8001a50:      	add	r1, sp, #0x8
 8001a52:      	movs	r2, #0x1
;         copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);
 8001a54:      	ldr	r0, [sp, #0x4]
 8001a56:      	bl	#0x64
 8001a5a:      	b	#-0x2 <core::ptr::read::h3bfcf13ad2a18d96+0x22>
;         tmp.assume_init()
 8001a5c:      	ldr	r0, [sp, #0x8]
 8001a5e:      	str	r0, [sp, #0x14]
 8001a60:      	str	r0, [sp, #0x18]
 8001a62:      	str	r0, [sp]
 8001a64:      	b	#-0x2 <core::ptr::read::h3bfcf13ad2a18d96+0x2c>
; }
 8001a66:      	ldr	r0, [sp]
 8001a68:      	add	sp, #0x20
 8001a6a:      	pop	{r7, pc}

08001a6c <core::ptr::read::hfeb619fcb9b6df43>:
; pub const unsafe fn read<T>(src: *const T) -> T {
 8001a6c:      	push	{r7, lr}
 8001a6e:      	mov	r7, sp
 8001a70:      	sub	sp, #0x20
 8001a72:      	str	r0, [sp, #0x10]
;     }
 8001a74:      	ldrh	r1, [r7, #-10]
;     let mut tmp = MaybeUninit::<T>::uninit();
 8001a78:      	strh	r1, [r7, #-18]
 8001a7c:      	str	r0, [sp, #0x8]
 8001a7e:      	b	#-0x2 <core::ptr::read::hfeb619fcb9b6df43+0x14>
 8001a80:      	sub.w	r0, r7, #0x12
 8001a84:      	str	r0, [sp, #0x1c]
;         copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);
 8001a86:      	b	#-0x2 <core::ptr::read::hfeb619fcb9b6df43+0x1c>
 8001a88:      	sub.w	r1, r7, #0x12
 8001a8c:      	movs	r2, #0x1
;         copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);
 8001a8e:      	ldr	r0, [sp, #0x8]
 8001a90:      	bl	#0x66
 8001a94:      	b	#-0x2 <core::ptr::read::hfeb619fcb9b6df43+0x2a>
;         tmp.assume_init()
 8001a96:      	ldrh	r0, [r7, #-18]
 8001a9a:      	mov	r1, r0
 8001a9c:      	strh.w	r0, [sp, #0x18]
 8001aa0:      	strh	r0, [r7, #-6]
 8001aa4:      	str	r1, [sp, #0x4]
 8001aa6:      	b	#-0x2 <core::ptr::read::hfeb619fcb9b6df43+0x3c>
; }
 8001aa8:      	ldr	r0, [sp, #0x4]
 8001aaa:      	add	sp, #0x20
 8001aac:      	pop	{r7, pc}

08001aae <core::ptr::write::h73784487ddb59bc8>:
; pub unsafe fn write<T>(dst: *mut T, src: T) {
 8001aae:      	sub	sp, #0x8
 8001ab0:      	str	r1, [sp]
 8001ab2:      	str	r0, [sp, #0x4]
;         copy_nonoverlapping(&src as *const T, dst, 1);
 8001ab4:      	ldr	r1, [sp]
 8001ab6:      	str	r1, [r0]
 8001ab8:      	b	#-0x2 <core::ptr::write::h73784487ddb59bc8+0xc>
; }
 8001aba:      	add	sp, #0x8
 8001abc:      	bx	lr

08001abe <core::intrinsics::copy_nonoverlapping::h84f6ffcb1e29461f>:
; pub const unsafe fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize) {
 8001abe:      	push	{r7, lr}
 8001ac0:      	mov	r7, sp
 8001ac2:      	sub	sp, #0x10
 8001ac4:      	str	r0, [sp, #0x4]
 8001ac6:      	str	r1, [sp, #0x8]
 8001ac8:      	str	r2, [sp, #0xc]
;     unsafe { copy_nonoverlapping(src, dst, count) }
 8001aca:      	lsls	r2, r2, #0x2
 8001acc:      	str	r0, [sp]
 8001ace:      	mov	r0, r1
 8001ad0:      	ldr	r1, [sp]
 8001ad2:      	bl	#0x1a04
 8001ad6:      	b	#-0x2 <core::intrinsics::copy_nonoverlapping::h84f6ffcb1e29461f+0x1a>
; }
 8001ad8:      	add	sp, #0x10
 8001ada:      	pop	{r7, pc}

08001adc <core::intrinsics::copy_nonoverlapping::h8b93d4687634a521>:
; pub const unsafe fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize) {
 8001adc:      	push	{r7, lr}
 8001ade:      	mov	r7, sp
 8001ae0:      	sub	sp, #0x10
 8001ae2:      	str	r0, [sp, #0x4]
 8001ae4:      	str	r1, [sp, #0x8]
 8001ae6:      	str	r2, [sp, #0xc]
;     unsafe { copy_nonoverlapping(src, dst, count) }
 8001ae8:      	lsls	r2, r2, #0x2
 8001aea:      	str	r0, [sp]
 8001aec:      	mov	r0, r1
 8001aee:      	ldr	r1, [sp]
 8001af0:      	bl	#0x19e6
 8001af4:      	b	#-0x2 <core::intrinsics::copy_nonoverlapping::h8b93d4687634a521+0x1a>
; }
 8001af6:      	add	sp, #0x10
 8001af8:      	pop	{r7, pc}

08001afa <core::intrinsics::copy_nonoverlapping::h95220c077c4105fa>:
; pub const unsafe fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize) {
 8001afa:      	push	{r7, lr}
 8001afc:      	mov	r7, sp
 8001afe:      	sub	sp, #0x10
 8001b00:      	str	r0, [sp, #0x4]
 8001b02:      	str	r1, [sp, #0x8]
 8001b04:      	str	r2, [sp, #0xc]
;     unsafe { copy_nonoverlapping(src, dst, count) }
 8001b06:      	lsls	r2, r2, #0x1
 8001b08:      	str	r0, [sp]
 8001b0a:      	mov	r0, r1
 8001b0c:      	ldr	r1, [sp]
 8001b0e:      	bl	#0x194a
 8001b12:      	b	#-0x2 <core::intrinsics::copy_nonoverlapping::h95220c077c4105fa+0x1a>
; }
 8001b14:      	add	sp, #0x10
 8001b16:      	pop	{r7, pc}

08001b18 <core::intrinsics::copy_nonoverlapping::hff726c2c52ca6516>:
; pub const unsafe fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize) {
 8001b18:      	push	{r7, lr}
 8001b1a:      	mov	r7, sp
 8001b1c:      	sub	sp, #0x10
 8001b1e:      	str	r0, [sp, #0x4]
 8001b20:      	str	r1, [sp, #0x8]
 8001b22:      	str	r2, [sp, #0xc]
;     unsafe { copy_nonoverlapping(src, dst, count) }
 8001b24:      	str	r0, [sp]
 8001b26:      	mov	r0, r1
 8001b28:      	ldr	r1, [sp]
 8001b2a:      	bl	#0x192e
 8001b2e:      	b	#-0x2 <core::intrinsics::copy_nonoverlapping::hff726c2c52ca6516+0x18>
; }
 8001b30:      	add	sp, #0x10
 8001b32:      	pop	{r7, pc}

08001b34 <core::mem::swap::hd7ebce1e229aafb4>:
; pub fn swap<T>(x: &mut T, y: &mut T) {
 8001b34:      	push	{r7, lr}
 8001b36:      	mov	r7, sp
 8001b38:      	sub	sp, #0x8
 8001b3a:      	str	r0, [sp]
 8001b3c:      	str	r1, [sp, #0x4]
;         ptr::swap_nonoverlapping_one(x, y);
 8001b3e:      	bl	#-0x29a
 8001b42:      	b	#-0x2 <core::mem::swap::hd7ebce1e229aafb4+0x10>
; }
 8001b44:      	add	sp, #0x8
 8001b46:      	pop	{r7, pc}

08001b48 <core::mem::replace::h6ec516c45bdd659a>:
; pub fn replace<T>(dest: &mut T, mut src: T) -> T {
 8001b48:      	push	{r7, lr}
 8001b4a:      	mov	r7, sp
 8001b4c:      	sub	sp, #0x8
 8001b4e:      	str	r1, [sp]
 8001b50:      	str	r0, [sp, #0x4]
 8001b52:      	mov	r1, sp
;     swap(dest, &mut src);
 8001b54:      	bl	#-0x24
 8001b58:      	b	#-0x2 <core::mem::replace::h6ec516c45bdd659a+0x12>
;     src
 8001b5a:      	ldr	r0, [sp]
; }
 8001b5c:      	add	sp, #0x8
 8001b5e:      	pop	{r7, pc}

08001b60 <core::ptr::mut_ptr::<impl *mut T>::add::h08e328a0cacffa9c>:
;     pub const unsafe fn add(self, count: usize) -> Self
 8001b60:      	push	{r7, lr}
 8001b62:      	mov	r7, sp
 8001b64:      	sub	sp, #0x10
 8001b66:      	str	r0, [sp, #0x8]
 8001b68:      	str	r1, [sp, #0xc]
;         unsafe { self.offset(count as isize) }
 8001b6a:      	bl	#0xa
 8001b6e:      	str	r0, [sp, #0x4]
 8001b70:      	b	#-0x2 <core::ptr::mut_ptr::<impl *mut T>::add::h08e328a0cacffa9c+0x12>
;     }
 8001b72:      	ldr	r0, [sp, #0x4]
 8001b74:      	add	sp, #0x10
 8001b76:      	pop	{r7, pc}

08001b78 <core::ptr::mut_ptr::<impl *mut T>::offset::h2833a2dc330e2e78>:
;     pub const unsafe fn offset(self, count: isize) -> *mut T
 8001b78:      	sub	sp, #0x10
 8001b7a:      	str	r0, [sp, #0x4]
 8001b7c:      	str	r1, [sp, #0x8]
;         unsafe { intrinsics::offset(self, count) as *mut T }
 8001b7e:      	add	r0, r1
 8001b80:      	str	r0, [sp, #0xc]
 8001b82:      	ldr	r0, [sp, #0xc]
 8001b84:      	str	r0, [sp]
 8001b86:      	b	#-0x2 <core::ptr::mut_ptr::<impl *mut T>::offset::h2833a2dc330e2e78+0x10>
;     }
 8001b88:      	ldr	r0, [sp]
 8001b8a:      	add	sp, #0x10
 8001b8c:      	bx	lr

08001b8e <core::slice::<impl [T]>::len::h89a922bd35b3df72>:
;     pub const fn len(&self) -> usize {
 8001b8e:      	sub	sp, #0x10
 8001b90:      	str	r0, [sp, #0x8]
 8001b92:      	str	r1, [sp, #0xc]
;         unsafe { crate::ptr::Repr { rust: self }.raw.len }
 8001b94:      	str	r0, [sp]
 8001b96:      	str	r1, [sp, #0x4]
 8001b98:      	ldr	r0, [sp, #0x4]
;     }
 8001b9a:      	add	sp, #0x10
 8001b9c:      	bx	lr

08001b9e <core::slice::<impl [T]>::len::hc29c7677dd685e85>:
;     pub const fn len(&self) -> usize {
 8001b9e:      	sub	sp, #0x10
 8001ba0:      	str	r0, [sp, #0x8]
 8001ba2:      	str	r1, [sp, #0xc]
;         unsafe { crate::ptr::Repr { rust: self }.raw.len }
 8001ba4:      	str	r0, [sp]
 8001ba6:      	str	r1, [sp, #0x4]
 8001ba8:      	ldr	r0, [sp, #0x4]
;     }
 8001baa:      	add	sp, #0x10
 8001bac:      	bx	lr

08001bae <core::slice::<impl [T]>::as_ptr::h18726308f269b2c7>:
;     pub const fn as_ptr(&self) -> *const T {
 8001bae:      	sub	sp, #0x8
 8001bb0:      	str	r0, [sp]
 8001bb2:      	str	r1, [sp, #0x4]
;     }
 8001bb4:      	add	sp, #0x8
 8001bb6:      	bx	lr

08001bb8 <core::slice::<impl [T]>::as_ptr::hc5a524894062b2d5>:
;     pub const fn as_ptr(&self) -> *const T {
 8001bb8:      	sub	sp, #0x8
 8001bba:      	str	r0, [sp]
 8001bbc:      	str	r1, [sp, #0x4]
;     }
 8001bbe:      	add	sp, #0x8
 8001bc0:      	bx	lr

08001bc2 <core::num::<impl usize>::unchecked_add::hdf10895faa5932b4>:
;         pub unsafe fn unchecked_add(self, rhs: Self) -> Self {
 8001bc2:      	sub	sp, #0x10
 8001bc4:      	str	r0, [sp, #0x4]
 8001bc6:      	str	r1, [sp, #0x8]
;             unsafe { intrinsics::unchecked_add(self, rhs) }
 8001bc8:      	add	r0, r1
 8001bca:      	str	r0, [sp, #0xc]
 8001bcc:      	ldr	r0, [sp, #0xc]
 8001bce:      	str	r0, [sp]
 8001bd0:      	b	#-0x2 <core::num::<impl usize>::unchecked_add::hdf10895faa5932b4+0x10>
;         }
 8001bd2:      	ldr	r0, [sp]
 8001bd4:      	add	sp, #0x10
 8001bd6:      	bx	lr

08001bd8 <core::ptr::const_ptr::<impl *const T>::add::h85ff79d91eabb192>:
;     pub const unsafe fn add(self, count: usize) -> Self
 8001bd8:      	push	{r7, lr}
 8001bda:      	mov	r7, sp
 8001bdc:      	sub	sp, #0x10
 8001bde:      	str	r0, [sp, #0x8]
 8001be0:      	str	r1, [sp, #0xc]
;         unsafe { self.offset(count as isize) }
 8001be2:      	bl	#0x22
 8001be6:      	str	r0, [sp, #0x4]
 8001be8:      	b	#-0x2 <core::ptr::const_ptr::<impl *const T>::add::h85ff79d91eabb192+0x12>
;     }
 8001bea:      	ldr	r0, [sp, #0x4]
 8001bec:      	add	sp, #0x10
 8001bee:      	pop	{r7, pc}

08001bf0 <core::ptr::const_ptr::<impl *const T>::offset::h316ddca089ffd74e>:
;     pub const unsafe fn offset(self, count: isize) -> *const T
 8001bf0:      	sub	sp, #0x10
 8001bf2:      	str	r0, [sp, #0x4]
 8001bf4:      	str	r1, [sp, #0x8]
;         unsafe { intrinsics::offset(self, count) }
 8001bf6:      	add.w	r0, r0, r1, lsl #2
 8001bfa:      	str	r0, [sp, #0xc]
 8001bfc:      	ldr	r0, [sp, #0xc]
 8001bfe:      	str	r0, [sp]
 8001c00:      	b	#-0x2 <core::ptr::const_ptr::<impl *const T>::offset::h316ddca089ffd74e+0x12>
;     }
 8001c02:      	ldr	r0, [sp]
 8001c04:      	add	sp, #0x10
 8001c06:      	bx	lr

08001c08 <core::ptr::const_ptr::<impl *const T>::offset::h35fccb35387a599e>:
;     pub const unsafe fn offset(self, count: isize) -> *const T
 8001c08:      	sub	sp, #0x10
 8001c0a:      	str	r0, [sp, #0x4]
 8001c0c:      	str	r1, [sp, #0x8]
;         unsafe { intrinsics::offset(self, count) }
 8001c0e:      	add	r0, r1
 8001c10:      	str	r0, [sp, #0xc]
 8001c12:      	ldr	r0, [sp, #0xc]
 8001c14:      	str	r0, [sp]
 8001c16:      	b	#-0x2 <core::ptr::const_ptr::<impl *const T>::offset::h35fccb35387a599e+0x10>
;     }
 8001c18:      	ldr	r0, [sp]
 8001c1a:      	add	sp, #0x10
 8001c1c:      	bx	lr

08001c1e <core::cell::UnsafeCell<T>::get::h6919725294c5152f>:
;     pub const fn get(&self) -> *mut T {
 8001c1e:      	sub	sp, #0x4
 8001c20:      	str	r0, [sp]
;     }
 8001c22:      	add	sp, #0x4
 8001c24:      	bx	lr

08001c26 <core::clone::impls::<impl core::clone::Clone for usize>::clone::h739067fd830f62d7>:
;                     fn clone(&self) -> Self {
 8001c26:      	sub	sp, #0x4
 8001c28:      	str	r0, [sp]
;                         *self
 8001c2a:      	ldr	r0, [r0]
;                     }
 8001c2c:      	add	sp, #0x4
 8001c2e:      	bx	lr

08001c30 <__cpsid>:
 8001c30:      	cpsid i
 8001c32:      	bx	lr

08001c34 <__cpsie>:
 8001c34:      	cpsie i
 8001c36:      	bx	lr

08001c38 <__primask_r>:
 8001c38:      	mrs	r0, primask
 8001c3c:      	bx	lr

08001c3e <bare_metal::CriticalSection::new::h8b981809339eb733>:
;     pub unsafe fn new() -> Self {
 8001c3e:      	sub	sp, #0x4
;     }
 8001c40:      	add	sp, #0x4
 8001c42:      	bx	lr

08001c44 <core::ops::function::FnOnce::call_once::hd1d74895fd10e483>:
 8001c44:      	ldr	r0, [r0]
 8001c46:      	b	#-0x4 <core::ops::function::FnOnce::call_once::hd1d74895fd10e483+0x2>

08001c48 <core::ptr::drop_in_place<&core::iter::adapters::copied::Copied<core::slice::iter::Iter<u8>>>::h7bb588aebfedf61a>:
 8001c48:      	bx	lr

08001c4a <<T as core::any::Any>::type_id::hffae59987aa1d026>:
 8001c4a:      	movw	r0, #0x3de1
 8001c4e:      	movw	r1, #0x3a9b
 8001c52:      	movt	r0, #0x4f
 8001c56:      	movt	r1, #0x650d
 8001c5a:      	bx	lr

08001c5c <<core::panic::PanicInfo as core::fmt::Display>::fmt::h1fecb345a434d77e>:
 8001c5c:      	push	{r4, r5, r6, r7, lr}
 8001c5e:      	add	r7, sp, #0xc
 8001c60:      	str	r11, [sp, #-4]!
 8001c64:      	sub	sp, #0x38
 8001c66:      	mov	r4, r1
 8001c68:      	mov	r5, r0
 8001c6a:      	ldrd	r0, r1, [r1, #24]
 8001c6e:      	movs	r2, #0xc
 8001c70:      	ldr	r3, [r1, #0xc]
 8001c72:      	movw	r1, #0x3898
 8001c76:      	movt	r1, #0x800
 8001c7a:      	blx	r3
 8001c7c:      	cbz	r0, #0xa
 8001c7e:      	movs	r6, #0x1
 8001c80:      	mov	r0, r6
 8001c82:      	add	sp, #0x38
 8001c84:      	ldr	r11, [sp], #4
 8001c88:      	pop	{r4, r5, r6, r7, pc}
 8001c8a:      	ldr	r0, [r5, #0x8]
 8001c8c:      	cbz	r0, #0xe
 8001c8e:      	str	r0, [sp, #0x4]
 8001c90:      	movw	r2, #0x2837
 8001c94:      	ldrd	r0, r1, [r4, #24]
 8001c98:      	movt	r2, #0x800
 8001c9c:      	b	#0x2e <<core::panic::PanicInfo as core::fmt::Display>::fmt::h1fecb345a434d77e+0x72>
 8001c9e:      	ldrd	r6, r0, [r5]
 8001ca2:      	ldr	r1, [r0, #0xc]
 8001ca4:      	mov	r0, r6
 8001ca6:      	blx	r1
 8001ca8:      	movw	r2, #0xa91e
 8001cac:      	movt	r2, #0x7ef2
 8001cb0:      	eors	r1, r2
 8001cb2:      	movw	r2, #0xbcf4
 8001cb6:      	movt	r2, #0xecc7
 8001cba:      	eors	r0, r2
 8001cbc:      	orrs	r0, r1
 8001cbe:      	bne	#0x38 <<core::panic::PanicInfo as core::fmt::Display>::fmt::h1fecb345a434d77e+0x9e>
 8001cc0:      	str	r6, [sp, #0x4]
 8001cc2:      	movw	r2, #0x286f
 8001cc6:      	ldrd	r0, r1, [r4, #24]
 8001cca:      	movt	r2, #0x800
 8001cce:      	str	r2, [sp, #0xc]
 8001cd0:      	add	r2, sp, #0x4
 8001cd2:      	str	r2, [sp, #0x8]
 8001cd4:      	movs	r6, #0x1
 8001cd6:      	add	r2, sp, #0x8
 8001cd8:      	str	r6, [sp, #0x34]
 8001cda:      	str	r2, [sp, #0x30]
 8001cdc:      	movs	r2, #0x0
 8001cde:      	str	r2, [sp, #0x2c]
 8001ce0:      	str	r2, [sp, #0x28]
 8001ce2:      	movs	r2, #0x2
 8001ce4:      	str	r2, [sp, #0x24]
 8001ce6:      	movw	r2, #0x38a8
 8001cea:      	movt	r2, #0x800
 8001cee:      	str	r2, [sp, #0x20]
 8001cf0:      	add	r2, sp, #0x20
 8001cf2:      	bl	#0xb0
 8001cf6:      	cmp	r0, #0x0
 8001cf8:      	bne	#-0x7c <<core::panic::PanicInfo as core::fmt::Display>::fmt::h1fecb345a434d77e+0x24>
 8001cfa:      	ldr	r2, [r5, #0xc]
 8001cfc:      	movw	r3, #0x2745
 8001d00:      	movt	r3, #0x800
 8001d04:      	ldrd	r0, r1, [r4, #24]
 8001d08:      	add.w	r6, r2, #0xc
 8001d0c:      	str	r3, [sp, #0x1c]
 8001d0e:      	strd	r3, r6, [sp, #20]
 8001d12:      	add.w	r3, r2, #0x8
 8001d16:      	str	r3, [sp, #0x10]
 8001d18:      	movw	r3, #0x2863
 8001d1c:      	movt	r3, #0x800
 8001d20:      	strd	r2, r3, [sp, #8]
 8001d24:      	add	r3, sp, #0x8
 8001d26:      	movs	r2, #0x3
 8001d28:      	str	r3, [sp, #0x30]
 8001d2a:      	movs	r3, #0x0
 8001d2c:      	str	r2, [sp, #0x34]
 8001d2e:      	str	r3, [sp, #0x2c]
 8001d30:      	strd	r2, r3, [sp, #36]
 8001d34:      	movw	r2, #0x38bc
 8001d38:      	movt	r2, #0x800
 8001d3c:      	str	r2, [sp, #0x20]
 8001d3e:      	add	r2, sp, #0x20
 8001d40:      	bl	#0x62
 8001d44:      	mov	r6, r0
 8001d46:      	mov	r0, r6
 8001d48:      	add	sp, #0x38
 8001d4a:      	ldr	r11, [sp], #4
 8001d4e:      	pop	{r4, r5, r6, r7, pc}

08001d50 <core::panicking::panic::h3a8fe4451a6ad1dc>:
 8001d50:      	push	{r7, lr}
 8001d52:      	mov	r7, sp
 8001d54:      	sub	sp, #0x20
 8001d56:      	mov	r12, r2
 8001d58:      	movw	r2, #0x3878
 8001d5c:      	movt	r2, #0x800
 8001d60:      	strd	r0, r1, [sp, #24]
 8001d64:      	movs	r3, #0x0
 8001d66:      	str	r2, [sp, #0x10]
 8001d68:      	movs	r2, #0x1
 8001d6a:      	mov	r0, sp
 8001d6c:      	mov	r1, r12
 8001d6e:      	str	r3, [sp, #0x14]
 8001d70:      	strd	r3, r3, [sp, #8]
 8001d74:      	str	r2, [sp, #0x4]
 8001d76:      	add	r2, sp, #0x18
 8001d78:      	str	r2, [sp]
 8001d7a:      	bl	#0x2
 8001d7e:      	trap

08001d80 <core::panicking::panic_fmt::hf689068776edbea9>:
 8001d80:      	push	{r7, lr}
 8001d82:      	mov	r7, sp
 8001d84:      	sub	sp, #0x10
 8001d86:      	strd	r0, r1, [sp, #8]
 8001d8a:      	movw	r0, #0x3888
 8001d8e:      	movt	r0, #0x800
 8001d92:      	str	r0, [sp, #0x4]
 8001d94:      	movw	r0, #0x3878
 8001d98:      	movt	r0, #0x800
 8001d9c:      	str	r0, [sp]
 8001d9e:      	mov	r0, sp
 8001da0:      	bl	#0xad8
 8001da4:      	trap

08001da6 <core::fmt::write::h1868e9a96952d100>:
 8001da6:      	push	{r4, r5, r6, r7, lr}
 8001da8:      	add	r7, sp, #0xc
 8001daa:      	push.w	{r8, r9, r10, r11}
 8001dae:      	sub	sp, #0x34
 8001db0:      	mov	r4, r2
 8001db2:      	movs	r2, #0x3
 8001db4:      	ldr.w	r11, [r4, #0x8]
 8001db8:      	strb.w	r2, [sp, #0x30]
 8001dbc:      	movs	r2, #0x20
 8001dbe:      	str	r2, [sp, #0x14]
 8001dc0:      	movs	r2, #0x0
 8001dc2:      	cmp.w	r11, #0x0
 8001dc6:      	str	r2, [sp, #0x10]
 8001dc8:      	str	r1, [sp, #0x2c]
 8001dca:      	str	r0, [sp, #0x28]
 8001dcc:      	str	r2, [sp, #0x20]
 8001dce:      	str	r2, [sp, #0x18]
 8001dd0:      	beq	#0xe2 <core::fmt::write::h1868e9a96952d100+0x110>
 8001dd2:      	ldr	r2, [r4, #0xc]
 8001dd4:      	ldrd	r6, r10, [r4]
 8001dd8:      	cmp	r2, r10
 8001dda:      	it	hi
 8001ddc:      	movhi	r2, r10
 8001dde:      	cmp	r2, #0x0
 8001de0:      	str	r6, [sp, #0xc]
 8001de2:      	beq.w	#0x12a <core::fmt::write::h1868e9a96952d100+0x16a>
 8001de6:      	strd	r10, r2, [sp, #4]
 8001dea:      	ldrd	r3, r2, [r6]
 8001dee:      	ldr	r6, [r1, #0xc]
 8001df0:      	mov	r1, r3
 8001df2:      	blx	r6
 8001df4:      	cmp	r0, #0x0
 8001df6:      	bne.w	#0x142 <core::fmt::write::h1868e9a96952d100+0x196>
 8001dfa:      	ldr	r0, [sp, #0x8]
 8001dfc:      	movs	r5, #0x0
 8001dfe:      	ldr.w	r9, [r4, #0x10]
 8001e02:      	mov.w	r8, #0x10
 8001e06:      	sub.w	r10, r0, #0x1
 8001e0a:      	add.w	r1, r11, r5, lsl #2
 8001e0e:      	ldrd	r3, r2, [r1, #20]
 8001e12:      	ldrd	r0, r4, [r1, #4]
 8001e16:      	ldrb	r6, [r1, #0x1c]
 8001e18:      	str	r0, [sp, #0x14]
 8001e1a:      	add.w	r0, r11, r8
 8001e1e:      	strb.w	r6, [sp, #0x30]
 8001e22:      	str	r4, [sp, #0x10]
 8001e24:      	cbz	r3, #0x1a
 8001e26:      	cmp	r3, #0x2
 8001e28:      	beq	#0x1a <core::fmt::write::h1868e9a96952d100+0xa0>
 8001e2a:      	add.w	r3, r9, r2, lsl #3
 8001e2e:      	movw	r6, #0x1c45
 8001e32:      	movt	r6, #0x800
 8001e36:      	ldr	r3, [r3, #0x4]
 8001e38:      	cmp	r3, r6
 8001e3a:      	bne	#0x8 <core::fmt::write::h1868e9a96952d100+0xa0>
 8001e3c:      	ldr.w	r2, [r9, r2, lsl #3]
 8001e40:      	ldr	r2, [r2]
 8001e42:      	movs	r4, #0x1
 8001e44:      	b	#0x0 <core::fmt::write::h1868e9a96952d100+0xa2>
 8001e46:      	movs	r4, #0x0
 8001e48:      	ldr.w	r3, [r11, r8]
 8001e4c:      	strd	r4, r2, [sp, #24]
 8001e50:      	ldr	r1, [r1, #0xc]
 8001e52:      	cbz	r1, #0x1a
 8001e54:      	cmp	r1, #0x2
 8001e56:      	beq	#0x1a <core::fmt::write::h1868e9a96952d100+0xce>
 8001e58:      	add.w	r1, r9, r3, lsl #3
 8001e5c:      	movw	r2, #0x1c45
 8001e60:      	movt	r2, #0x800
 8001e64:      	ldr	r1, [r1, #0x4]
 8001e66:      	cmp	r1, r2
 8001e68:      	bne	#0x8 <core::fmt::write::h1868e9a96952d100+0xce>
 8001e6a:      	ldr.w	r1, [r9, r3, lsl #3]
 8001e6e:      	ldr	r3, [r1]
 8001e70:      	movs	r1, #0x1
 8001e72:      	b	#0x0 <core::fmt::write::h1868e9a96952d100+0xd0>
 8001e74:      	movs	r1, #0x0
 8001e76:      	ldr	r2, [r0, #-16]
 8001e7a:      	str	r3, [sp, #0x24]
 8001e7c:      	ldr.w	r0, [r9, r2, lsl #3]
 8001e80:      	add.w	r2, r9, r2, lsl #3
 8001e84:      	ldr	r2, [r2, #0x4]
 8001e86:      	str	r1, [sp, #0x20]
 8001e88:      	add	r1, sp, #0x10
 8001e8a:      	blx	r2
 8001e8c:      	cmp	r0, #0x0
 8001e8e:      	bne	#0xaa <core::fmt::write::h1868e9a96952d100+0x196>
 8001e90:      	cmp.w	r10, #0x0
 8001e94:      	beq	#0xae <core::fmt::write::h1868e9a96952d100+0x1a0>
 8001e96:      	ldr	r1, [sp, #0xc]
 8001e98:      	ldrd	r0, r3, [sp, #40]
 8001e9c:      	adds	r2, r1, r5
 8001e9e:      	ldr	r3, [r3, #0xc]
 8001ea0:      	ldrd	r1, r2, [r2, #8]
 8001ea4:      	blx	r3
 8001ea6:      	sub.w	r10, r10, #0x1
 8001eaa:      	add.w	r8, r8, #0x20
 8001eae:      	adds	r5, #0x8
 8001eb0:      	cmp	r0, #0x0
 8001eb2:      	beq	#-0xac <core::fmt::write::h1868e9a96952d100+0x64>
 8001eb4:      	b	#0x84 <core::fmt::write::h1868e9a96952d100+0x196>
 8001eb6:      	ldr.w	r9, [r4, #0x14]
 8001eba:      	ldrd	r6, r10, [r4]
 8001ebe:      	cmp	r9, r10
 8001ec0:      	it	hi
 8001ec2:      	movhi	r9, r10
 8001ec4:      	cmp.w	r9, #0x0
 8001ec8:      	str	r6, [sp, #0xc]
 8001eca:      	beq	#0x4c <core::fmt::write::h1868e9a96952d100+0x174>
 8001ecc:      	ldrd	r3, r2, [r6]
 8001ed0:      	ldr	r6, [r1, #0xc]
 8001ed2:      	ldr	r4, [r4, #0x10]
 8001ed4:      	mov	r1, r3
 8001ed6:      	blx	r6
 8001ed8:      	cbnz	r0, #0x60
 8001eda:      	ldr	r0, [sp, #0xc]
 8001edc:      	sub.w	r5, r9, #0x1
 8001ee0:      	adds	r4, #0x4
 8001ee2:      	add.w	r8, sp, #0x10
 8001ee6:      	add.w	r6, r0, #0x8
 8001eea:      	ldr	r0, [r4, #-4]
 8001eee:      	mov	r1, r8
 8001ef0:      	ldr	r2, [r4]
 8001ef2:      	blx	r2
 8001ef4:      	cbnz	r0, #0x44
 8001ef6:      	cbz	r5, #0x24
 8001ef8:      	ldrd	r0, r3, [sp, #40]
 8001efc:      	ldrd	r1, r2, [r6]
 8001f00:      	ldr	r3, [r3, #0xc]
 8001f02:      	blx	r3
 8001f04:      	subs	r5, #0x1
 8001f06:      	adds	r6, #0x8
 8001f08:      	adds	r4, #0x8
 8001f0a:      	cmp	r0, #0x0
 8001f0c:      	beq	#-0x26 <core::fmt::write::h1868e9a96952d100+0x144>
 8001f0e:      	b	#0x2a <core::fmt::write::h1868e9a96952d100+0x196>
 8001f10:      	mov.w	r9, #0x0
 8001f14:      	cmp	r10, r9
 8001f16:      	bhi	#0x8 <core::fmt::write::h1868e9a96952d100+0x17c>
 8001f18:      	b	#0x32 <core::fmt::write::h1868e9a96952d100+0x1a8>
 8001f1a:      	mov.w	r9, #0x0
 8001f1e:      	cmp	r10, r9
 8001f20:      	bls	#0x2a <core::fmt::write::h1868e9a96952d100+0x1a8>
 8001f22:      	ldr	r2, [sp, #0xc]
 8001f24:      	mov	r1, r9
 8001f26:      	ldrd	r0, r3, [sp, #40]
 8001f2a:      	mov	r6, r9
 8001f2c:      	ldr	r3, [r3, #0xc]
 8001f2e:      	ldr.w	r1, [r2, r1, lsl #3]
 8001f32:      	add.w	r2, r2, r9, lsl #3
 8001f36:      	ldr	r2, [r2, #0x4]
 8001f38:      	blx	r3
 8001f3a:      	cbz	r0, #0x10
 8001f3c:      	movs	r0, #0x1
 8001f3e:      	add	sp, #0x34
 8001f40:      	pop.w	{r8, r9, r10, r11}
 8001f44:      	pop	{r4, r5, r6, r7, pc}
 8001f46:      	ldrd	r10, r9, [sp, #4]
 8001f4a:      	cmp	r10, r9
 8001f4c:      	bhi	#-0x2e <core::fmt::write::h1868e9a96952d100+0x17c>
 8001f4e:      	movs	r0, #0x0
 8001f50:      	add	sp, #0x34
 8001f52:      	pop.w	{r8, r9, r10, r11}
 8001f56:      	pop	{r4, r5, r6, r7, pc}

08001f58 <core::fmt::Formatter::pad_integral::h0f46c90e51306ba8>:
 8001f58:      	push	{r4, r5, r6, r7, lr}
 8001f5a:      	add	r7, sp, #0xc
 8001f5c:      	push.w	{r8, r9, r10, r11}
 8001f60:      	sub	sp, #0xc
 8001f62:      	ldrd	r6, r4, [r7, #8]
 8001f66:      	mov	r10, r3
 8001f68:      	mov	r11, r0
 8001f6a:      	cbz	r1, #0x38
 8001f6c:      	ldr.w	lr, [r11]
 8001f70:      	movs	r1, #0x2b
 8001f72:      	ands	r0, lr, #0x1
 8001f76:      	it	eq
 8001f78:      	moveq.w	r1, #0x110000
 8001f7c:      	add.w	r8, r0, r4
 8001f80:      	lsls.w	r0, lr, #0x1d
 8001f84:      	bpl	#0x2e <core::fmt::Formatter::pad_integral::h0f46c90e51306ba8+0x5e>
 8001f86:      	cmp.w	r10, #0x0
 8001f8a:      	beq	#0x48 <core::fmt::Formatter::pad_integral::h0f46c90e51306ba8+0x7e>
 8001f8c:      	sub.w	r0, r10, #0x1
 8001f90:      	and	r12, r10, #0x3
 8001f94:      	cmp	r0, #0x3
 8001f96:      	bhs	#0x42 <core::fmt::Formatter::pad_integral::h0f46c90e51306ba8+0x84>
 8001f98:      	mov.w	r9, #0x0
 8001f9c:      	mov	r3, r2
 8001f9e:      	cmp.w	r12, #0x0
 8001fa2:      	bne	#0x96 <core::fmt::Formatter::pad_integral::h0f46c90e51306ba8+0xe4>
 8001fa4:      	b	#0xca <core::fmt::Formatter::pad_integral::h0f46c90e51306ba8+0x11a>
 8001fa6:      	ldr.w	lr, [r11]
 8001faa:      	add.w	r8, r4, #0x1
 8001fae:      	movs	r1, #0x2d
 8001fb0:      	lsls.w	r0, lr, #0x1d
 8001fb4:      	bmi	#-0x32 <core::fmt::Formatter::pad_integral::h0f46c90e51306ba8+0x2e>
 8001fb6:      	movs	r2, #0x0
 8001fb8:      	mov.w	r10, #0x0
 8001fbc:      	ldr.w	r0, [r11, #0x8]
 8001fc0:      	cmp	r0, #0x1
 8001fc2:      	beq	#0xb6 <core::fmt::Formatter::pad_integral::h0f46c90e51306ba8+0x124>
 8001fc4:      	mov	r0, r11
 8001fc6:      	mov	r3, r10
 8001fc8:      	bl	#0x232
 8001fcc:      	cmp	r0, #0x0
 8001fce:      	beq.w	#0xec <$t.225+0x16>
 8001fd2:      	movs	r5, #0x1
 8001fd4:      	b	#0x122 <$t.225+0x52>
 8001fd6:      	mov.w	r9, #0x0
 8001fda:      	b	#0x94 <core::fmt::Formatter::pad_integral::h0f46c90e51306ba8+0x11a>
 8001fdc:      	str	r1, [sp, #0x8]
 8001fde:      	bic	r1, r10, #0x3
 8001fe2:      	rsbs	r5, r1, #0
 8001fe4:      	mov.w	r9, #0x0
 8001fe8:      	mov	r1, r2
 8001fea:      	mov	r3, r2
 8001fec:      	strd	r4, r6, [sp]
 8001ff0:      	ldrb	r2, [r3]
 8001ff2:      	ldrb	r6, [r3, #0x1]
 8001ff4:      	ldrb	r0, [r3, #0x2]
 8001ff6:      	and	r2, r2, #0xc0
 8001ffa:      	ldrb	r4, [r3, #0x3]
 8001ffc:      	cmp	r2, #0x80
 8001ffe:      	and	r2, r6, #0xc0
 8002002:      	it	ne
 8002004:      	addne.w	r9, r9, #0x1
 8002008:      	cmp	r2, #0x80
 800200a:      	and	r0, r0, #0xc0
 800200e:      	it	ne
 8002010:      	addne.w	r9, r9, #0x1
 8002014:      	cmp	r0, #0x80
 8002016:      	and	r0, r4, #0xc0
 800201a:      	it	ne
 800201c:      	addne.w	r9, r9, #0x1
 8002020:      	cmp	r0, #0x80
 8002022:      	it	ne
 8002024:      	addne.w	r9, r9, #0x1
 8002028:      	adds	r3, #0x4
 800202a:      	adds	r5, #0x4
 800202c:      	bne	#-0x40 <core::fmt::Formatter::pad_integral::h0f46c90e51306ba8+0x98>
 800202e:      	mov	r2, r1
 8002030:      	ldrd	r4, r6, [sp]
 8002034:      	ldr	r1, [sp, #0x8]
 8002036:      	cmp.w	r12, #0x0
 800203a:      	beq	#0x34 <core::fmt::Formatter::pad_integral::h0f46c90e51306ba8+0x11a>
 800203c:      	ldrb	r0, [r3]
 800203e:      	and	r0, r0, #0xc0
 8002042:      	cmp	r0, #0x80
 8002044:      	it	ne
 8002046:      	addne.w	r9, r9, #0x1
 800204a:      	cmp.w	r12, #0x1
 800204e:      	beq	#0x20 <core::fmt::Formatter::pad_integral::h0f46c90e51306ba8+0x11a>
 8002050:      	ldrb	r0, [r3, #0x1]
 8002052:      	and	r0, r0, #0xc0
 8002056:      	cmp	r0, #0x80
 8002058:      	it	ne
 800205a:      	addne.w	r9, r9, #0x1
 800205e:      	cmp.w	r12, #0x2
 8002062:      	beq	#0xc <core::fmt::Formatter::pad_integral::h0f46c90e51306ba8+0x11a>
 8002064:      	ldrb	r0, [r3, #0x2]
 8002066:      	and	r0, r0, #0xc0
 800206a:      	cmp	r0, #0x80
 800206c:      	it	ne
 800206e:      	addne.w	r9, r9, #0x1
 8002072:      	add	r8, r9
 8002074:      	ldr.w	r0, [r11, #0x8]
 8002078:      	cmp	r0, #0x1
 800207a:      	bne	#-0xba <core::fmt::Formatter::pad_integral::h0f46c90e51306ba8+0x6c>
 800207c:      	ldr.w	r9, [r11, #0xc]
 8002080:      	cmp	r9, r8
 8002082:      	bls	#0x2a <$t.225+0x8>
 8002084:      	lsls.w	r0, lr, #0x1c
 8002088:      	bmi	#0x4c <$t.225+0x30>
 800208a:      	str	r2, [sp, #0x4]
 800208c:      	sub.w	r0, r9, r8
 8002090:      	ldrb.w	r2, [r11, #0x20]
 8002094:      	movs	r5, #0x0
 8002096:      	mov	r9, r0
 8002098:      	cmp	r2, #0x3
 800209a:      	it	eq
 800209c:      	moveq	r2, #0x1
 800209e:      	str	r1, [sp, #0x8]
 80020a0:      	tbb	[pc, r2]

080020a4 <$d.224>:
 80020a4:	45 02 41 02	.word	0x02410245

080020a8 <$t.225>:
 80020a8:      	mov.w	r9, #0x0
 80020ac:      	mov	r5, r0
 80020ae:      	b	#0x7c <$t.227+0xe>
 80020b0:      	mov	r0, r11
 80020b2:      	mov	r3, r10
 80020b4:      	bl	#0x146
 80020b8:      	cmp	r0, #0x0
 80020ba:      	bne.w	#0xf4 <$t.227+0x92>
 80020be:      	ldr.w	r1, [r11, #0x1c]
 80020c2:      	mov	r2, r4
 80020c4:      	ldr.w	r0, [r11, #0x18]
 80020c8:      	ldr	r3, [r1, #0xc]
 80020ca:      	mov	r1, r6
 80020cc:      	add	sp, #0xc
 80020ce:      	pop.w	{r8, r9, r10, r11}
 80020d2:      	pop.w	{r4, r5, r6, r7, lr}
 80020d6:      	bx	r3
 80020d8:      	ldr.w	r0, [r11, #0x4]
 80020dc:      	movs	r5, #0x1
 80020de:      	str	r0, [sp, #0x8]
 80020e0:      	movs	r0, #0x30
 80020e2:      	ldrb.w	r3, [r11, #0x20]
 80020e6:      	str	r3, [sp, #0x4]
 80020e8:      	mov	r3, r10
 80020ea:      	str.w	r0, [r11, #0x4]
 80020ee:      	mov	r0, r11
 80020f0:      	strb.w	r5, [r11, #0x20]
 80020f4:      	bl	#0x106
 80020f8:      	cbz	r0, #0x8
 80020fa:      	mov	r0, r5
 80020fc:      	add	sp, #0xc
 80020fe:      	pop.w	{r8, r9, r10, r11}
 8002102:      	pop	{r4, r5, r6, r7, pc}
 8002104:      	ldrb.w	r2, [r11, #0x20]
 8002108:      	sub.w	r1, r9, r8
 800210c:      	movs	r0, #0x0
 800210e:      	mov	r9, r6
 8002110:      	cmp	r2, #0x3
 8002112:      	it	eq
 8002114:      	moveq	r2, #0x1
 8002116:      	mov	r5, r1
 8002118:      	tbb	[pc, r2]

0800211c <$d.226>:
 800211c:	36 02 33 02	.word	0x02330236

08002120 <$t.227>:
 8002120:      	movs	r5, #0x0
 8002122:      	mov	r0, r1
 8002124:      	b	#0x60 <$t.227+0x68>
 8002126:      	adds	r1, r0, #0x1
 8002128:      	lsrs	r5, r0, #0x1
 800212a:      	lsr.w	r9, r1, #0x1
 800212e:      	adds	r5, #0x1
 8002130:      	subs	r5, #0x1
 8002132:      	beq	#0x10 <$t.227+0x26>
 8002134:      	ldrd	r0, r2, [r11, #24]
 8002138:      	ldr.w	r1, [r11, #0x4]
 800213c:      	ldr	r2, [r2, #0x10]
 800213e:      	blx	r2
 8002140:      	cmp	r0, #0x0
 8002142:      	beq	#-0x16 <$t.227+0x10>
 8002144:      	b	#0x6a <$t.227+0x92>
 8002146:      	ldrd	r2, r1, [sp, #4]
 800214a:      	mov	r0, r11
 800214c:      	mov	r3, r10
 800214e:      	ldr.w	r8, [r11, #0x4]
 8002152:      	bl	#0xa8
 8002156:      	cbnz	r0, #0x58
 8002158:      	ldrd	r0, r1, [r11, #24]
 800215c:      	mov	r2, r4
 800215e:      	ldr	r3, [r1, #0xc]
 8002160:      	mov	r1, r6
 8002162:      	blx	r3
 8002164:      	cbnz	r0, #0x4a
 8002166:      	ldrd	r10, r4, [r11, #24]
 800216a:      	add.w	r6, r9, #0x1
 800216e:      	movs	r5, #0x1
 8002170:      	subs	r6, #0x1
 8002172:      	beq	#0x64 <$t.227+0xba>
 8002174:      	ldr	r2, [r4, #0x10]
 8002176:      	mov	r0, r10
 8002178:      	mov	r1, r8
 800217a:      	blx	r2
 800217c:      	cmp	r0, #0x0
 800217e:      	beq	#-0x12 <$t.227+0x50>
 8002180:      	b	#-0x8a <$t.225+0x52>
 8002182:      	lsrs	r0, r1, #0x1
 8002184:      	adds	r1, #0x1
 8002186:      	lsrs	r5, r1, #0x1
 8002188:      	adds	r6, r0, #0x1
 800218a:      	subs	r6, #0x1
 800218c:      	beq	#0x10 <$t.227+0x80>
 800218e:      	ldrd	r0, r2, [r11, #24]
 8002192:      	ldr.w	r1, [r11, #0x4]
 8002196:      	ldr	r2, [r2, #0x10]
 8002198:      	blx	r2
 800219a:      	cmp	r0, #0x0
 800219c:      	beq	#-0x16 <$t.227+0x6a>
 800219e:      	b	#0x10 <$t.227+0x92>
 80021a0:      	ldrd	r0, r1, [r11, #24]
 80021a4:      	mov	r2, r4
 80021a6:      	ldr	r3, [r1, #0xc]
 80021a8:      	mov	r1, r9
 80021aa:      	ldr.w	r8, [r11, #0x4]
 80021ae:      	blx	r3
 80021b0:      	cbz	r0, #0xa
 80021b2:      	movs	r5, #0x1
 80021b4:      	mov	r0, r5
 80021b6:      	add	sp, #0xc
 80021b8:      	pop.w	{r8, r9, r10, r11}
 80021bc:      	pop	{r4, r5, r6, r7, pc}
 80021be:      	ldrd	r9, r10, [r11, #24]
 80021c2:      	adds	r6, r5, #0x1
 80021c4:      	movs	r5, #0x1
 80021c6:      	subs	r6, #0x1
 80021c8:      	beq	#0x1a <$t.227+0xc6>
 80021ca:      	ldr.w	r2, [r10, #0x10]
 80021ce:      	mov	r0, r9
 80021d0:      	mov	r1, r8
 80021d2:      	blx	r2
 80021d4:      	cmp	r0, #0x0
 80021d6:      	beq	#-0x14 <$t.227+0xa6>
 80021d8:      	b	#-0xe2 <$t.225+0x52>
 80021da:      	movs	r5, #0x0
 80021dc:      	mov	r0, r5
 80021de:      	add	sp, #0xc
 80021e0:      	pop.w	{r8, r9, r10, r11}
 80021e4:      	pop	{r4, r5, r6, r7, pc}
 80021e6:      	ldr	r0, [sp, #0x4]
 80021e8:      	movs	r5, #0x0
 80021ea:      	strb.w	r0, [r11, #0x20]
 80021ee:      	ldr	r0, [sp, #0x8]
 80021f0:      	str.w	r0, [r11, #0x4]
 80021f4:      	mov	r0, r5
 80021f6:      	add	sp, #0xc
 80021f8:      	pop.w	{r8, r9, r10, r11}
 80021fc:      	pop	{r4, r5, r6, r7, pc}

080021fe <core::fmt::Formatter::pad_integral::write_prefix::h7715f7681b656e69>:
 80021fe:      	push	{r4, r5, r6, r7, lr}
 8002200:      	add	r7, sp, #0xc
 8002202:      	str	r11, [sp, #-4]!
 8002206:      	mov	r4, r3
 8002208:      	mov	r5, r2
 800220a:      	mov	r6, r0
 800220c:      	cmp.w	r1, #0x110000
 8002210:      	beq	#0x10 <core::fmt::Formatter::pad_integral::write_prefix::h7715f7681b656e69+0x26>
 8002212:      	ldrd	r0, r2, [r6, #24]
 8002216:      	ldr	r2, [r2, #0x10]
 8002218:      	blx	r2
 800221a:      	cbz	r0, #0x6
 800221c:      	movs	r0, #0x1
 800221e:      	ldr	r11, [sp], #4
 8002222:      	pop	{r4, r5, r6, r7, pc}
 8002224:      	cbz	r5, #0x12
 8002226:      	ldrd	r0, r1, [r6, #24]
 800222a:      	mov	r2, r4
 800222c:      	ldr	r3, [r1, #0xc]
 800222e:      	mov	r1, r5
 8002230:      	ldr	r11, [sp], #4
 8002234:      	pop.w	{r4, r5, r6, r7, lr}
 8002238:      	bx	r3
 800223a:      	movs	r0, #0x0
 800223c:      	ldr	r11, [sp], #4
 8002240:      	pop	{r4, r5, r6, r7, pc}
 8002242:      	bmi	#-0x58 <$t.227+0xce>

08002244 <core::fmt::Formatter::pad::hc1300ad2e8b96f96>:
 8002244:      	push	{r4, r5, r6, r7, lr}
 8002246:      	add	r7, sp, #0xc
 8002248:      	push.w	{r8, r9, r10, r11}
 800224c:      	sub	sp, #0x4
 800224e:      	ldr.w	lr, [r0, #0x8]
 8002252:      	mov	r11, r0
 8002254:      	ldr	r0, [r0, #0x10]
 8002256:      	mov	r9, r2
 8002258:      	mov	r4, r1
 800225a:      	cmp.w	lr, #0x1
 800225e:      	bne	#0x26 <core::fmt::Formatter::pad::hc1300ad2e8b96f96+0x44>
 8002260:      	cmp	r0, #0x1
 8002262:      	beq	#0x28 <core::fmt::Formatter::pad::hc1300ad2e8b96f96+0x4a>
 8002264:      	cmp.w	r9, #0x0
 8002268:      	beq.w	#0x23c <core::fmt::Formatter::pad::hc1300ad2e8b96f96+0x264>
 800226c:      	sub.w	lr, r9, #0x1
 8002270:      	and	r12, r9, #0x3
 8002274:      	cmp.w	lr, #0x3
 8002278:      	bhs	#0xd4 <core::fmt::Formatter::pad::hc1300ad2e8b96f96+0x10c>
 800227a:      	movs	r3, #0x0
 800227c:      	mov	r1, r4
 800227e:      	cmp.w	r12, #0x0
 8002282:      	bne.w	#0x114 <core::fmt::Formatter::pad::hc1300ad2e8b96f96+0x156>
 8002286:      	b	#0x140 <core::fmt::Formatter::pad::hc1300ad2e8b96f96+0x186>
 8002288:      	cmp	r0, #0x1
 800228a:      	bne.w	#0x24a <$t.231+0x8>
 800228e:      	ldr.w	r3, [r11, #0x14]
 8002292:      	add.w	r5, r4, r9
 8002296:      	movs	r2, #0x0
 8002298:      	mov	r6, r4
 800229a:      	str	r4, [sp]
 800229c:      	cbnz	r3, #0x4a
 800229e:      	cmp	r5, r6
 80022a0:      	beq	#0x9e <core::fmt::Formatter::pad::hc1300ad2e8b96f96+0xfe>
 80022a2:      	mov	r1, r6
 80022a4:      	ldr	r4, [sp]
 80022a6:      	ldrsb	r0, [r1], #1
 80022aa:      	cmp.w	r0, #0xffffffff
 80022ae:      	ble.w	#0x134 <core::fmt::Formatter::pad::hc1300ad2e8b96f96+0x1a2>
 80022b2:      	cmp	r2, #0x0
 80022b4:      	it	ne
 80022b6:      	cmpne	r2, r9
 80022b8:      	bne.w	#0x1c0 <core::fmt::Formatter::pad::hc1300ad2e8b96f96+0x238>
 80022bc:      	mov	r0, r4
 80022be:      	b	#0x1cc <core::fmt::Formatter::pad::hc1300ad2e8b96f96+0x24a>
 80022c0:      	ldrb	r6, [r1], #1
 80022c4:      	and	r8, r6, #0x3f
 80022c8:      	mov	r6, r1
 80022ca:      	mov.w	r1, #0x1c0000
 80022ce:      	and.w	r0, r1, r0, lsl #18
 80022d2:      	orr.w	r0, r0, r10, lsl #12
 80022d6:      	orr.w	r0, r0, r12, lsl #6
 80022da:      	add	r0, r8
 80022dc:      	cmp.w	r0, #0x110000
 80022e0:      	beq	#0x5e <core::fmt::Formatter::pad::hc1300ad2e8b96f96+0xfe>
 80022e2:      	subs	r0, r6, r4
 80022e4:      	subs	r3, #0x1
 80022e6:      	add	r2, r0
 80022e8:      	beq	#-0x4e <core::fmt::Formatter::pad::hc1300ad2e8b96f96+0x5a>
 80022ea:      	cmp	r5, r6
 80022ec:      	beq	#0x52 <core::fmt::Formatter::pad::hc1300ad2e8b96f96+0xfe>
 80022ee:      	mov	r4, r6
 80022f0:      	ldrsb	r0, [r6], #1
 80022f4:      	cmp.w	r0, #0xffffffff
 80022f8:      	bgt	#-0x1a <core::fmt::Formatter::pad::hc1300ad2e8b96f96+0x9e>
 80022fa:      	uxtb	r0, r0
 80022fc:      	cmp	r6, r5
 80022fe:      	beq	#0xe <core::fmt::Formatter::pad::hc1300ad2e8b96f96+0xcc>
 8002300:      	ldrb	r1, [r4, #0x1]
 8002302:      	adds	r6, r4, #0x2
 8002304:      	and	r10, r1, #0x3f
 8002308:      	mov	r1, r6
 800230a:      	cmp	r0, #0xe0
 800230c:      	blo	#-0x2e <core::fmt::Formatter::pad::hc1300ad2e8b96f96+0x9e>
 800230e:      	b	#0x8 <core::fmt::Formatter::pad::hc1300ad2e8b96f96+0xd6>
 8002310:      	mov.w	r10, #0x0
 8002314:      	mov	r1, r5
 8002316:      	cmp	r0, #0xe0
 8002318:      	blo	#-0x3a <core::fmt::Formatter::pad::hc1300ad2e8b96f96+0x9e>
 800231a:      	cmp	r1, r5
 800231c:      	beq	#0xe <core::fmt::Formatter::pad::hc1300ad2e8b96f96+0xea>
 800231e:      	ldrb	r6, [r1], #1
 8002322:      	and	r12, r6, #0x3f
 8002326:      	mov	r6, r1
 8002328:      	cmp	r0, #0xf0
 800232a:      	blo	#-0x4c <core::fmt::Formatter::pad::hc1300ad2e8b96f96+0x9e>
 800232c:      	b	#0x8 <core::fmt::Formatter::pad::hc1300ad2e8b96f96+0xf4>
 800232e:      	mov.w	r12, #0x0
 8002332:      	mov	r1, r5
 8002334:      	cmp	r0, #0xf0
 8002336:      	blo	#-0x58 <core::fmt::Formatter::pad::hc1300ad2e8b96f96+0x9e>
 8002338:      	cmp	r1, r5
 800233a:      	bne	#-0x7e <core::fmt::Formatter::pad::hc1300ad2e8b96f96+0x7c>
 800233c:      	mov.w	r8, #0x0
 8002340:      	b	#-0x7a <core::fmt::Formatter::pad::hc1300ad2e8b96f96+0x86>
 8002342:      	mov	r2, r9
 8002344:      	ldr	r4, [sp]
 8002346:      	cmp.w	lr, #0x1
 800234a:      	bne.w	#0x24a <$t.231+0xc8>
 800234e:      	b	#0x14c <core::fmt::Formatter::pad::hc1300ad2e8b96f96+0x25a>
 8002350:      	bic	r1, r9, #0x3
 8002354:      	movs	r3, #0x0
 8002356:      	rsbs	r6, r1, #0
 8002358:      	mov	r8, r4
 800235a:      	mov	r1, r4
 800235c:      	ldrb	r5, [r1]
 800235e:      	ldrb	r4, [r1, #0x1]
 8002360:      	ldrb	r0, [r1, #0x2]
 8002362:      	and	r5, r5, #0xc0
 8002366:      	ldrb	r2, [r1, #0x3]
 8002368:      	cmp	r5, #0x80
 800236a:      	and	r4, r4, #0xc0
 800236e:      	it	ne
 8002370:      	addne	r3, #0x1
 8002372:      	cmp	r4, #0x80
 8002374:      	and	r0, r0, #0xc0
 8002378:      	it	ne
 800237a:      	addne	r3, #0x1
 800237c:      	cmp	r0, #0x80
 800237e:      	and	r0, r2, #0xc0
 8002382:      	it	ne
 8002384:      	addne	r3, #0x1
 8002386:      	cmp	r0, #0x80
 8002388:      	it	ne
 800238a:      	addne	r3, #0x1
 800238c:      	adds	r1, #0x4
 800238e:      	adds	r6, #0x4
 8002390:      	bne	#-0x38 <core::fmt::Formatter::pad::hc1300ad2e8b96f96+0x118>
 8002392:      	mov	r4, r8
 8002394:      	cmp.w	r12, #0x0
 8002398:      	beq	#0x2e <core::fmt::Formatter::pad::hc1300ad2e8b96f96+0x186>
 800239a:      	ldrb	r0, [r1]
 800239c:      	and	r0, r0, #0xc0
 80023a0:      	cmp	r0, #0x80
 80023a2:      	it	ne
 80023a4:      	addne	r3, #0x1
 80023a6:      	cmp.w	r12, #0x1
 80023aa:      	beq	#0x1c <core::fmt::Formatter::pad::hc1300ad2e8b96f96+0x186>
 80023ac:      	ldrb	r0, [r1, #0x1]
 80023ae:      	and	r0, r0, #0xc0
 80023b2:      	cmp	r0, #0x80
 80023b4:      	it	ne
 80023b6:      	addne	r3, #0x1
 80023b8:      	cmp.w	r12, #0x2
 80023bc:      	beq	#0xa <core::fmt::Formatter::pad::hc1300ad2e8b96f96+0x186>
 80023be:      	ldrb	r0, [r1, #0x2]
 80023c0:      	and	r0, r0, #0xc0
 80023c4:      	cmp	r0, #0x80
 80023c6:      	it	ne
 80023c8:      	addne	r3, #0x1
 80023ca:      	ldr.w	r8, [r11, #0xc]
 80023ce:      	cmp	r3, r8
 80023d0:      	bhs.w	#0x104 <$t.231+0x8>
 80023d4:      	cmp.w	lr, #0x3
 80023d8:      	bhs	#0x24 <core::fmt::Formatter::pad::hc1300ad2e8b96f96+0x1bc>
 80023da:      	movs	r2, #0x0
 80023dc:      	mov	r3, r4
 80023de:      	cmp.w	r12, #0x0
 80023e2:      	bne	#0x64 <core::fmt::Formatter::pad::hc1300ad2e8b96f96+0x206>
 80023e4:      	b	#0xcc <core::fmt::Formatter::pad::hc1300ad2e8b96f96+0x270>
 80023e6:      	uxtb	r0, r0
 80023e8:      	cmp	r1, r5
 80023ea:      	beq.w	#0x154 <$t.231+0x72>
 80023ee:      	ldrb	r3, [r6, #0x1]
 80023f0:      	adds	r1, r6, #0x2
 80023f2:      	and	r3, r3, #0x3f
 80023f6:      	lsls	r3, r3, #0x6
 80023f8:      	cmp	r0, #0xe0
 80023fa:      	bhs.w	#0x14e <$t.231+0x7c>
 80023fe:      	b	#-0x150 <core::fmt::Formatter::pad::hc1300ad2e8b96f96+0x6e>
 8002400:      	bic	r0, r9, #0x3
 8002404:      	movs	r2, #0x0
 8002406:      	rsbs	r6, r0, #0
 8002408:      	mov	lr, r4
 800240a:      	mov	r3, r4
 800240c:      	ldrb	r0, [r3]
 800240e:      	ldrb	r5, [r3, #0x1]
 8002410:      	and	r0, r0, #0xc0
 8002414:      	ldrb	r4, [r3, #0x2]
 8002416:      	ldrb	r1, [r3, #0x3]
 8002418:      	cmp	r0, #0x80
 800241a:      	and	r0, r5, #0xc0
 800241e:      	it	ne
 8002420:      	addne	r2, #0x1
 8002422:      	cmp	r0, #0x80
 8002424:      	and	r0, r4, #0xc0
 8002428:      	it	ne
 800242a:      	addne	r2, #0x1
 800242c:      	cmp	r0, #0x80
 800242e:      	and	r0, r1, #0xc0
 8002432:      	it	ne
 8002434:      	addne	r2, #0x1
 8002436:      	cmp	r0, #0x80
 8002438:      	it	ne
 800243a:      	addne	r2, #0x1
 800243c:      	adds	r3, #0x4
 800243e:      	adds	r6, #0x4
 8002440:      	bne	#-0x38 <core::fmt::Formatter::pad::hc1300ad2e8b96f96+0x1c8>
 8002442:      	mov	r4, lr
 8002444:      	cmp.w	r12, #0x0
 8002448:      	beq	#0x68 <core::fmt::Formatter::pad::hc1300ad2e8b96f96+0x270>
 800244a:      	ldrb	r0, [r3]
 800244c:      	and	r0, r0, #0xc0
 8002450:      	cmp	r0, #0x80
 8002452:      	it	ne
 8002454:      	addne	r2, #0x1
 8002456:      	cmp.w	r12, #0x1
 800245a:      	beq	#0x56 <core::fmt::Formatter::pad::hc1300ad2e8b96f96+0x270>
 800245c:      	ldrb	r0, [r3, #0x1]
 800245e:      	and	r0, r0, #0xc0
 8002462:      	cmp	r0, #0x80
 8002464:      	it	ne
 8002466:      	addne	r2, #0x1
 8002468:      	cmp.w	r12, #0x2
 800246c:      	beq	#0x44 <core::fmt::Formatter::pad::hc1300ad2e8b96f96+0x270>
 800246e:      	ldrb	r0, [r3, #0x2]
 8002470:      	and	r0, r0, #0xc0
 8002474:      	cmp	r0, #0x80
 8002476:      	it	ne
 8002478:      	addne	r2, #0x1
 800247a:      	b	#0x36 <core::fmt::Formatter::pad::hc1300ad2e8b96f96+0x270>
 800247c:      	cmp	r2, r9
 800247e:      	bhs	#0x8 <core::fmt::Formatter::pad::hc1300ad2e8b96f96+0x246>
 8002480:      	ldrsb	r0, [r4, r2]
 8002482:      	cmn.w	r0, #0x40
 8002486:      	bge.w	#-0x1ce <core::fmt::Formatter::pad::hc1300ad2e8b96f96+0x78>
 800248a:      	movs	r0, #0x0
 800248c:      	movs	r2, #0x0
 800248e:      	cmp	r0, #0x0
 8002490:      	ite	eq
 8002492:      	moveq	r2, r9
 8002494:      	movne	r4, r0
 8002496:      	cmp.w	lr, #0x1
 800249a:      	bne.w	#0xfa <$t.231+0xc8>
 800249e:      	mov	r9, r2
 80024a0:      	cmp.w	r9, #0x0
 80024a4:      	bne.w	#-0x23c <core::fmt::Formatter::pad::hc1300ad2e8b96f96+0x28>
 80024a8:      	ldr.w	r8, [r11, #0xc]
 80024ac:      	cmp.w	r8, #0x0
 80024b0:      	beq	#0x24 <$t.231+0x8>
 80024b2:      	movs	r2, #0x0
 80024b4:      	ldrb.w	r0, [r11, #0x20]
 80024b8:      	sub.w	r1, r8, r2
 80024bc:      	mov	r5, r4
 80024be:      	subs	r3, r0, #0x3
 80024c0:      	mov	r10, r1
 80024c2:      	it	ne
 80024c4:      	movne	r3, r0
 80024c6:      	movs	r0, #0x0
 80024c8:      	tbb	[pc, r3]

080024cc <$d.230>:
 80024cc:	10 02 0c 02	.word	0x020c0210

080024d0 <$t.231>:
 80024d0:      	mov.w	r10, #0x0
 80024d4:      	mov	r0, r1
 80024d6:      	b	#0x12 <$t.231+0x1c>
 80024d8:      	ldr.w	r1, [r11, #0x1c]
 80024dc:      	mov	r2, r9
 80024de:      	ldr.w	r0, [r11, #0x18]
 80024e2:      	b	#0xb6 <$t.231+0xcc>
 80024e4:      	lsrs	r0, r1, #0x1
 80024e6:      	adds	r1, #0x1
 80024e8:      	lsr.w	r10, r1, #0x1
 80024ec:      	adds	r4, r0, #0x1
 80024ee:      	subs	r4, #0x1
 80024f0:      	beq	#0x10 <$t.231+0x34>
 80024f2:      	ldrd	r0, r2, [r11, #24]
 80024f6:      	ldr.w	r1, [r11, #0x4]
 80024fa:      	ldr	r2, [r2, #0x10]
 80024fc:      	blx	r2
 80024fe:      	cmp	r0, #0x0
 8002500:      	beq	#-0x16 <$t.231+0x1e>
 8002502:      	b	#0x28 <$t.231+0x5e>
 8002504:      	ldrd	r0, r1, [r11, #24]
 8002508:      	mov	r2, r9
 800250a:      	ldr	r3, [r1, #0xc]
 800250c:      	mov	r1, r5
 800250e:      	ldr.w	r8, [r11, #0x4]
 8002512:      	blx	r3
 8002514:      	cbnz	r0, #0x16
 8002516:      	ldrd	r6, r5, [r11, #24]
 800251a:      	add.w	r4, r10, #0x1
 800251e:      	subs	r4, #0x1
 8002520:      	beq	#0x14 <$t.231+0x68>
 8002522:      	ldr	r2, [r5, #0x10]
 8002524:      	mov	r0, r6
 8002526:      	mov	r1, r8
 8002528:      	blx	r2
 800252a:      	cmp	r0, #0x0
 800252c:      	beq	#-0x12 <$t.231+0x4e>
 800252e:      	movs	r0, #0x1
 8002530:      	add	sp, #0x4
 8002532:      	pop.w	{r8, r9, r10, r11}
 8002536:      	pop	{r4, r5, r6, r7, pc}
 8002538:      	movs	r0, #0x0
 800253a:      	add	sp, #0x4
 800253c:      	pop.w	{r8, r9, r10, r11}
 8002540:      	pop	{r4, r5, r6, r7, pc}
 8002542:      	movs	r3, #0x0
 8002544:      	mov	r1, r5
 8002546:      	cmp	r0, #0xe0
 8002548:      	blo.w	#-0x29a <core::fmt::Formatter::pad::hc1300ad2e8b96f96+0x6e>
 800254c:      	cmp	r1, r5
 800254e:      	beq	#0xe <$t.231+0x90>
 8002550:      	ldrb	r6, [r1], #1
 8002554:      	and	r6, r6, #0x3f
 8002558:      	cmp	r0, #0xf0
 800255a:      	blo.w	#-0x2ac <core::fmt::Formatter::pad::hc1300ad2e8b96f96+0x6e>
 800255e:      	b	#0x8 <$t.231+0x9a>
 8002560:      	movs	r6, #0x0
 8002562:      	mov	r1, r5
 8002564:      	cmp	r0, #0xf0
 8002566:      	blo.w	#-0x2b8 <core::fmt::Formatter::pad::hc1300ad2e8b96f96+0x6e>
 800256a:      	orrs	r3, r6
 800256c:      	mov.w	r6, #0x1c0000
 8002570:      	and.w	r0, r6, r0, lsl #18
 8002574:      	cmp	r1, r5
 8002576:      	orr.w	r0, r0, r3, lsl #6
 800257a:      	itte	ne
 800257c:      	ldrbne	r1, [r1]
 800257e:      	andne	r1, r1, #0x3f
 8002582:      	moveq	r1, #0x0
 8002584:      	add	r0, r1
 8002586:      	cmp.w	r0, #0x110000
 800258a:      	bne.w	#-0x2dc <core::fmt::Formatter::pad::hc1300ad2e8b96f96+0x6e>
 800258e:      	mov	r2, r9
 8002590:      	cmp.w	lr, #0x1
 8002594:      	beq.w	#-0xfa <core::fmt::Formatter::pad::hc1300ad2e8b96f96+0x25a>
 8002598:      	ldrd	r0, r1, [r11, #24]
 800259c:      	ldr	r3, [r1, #0xc]
 800259e:      	mov	r1, r4
 80025a0:      	add	sp, #0x4
 80025a2:      	pop.w	{r8, r9, r10, r11}
 80025a6:      	pop.w	{r4, r5, r6, r7, lr}
 80025aa:      	bx	r3

080025ac <core::slice::index::slice_start_index_len_fail::hd0e6a5910dacdb34>:
 80025ac:      	push	{r7, lr}
 80025ae:      	mov	r7, sp
 80025b0:      	sub	sp, #0x30
 80025b2:      	strd	r0, r1, [sp]
 80025b6:      	add	r1, sp, #0x20
 80025b8:      	movs	r0, #0x2
 80025ba:      	str	r1, [sp, #0x18]
 80025bc:      	movs	r1, #0x0
 80025be:      	str	r0, [sp, #0x1c]
 80025c0:      	str	r1, [sp, #0x14]
 80025c2:      	strd	r0, r1, [sp, #12]
 80025c6:      	movw	r0, #0x3a00
 80025ca:      	movt	r0, #0x800
 80025ce:      	add	r1, sp, #0x4
 80025d0:      	str	r0, [sp, #0x8]
 80025d2:      	movw	r0, #0x2745
 80025d6:      	movt	r0, #0x800
 80025da:      	str	r0, [sp, #0x2c]
 80025dc:      	strd	r0, r1, [sp, #36]
 80025e0:      	mov	r0, sp
 80025e2:      	str	r0, [sp, #0x20]
 80025e4:      	add	r0, sp, #0x8
 80025e6:      	mov	r1, r2
 80025e8:      	bl	#-0x86c
 80025ec:      	trap

080025ee <core::slice::index::slice_end_index_len_fail::h3ef8cd4ea419f38e>:
 80025ee:      	push	{r7, lr}
 80025f0:      	mov	r7, sp
 80025f2:      	sub	sp, #0x30
 80025f4:      	strd	r0, r1, [sp]
 80025f8:      	add	r1, sp, #0x20
 80025fa:      	movs	r0, #0x2
 80025fc:      	str	r1, [sp, #0x18]
 80025fe:      	movs	r1, #0x0
 8002600:      	str	r0, [sp, #0x1c]
 8002602:      	str	r1, [sp, #0x14]
 8002604:      	strd	r0, r1, [sp, #12]
 8002608:      	movw	r0, #0x3a10
 800260c:      	movt	r0, #0x800
 8002610:      	add	r1, sp, #0x4
 8002612:      	str	r0, [sp, #0x8]
 8002614:      	movw	r0, #0x2745
 8002618:      	movt	r0, #0x800
 800261c:      	str	r0, [sp, #0x2c]
 800261e:      	strd	r0, r1, [sp, #36]
 8002622:      	mov	r0, sp
 8002624:      	str	r0, [sp, #0x20]
 8002626:      	add	r0, sp, #0x8
 8002628:      	mov	r1, r2
 800262a:      	bl	#-0x8ae
 800262e:      	trap

08002630 <core::slice::index::slice_index_order_fail::h3ca6af8212d65e56>:
 8002630:      	push	{r7, lr}
 8002632:      	mov	r7, sp
 8002634:      	sub	sp, #0x30
 8002636:      	strd	r0, r1, [sp]
 800263a:      	add	r1, sp, #0x20
 800263c:      	movs	r0, #0x2
 800263e:      	str	r1, [sp, #0x18]
 8002640:      	movs	r1, #0x0
 8002642:      	str	r0, [sp, #0x1c]
 8002644:      	str	r1, [sp, #0x14]
 8002646:      	strd	r0, r1, [sp, #12]
 800264a:      	movw	r0, #0x3a44
 800264e:      	movt	r0, #0x800
 8002652:      	add	r1, sp, #0x4
 8002654:      	str	r0, [sp, #0x8]
 8002656:      	movw	r0, #0x2745
 800265a:      	movt	r0, #0x800
 800265e:      	str	r0, [sp, #0x2c]
 8002660:      	strd	r0, r1, [sp, #36]
 8002664:      	mov	r0, sp
 8002666:      	str	r0, [sp, #0x20]
 8002668:      	add	r0, sp, #0x8
 800266a:      	mov	r1, r2
 800266c:      	bl	#-0x8f0
 8002670:      	trap

08002672 <core::fmt::num::<impl core::fmt::UpperHex for usize>::fmt::hc5a4ed455774cf5b>:
 8002672:      	push	{r4, r5, r7, lr}
 8002674:      	add	r7, sp, #0x8
 8002676:      	sub	sp, #0x88
 8002678:      	ldr	r0, [r0]
 800267a:      	add.w	lr, sp, #0x8
 800267e:      	mov	r12, r1
 8002680:      	movs	r2, #0x81
 8002682:      	movs	r1, #0x0
 8002684:      	and	r3, r0, #0xf
 8002688:      	add.w	r4, r3, #0x37
 800268c:      	cmp	r3, #0xa
 800268e:      	it	lo
 8002690:      	addlo.w	r4, r3, #0x30
 8002694:      	add.w	r3, lr, r2
 8002698:      	cmp.w	r1, r0, lsr #4
 800269c:      	strb	r4, [r3, #-2]
 80026a0:      	beq	#0x5c <core::fmt::num::<impl core::fmt::UpperHex for usize>::fmt::hc5a4ed455774cf5b+0x8e>
 80026a2:      	lsrs	r4, r0, #0x4
 80026a4:      	and	r4, r4, #0xf
 80026a8:      	add.w	r5, r4, #0x37
 80026ac:      	cmp	r4, #0xa
 80026ae:      	it	lo
 80026b0:      	addlo.w	r5, r4, #0x30
 80026b4:      	cmp.w	r1, r0, lsr #8
 80026b8:      	strb	r5, [r3, #-3]
 80026bc:      	beq	#0x46 <core::fmt::num::<impl core::fmt::UpperHex for usize>::fmt::hc5a4ed455774cf5b+0x94>
 80026be:      	lsrs	r4, r0, #0x8
 80026c0:      	and	r4, r4, #0xf
 80026c4:      	add.w	r5, r4, #0x37
 80026c8:      	cmp	r4, #0xa
 80026ca:      	it	lo
 80026cc:      	addlo.w	r5, r4, #0x30
 80026d0:      	cmp.w	r1, r0, lsr #12
 80026d4:      	strb	r5, [r3, #-4]
 80026d8:      	beq	#0x30 <core::fmt::num::<impl core::fmt::UpperHex for usize>::fmt::hc5a4ed455774cf5b+0x9a>
 80026da:      	lsrs	r4, r0, #0xc
 80026dc:      	subs	r2, #0x4
 80026de:      	and	r4, r4, #0xf
 80026e2:      	add.w	r5, r4, #0x37
 80026e6:      	cmp	r4, #0xa
 80026e8:      	it	lo
 80026ea:      	addlo.w	r5, r4, #0x30
 80026ee:      	strb	r5, [r3, #-5]
 80026f2:      	lsrs	r3, r0, #0x10
 80026f4:      	cmp.w	r1, r0, lsr #16
 80026f8:      	mov	r0, r3
 80026fa:      	bne	#-0x7a <core::fmt::num::<impl core::fmt::UpperHex for usize>::fmt::hc5a4ed455774cf5b+0x12>
 80026fc:      	subs	r0, r2, #0x1
 80026fe:      	b	#0xe <core::fmt::num::<impl core::fmt::UpperHex for usize>::fmt::hc5a4ed455774cf5b+0x9e>
 8002700:      	subs	r0, r2, #0x2
 8002702:      	subs	r2, #0x1
 8002704:      	b	#0x8 <core::fmt::num::<impl core::fmt::UpperHex for usize>::fmt::hc5a4ed455774cf5b+0x9e>
 8002706:      	subs	r0, r2, #0x3
 8002708:      	subs	r2, #0x2
 800270a:      	b	#0x2 <core::fmt::num::<impl core::fmt::UpperHex for usize>::fmt::hc5a4ed455774cf5b+0x9e>
 800270c:      	subs	r0, r2, #0x4
 800270e:      	subs	r2, #0x3
 8002710:      	cmp	r0, #0x81
 8002712:      	bhs	#0x1e <core::fmt::num::<impl core::fmt::UpperHex for usize>::fmt::hc5a4ed455774cf5b+0xc2>
 8002714:      	rsb.w	r1, r2, #0x81
 8002718:      	movw	r2, #0x3900
 800271c:      	add	r0, lr
 800271e:      	movt	r2, #0x800
 8002722:      	strd	r0, r1, [sp]
 8002726:      	mov	r0, r12
 8002728:      	movs	r1, #0x1
 800272a:      	movs	r3, #0x2
 800272c:      	bl	#-0x7d8
 8002730:      	add	sp, #0x88
 8002732:      	pop	{r4, r5, r7, pc}
 8002734:      	movw	r2, #0x38f0
 8002738:      	movs	r1, #0x80
 800273a:      	movt	r2, #0x800
 800273e:      	bl	#-0x196
 8002742:      	trap

08002744 <core::fmt::num::imp::<impl core::fmt::Display for usize>::fmt::ha5c4ffa8bacf10bb>:
 8002744:      	push	{r4, r5, r6, r7, lr}
 8002746:      	add	r7, sp, #0xc
 8002748:      	push.w	{r8, r9, r10, r11}
 800274c:      	sub	sp, #0x34
 800274e:      	ldr	r4, [r0]
 8002750:      	movw	r0, #0x851f
 8002754:      	movw	r8, #0x3902
 8002758:      	mov	r5, r1
 800275a:      	movw	r1, #0x2710
 800275e:      	cmp	r4, r1
 8002760:      	movt	r0, #0x51eb
 8002764:      	movt	r8, #0x800
 8002768:      	blo	#0x76 <core::fmt::num::imp::<impl core::fmt::Display for usize>::fmt::ha5c4ffa8bacf10bb+0x9e>
 800276a:      	movw	r9, #0x1759
 800276e:      	movw	lr, #0xe0ff
 8002772:      	add.w	r11, sp, #0xc
 8002776:      	movs	r3, #0x0
 8002778:      	movt	r9, #0xd1b7
 800277c:      	mov.w	r10, #0x64
 8002780:      	movt	lr, #0x5f5
 8002784:      	str	r5, [sp, #0x8]
 8002786:      	umull	r2, r5, r4, r9
 800278a:      	cmp	r4, lr
 800278c:      	lsr.w	r2, r5, #0xd
 8002790:      	mls	r5, r2, r1, r4
 8002794:      	add.w	r1, r11, r3
 8002798:      	sub.w	r3, r3, #0x4
 800279c:      	mov	r4, r2
 800279e:      	uxth	r6, r5
 80027a0:      	umull	r6, r12, r6, r0
 80027a4:      	lsr.w	r6, r12, #0x5
 80027a8:      	mls	r5, r6, r10, r5
 80027ac:      	ldrh.w	r6, [r8, r6, lsl #1]
 80027b0:      	strh.w	r6, [r1, #0x23]
 80027b4:      	uxth	r5, r5
 80027b6:      	ldrh.w	r5, [r8, r5, lsl #1]
 80027ba:      	strh.w	r5, [r1, #0x25]
 80027be:      	movw	r1, #0x2710
 80027c2:      	bhi	#-0x40 <core::fmt::num::imp::<impl core::fmt::Display for usize>::fmt::ha5c4ffa8bacf10bb+0x42>
 80027c4:      	ldr	r5, [sp, #0x8]
 80027c6:      	add.w	r1, r3, #0x27
 80027ca:      	mov	r4, r2
 80027cc:      	cmp	r4, #0x63
 80027ce:      	bgt	#0x16 <core::fmt::num::imp::<impl core::fmt::Display for usize>::fmt::ha5c4ffa8bacf10bb+0xa4>
 80027d0:      	mov	r3, r4
 80027d2:      	cmp	r3, #0x9
 80027d4:      	ble	#0x2e <core::fmt::num::imp::<impl core::fmt::Display for usize>::fmt::ha5c4ffa8bacf10bb+0xc2>
 80027d6:      	subs	r1, #0x2
 80027d8:      	ldrh.w	r0, [r8, r3, lsl #1]
 80027dc:      	add	r2, sp, #0xc
 80027de:      	strh	r0, [r2, r1]
 80027e0:      	b	#0x2c <core::fmt::num::imp::<impl core::fmt::Display for usize>::fmt::ha5c4ffa8bacf10bb+0xcc>
 80027e2:      	movs	r1, #0x27
 80027e4:      	cmp	r4, #0x63
 80027e6:      	ble	#-0x1a <core::fmt::num::imp::<impl core::fmt::Display for usize>::fmt::ha5c4ffa8bacf10bb+0x8c>
 80027e8:      	uxth	r2, r4
 80027ea:      	subs	r1, #0x2
 80027ec:      	umull	r2, r3, r2, r0
 80027f0:      	add	r6, sp, #0xc
 80027f2:      	movs	r2, #0x64
 80027f4:      	lsrs	r3, r3, #0x5
 80027f6:      	mls	r2, r3, r2, r4
 80027fa:      	uxth	r2, r2
 80027fc:      	ldrh.w	r2, [r8, r2, lsl #1]
 8002800:      	strh	r2, [r6, r1]
 8002802:      	cmp	r3, #0x9
 8002804:      	bgt	#-0x32 <core::fmt::num::imp::<impl core::fmt::Display for usize>::fmt::ha5c4ffa8bacf10bb+0x92>
 8002806:      	subs	r1, #0x1
 8002808:      	add	r2, sp, #0xc
 800280a:      	add.w	r0, r3, #0x30
 800280e:      	strb	r0, [r2, r1]
 8002810:      	rsb.w	r0, r1, #0x27
 8002814:      	add	r2, sp, #0xc
 8002816:      	add	r1, r2
 8002818:      	movw	r2, #0x3878
 800281c:      	strd	r1, r0, [sp]
 8002820:      	movt	r2, #0x800
 8002824:      	mov	r0, r5
 8002826:      	movs	r1, #0x1
 8002828:      	movs	r3, #0x0
 800282a:      	bl	#-0x8d6
 800282e:      	add	sp, #0x34
 8002830:      	pop.w	{r8, r9, r10, r11}
 8002834:      	pop	{r4, r5, r6, r7, pc}

08002836 <<&T as core::fmt::Display>::fmt::h24f2dabfb0741f0a>:
 8002836:      	push	{r4, r5, r6, r7, lr}
 8002838:      	add	r7, sp, #0xc
 800283a:      	push.w	{r8, r9, r11}
 800283e:      	sub	sp, #0x18
 8002840:      	ldr.w	lr, [r0]
 8002844:      	mov	r2, sp
 8002846:      	ldrd	r12, r1, [r1, #24]
 800284a:      	mov	r3, r2
 800284c:      	ldm.w	lr, {r0, r4, r5, r6, r8, r9}
 8002850:      	stm.w	r3, {r0, r4, r5, r6, r8, r9}
 8002854:      	mov	r0, r12
 8002856:      	bl	#-0xab4
 800285a:      	add	sp, #0x18
 800285c:      	pop.w	{r8, r9, r11}
 8002860:      	pop	{r4, r5, r6, r7, pc}

08002862 <<&T as core::fmt::Display>::fmt::h3c6d90e0f0bf6a31>:
 8002862:      	mov	r3, r1
 8002864:      	ldrd	r1, r2, [r0]
 8002868:      	mov	r0, r3
 800286a:      	b.w	#-0x62a <core::fmt::Formatter::pad::hc1300ad2e8b96f96>

0800286e <<&T as core::fmt::Display>::fmt::hd09c02ccb696ea1c>:
 800286e:      	ldr	r0, [r0]
 8002870:      	mov	r3, r1
 8002872:      	ldrd	r1, r2, [r0]
 8002876:      	mov	r0, r3
 8002878:      	b.w	#-0x638 <core::fmt::Formatter::pad::hc1300ad2e8b96f96>

0800287c <rust_begin_unwind>:
; fn panic(info: &PanicInfo) -> ! {
 800287c:      	push	{r7, lr}
 800287e:      	mov	r7, sp
 8002880:      	sub	sp, #0x48
 8002882:      	str	r0, [sp, #0x10]
;     interrupt::disable();
 8002884:      	bl	#0xbc8
 8002888:      	b	#-0x2 <rust_begin_unwind+0xe>
;     let itm = unsafe { &mut *ITM::ptr() };
 800288a:      	b	#-0x2 <rust_begin_unwind+0x10>
 800288c:      	mov.w	r0, #0xe0000000
;     let itm = unsafe { &mut *ITM::ptr() };
 8002890:      	str	r0, [sp, #0x3c]
;     let stim = &mut itm.stim[0];
 8002892:      	mov	r1, r0
 8002894:      	str	r0, [sp, #0x40]
 8002896:      	add	r0, sp, #0x10
;     iprintln!(stim, "{}", info);
 8002898:      	str	r0, [sp, #0x34]
 800289a:      	ldr	r0, [sp, #0x34]
 800289c:      	str	r0, [sp, #0x44]
 800289e:      	movw	r2, #0x28f5
 80028a2:      	movt	r2, #0x800
 80028a6:      	str	r1, [sp, #0xc]
 80028a8:      	mov	r1, r2
 80028aa:      	bl	#0x64
 80028ae:      	str	r0, [sp, #0x8]
 80028b0:      	str	r1, [sp, #0x4]
 80028b2:      	b	#-0x2 <rust_begin_unwind+0x38>
 80028b4:      	ldr	r0, [sp, #0x8]
 80028b6:      	str	r0, [sp, #0x2c]
 80028b8:      	ldr	r1, [sp, #0x4]
 80028ba:      	str	r1, [sp, #0x30]
 80028bc:      	mov	r2, sp
 80028be:      	movs	r3, #0x1
 80028c0:      	str	r3, [r2]
 80028c2:      	movw	r1, #0x3a58
 80028c6:      	movt	r1, #0x800
 80028ca:      	add	r0, sp, #0x14
 80028cc:      	movs	r2, #0x2
 80028ce:      	add	r3, sp, #0x2c
 80028d0:      	bl	#0xbc
 80028d4:      	b	#-0x2 <rust_begin_unwind+0x5a>
 80028d6:      	add	r1, sp, #0x14
;     iprintln!(stim, "{}", info);
 80028d8:      	ldr	r0, [sp, #0xc]
 80028da:      	bl	#0x258
 80028de:      	b	#-0x2 <rust_begin_unwind+0x64>
;     loop {
 80028e0:      	b	#-0x2 <rust_begin_unwind+0x66>
 80028e2:      	movs	r0, #0x4
;         atomic::compiler_fence(Ordering::SeqCst);
 80028e4:      	strb	r0, [r7, #-13]
 80028e8:      	ldrb	r0, [r7, #-13]
 80028ec:      	bl	#0xdc
 80028f0:      	b	#-0x2 <rust_begin_unwind+0x76>
;     loop {
 80028f2:      	b	#-0x14 <rust_begin_unwind+0x66>

080028f4 <<&T as core::fmt::Display>::fmt::h64bab9aa1d8834fe>:
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 80028f4:      	push	{r7, lr}
 80028f6:      	mov	r7, sp
 80028f8:      	sub	sp, #0x10
 80028fa:      	str	r0, [sp, #0x8]
 80028fc:      	str	r1, [sp, #0xc]
 80028fe:      	ldr	r0, [r0]
 8002900:      	bl	#-0xca8
 8002904:      	str	r0, [sp, #0x4]
 8002906:      	b	#-0x2 <<&T as core::fmt::Display>::fmt::h64bab9aa1d8834fe+0x14>
 8002908:      	ldr	r0, [sp, #0x4]
 800290a:      	and	r0, r0, #0x1
 800290e:      	add	sp, #0x10
 8002910:      	pop	{r7, pc}

08002912 <core::fmt::ArgumentV1::new::h856143943faac030>:
;     pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {
 8002912:      	sub	sp, #0x24
 8002914:      	str	r0, [sp, #0x14]
 8002916:      	str	r1, [sp, #0x18]
;         unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }
 8002918:      	str	r1, [sp, #0x1c]
 800291a:      	ldr	r1, [sp, #0x1c]
 800291c:      	str	r0, [sp, #0x8]
 800291e:      	str	r1, [sp, #0x4]
 8002920:      	b	#-0x2 <core::fmt::ArgumentV1::new::h856143943faac030+0x10>
 8002922:      	ldr	r0, [sp, #0x8]
 8002924:      	str	r0, [sp, #0x20]
 8002926:      	ldr	r1, [sp, #0x20]
 8002928:      	str	r1, [sp]
 800292a:      	b	#-0x2 <core::fmt::ArgumentV1::new::h856143943faac030+0x1a>
 800292c:      	ldr	r0, [sp]
 800292e:      	str	r0, [sp, #0xc]
 8002930:      	ldr	r1, [sp, #0x4]
 8002932:      	str	r1, [sp, #0x10]
;     }
 8002934:      	ldr	r0, [sp, #0xc]
 8002936:      	ldr	r1, [sp, #0x10]
 8002938:      	add	sp, #0x24
 800293a:      	bx	lr

0800293c <core::fmt::ArgumentV1::new::h91e4e02f676c3f27>:
;     pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {
 800293c:      	sub	sp, #0x24
 800293e:      	str	r0, [sp, #0x14]
 8002940:      	str	r1, [sp, #0x18]
;         unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }
 8002942:      	str	r1, [sp, #0x1c]
 8002944:      	ldr	r1, [sp, #0x1c]
 8002946:      	str	r0, [sp, #0x8]
 8002948:      	str	r1, [sp, #0x4]
 800294a:      	b	#-0x2 <core::fmt::ArgumentV1::new::h91e4e02f676c3f27+0x10>
 800294c:      	ldr	r0, [sp, #0x8]
 800294e:      	str	r0, [sp, #0x20]
 8002950:      	ldr	r1, [sp, #0x20]
 8002952:      	str	r1, [sp]
 8002954:      	b	#-0x2 <core::fmt::ArgumentV1::new::h91e4e02f676c3f27+0x1a>
 8002956:      	ldr	r0, [sp]
 8002958:      	str	r0, [sp, #0xc]
 800295a:      	ldr	r1, [sp, #0x4]
 800295c:      	str	r1, [sp, #0x10]
;     }
 800295e:      	ldr	r0, [sp, #0xc]
 8002960:      	ldr	r1, [sp, #0x10]
 8002962:      	add	sp, #0x24
 8002964:      	bx	lr

08002966 <core::fmt::ArgumentV1::new::hd21c72fd1ccbd67c>:
;     pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {
 8002966:      	sub	sp, #0x24
 8002968:      	str	r0, [sp, #0x14]
 800296a:      	str	r1, [sp, #0x18]
;         unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }
 800296c:      	str	r1, [sp, #0x1c]
 800296e:      	ldr	r1, [sp, #0x1c]
 8002970:      	str	r0, [sp, #0x8]
 8002972:      	str	r1, [sp, #0x4]
 8002974:      	b	#-0x2 <core::fmt::ArgumentV1::new::hd21c72fd1ccbd67c+0x10>
 8002976:      	ldr	r0, [sp, #0x8]
 8002978:      	str	r0, [sp, #0x20]
 800297a:      	ldr	r1, [sp, #0x20]
 800297c:      	str	r1, [sp]
 800297e:      	b	#-0x2 <core::fmt::ArgumentV1::new::hd21c72fd1ccbd67c+0x1a>
 8002980:      	ldr	r0, [sp]
 8002982:      	str	r0, [sp, #0xc]
 8002984:      	ldr	r1, [sp, #0x4]
 8002986:      	str	r1, [sp, #0x10]
;     }
 8002988:      	ldr	r0, [sp, #0xc]
 800298a:      	ldr	r1, [sp, #0x10]
 800298c:      	add	sp, #0x24
 800298e:      	bx	lr

08002990 <core::fmt::Arguments::new_v1::ha8149ee6bf3e8300>:
;     pub fn new_v1(pieces: &'a [&'static str], args: &'a [ArgumentV1<'a>]) -> Arguments<'a> {
 8002990:      	push	{r7, lr}
 8002992:      	mov	r7, sp
 8002994:      	sub	sp, #0x18
 8002996:      	ldr.w	r12, [r7, #0x8]
 800299a:      	str	r1, [sp, #0x8]
 800299c:      	str	r2, [sp, #0xc]
 800299e:      	str	r3, [sp, #0x10]
 80029a0:      	str.w	r12, [sp, #0x14]
 80029a4:      	mov.w	lr, #0x0
;         Arguments { pieces, fmt: None, args }
 80029a8:      	str.w	lr, [sp, #0x4]
 80029ac:      	str.w	lr, [sp]
 80029b0:      	str.w	lr, [sp]
 80029b4:      	str	r1, [r0]
 80029b6:      	str	r2, [r0, #0x4]
 80029b8:      	ldr	r1, [sp]
 80029ba:      	ldr	r2, [sp, #0x4]
 80029bc:      	str	r1, [r0, #0x8]
 80029be:      	str	r2, [r0, #0xc]
 80029c0:      	str	r3, [r0, #0x10]
 80029c2:      	str.w	r12, [r0, #0x14]
;     }
 80029c6:      	add	sp, #0x18
 80029c8:      	pop	{r7, pc}
 80029ca:      	bmi	#-0x58 <core::fmt::ArgumentV1::new::hd21c72fd1ccbd67c+0x10>

080029cc <core::sync::atomic::compiler_fence::h04e50d1e9c0c31b1>:
; pub fn compiler_fence(order: Ordering) {
 80029cc:      	push	{r7, lr}
 80029ce:      	mov	r7, sp
 80029d0:      	sub	sp, #0x10
 80029d2:      	mov	r1, r0
 80029d4:      	strb	r0, [r7, #-5]
;             Acquire => intrinsics::atomic_singlethreadfence_acq(),
 80029d8:      	ldrb	r0, [r7, #-5]
 80029dc:      	str	r0, [sp, #0x4]
 80029de:      	ldr	r1, [sp, #0x4]
 80029e0:      	tbb	[pc, r1]

080029e4 <$d.1>:
 80029e4:	03 11 10 12	.word	0x12101103
 80029e8:	13 00		.short	0x0013

080029ea <$t.2>:
;             Relaxed => panic!("there is no such thing as a relaxed compiler fence"),
 80029ea:      	movw	r0, #0x3a68
 80029ee:      	movt	r0, #0x800
 80029f2:      	movw	r2, #0x3b14
 80029f6:      	movt	r2, #0x800
 80029fa:      	movs	r1, #0x32
 80029fc:      	bl	#-0xcb0
 8002a00:      	trap
;         match order {
 8002a02:      	trap
;             Acquire => intrinsics::atomic_singlethreadfence_acq(),
 8002a04:      	b	#0x4 <$t.2+0x22>
;             Release => intrinsics::atomic_singlethreadfence_rel(),
 8002a06:      	b	#0x2 <$t.2+0x22>
;             AcqRel => intrinsics::atomic_singlethreadfence_acqrel(),
 8002a08:      	b	#0x0 <$t.2+0x22>
;             SeqCst => intrinsics::atomic_singlethreadfence(),
 8002a0a:      	b	#-0x2 <$t.2+0x22>
; }
 8002a0c:      	add	sp, #0x10
 8002a0e:      	pop	{r7, pc}

08002a10 <core::fmt::Write::write_char::h1766175a3d0aeabf>:
;     fn write_char(&mut self, c: char) -> Result {
 8002a10:      	push	{r7, lr}
 8002a12:      	mov	r7, sp
 8002a14:      	sub	sp, #0x20
 8002a16:      	str	r0, [sp, #0x18]
 8002a18:      	str	r1, [sp, #0x1c]
 8002a1a:      	movs	r2, #0x0
;         self.write_str(c.encode_utf8(&mut [0; 4]))
 8002a1c:      	str	r2, [sp, #0x14]
 8002a1e:      	add	r2, sp, #0x14
 8002a20:      	movs	r3, #0x4
 8002a22:      	str	r0, [sp, #0x10]
 8002a24:      	mov	r0, r1
 8002a26:      	mov	r1, r2
 8002a28:      	mov	r2, r3
 8002a2a:      	bl	#0x350
 8002a2e:      	str	r0, [sp, #0xc]
 8002a30:      	str	r1, [sp, #0x8]
 8002a32:      	b	#-0x2 <core::fmt::Write::write_char::h1766175a3d0aeabf+0x24>
 8002a34:      	ldr	r0, [sp, #0x10]
 8002a36:      	ldr	r1, [sp, #0xc]
 8002a38:      	ldr	r2, [sp, #0x8]
 8002a3a:      	bl	#0xbc
 8002a3e:      	str	r0, [sp, #0x4]
 8002a40:      	b	#-0x2 <core::fmt::Write::write_char::h1766175a3d0aeabf+0x32>
;     }
 8002a42:      	ldr	r0, [sp, #0x4]
 8002a44:      	and	r0, r0, #0x1
 8002a48:      	add	sp, #0x20
 8002a4a:      	pop	{r7, pc}

08002a4c <core::fmt::Write::write_fmt::h68eb1b7b389185e5>:
;     fn write_fmt(mut self: &mut Self, args: Arguments<'_>) -> Result {
 8002a4c:      	push	{r4, r5, r6, r7, lr}
 8002a4e:      	add	r7, sp, #0xc
 8002a50:      	str	r11, [sp, #-4]!
 8002a54:      	sub	sp, #0x28
 8002a56:      	str	r0, [sp, #0xc]
 8002a58:      	add	r0, sp, #0x10
;         write(&mut self, args)
 8002a5a:      	mov	r2, r0
 8002a5c:      	ldm.w	r1, {r3, r4, r5, r6, r12, lr}
 8002a60:      	stm.w	r2, {r3, r4, r5, r6, r12, lr}
 8002a64:      	movw	r1, #0x3b24
 8002a68:      	movt	r1, #0x800
 8002a6c:      	add	r2, sp, #0xc
 8002a6e:      	str	r0, [sp, #0x8]
 8002a70:      	mov	r0, r2
 8002a72:      	ldr	r2, [sp, #0x8]
 8002a74:      	bl	#-0xcd2
 8002a78:      	str	r0, [sp, #0x4]
 8002a7a:      	b	#-0x2 <core::fmt::Write::write_fmt::h68eb1b7b389185e5+0x30>
;     }
 8002a7c:      	ldr	r0, [sp, #0x4]
 8002a7e:      	and	r0, r0, #0x1
 8002a82:      	add	sp, #0x28
 8002a84:      	ldr	r11, [sp], #4
 8002a88:      	pop	{r4, r5, r6, r7, pc}

08002a8a <<&mut W as core::fmt::Write>::write_char::hc9ec9b21921dd6b9>:
;     fn write_char(&mut self, c: char) -> Result {
 8002a8a:      	push	{r7, lr}
 8002a8c:      	mov	r7, sp
 8002a8e:      	sub	sp, #0x10
 8002a90:      	str	r0, [sp, #0x8]
 8002a92:      	str	r1, [sp, #0xc]
;         (**self).write_char(c)
 8002a94:      	ldr	r0, [r0]
 8002a96:      	bl	#-0x8a
 8002a9a:      	str	r0, [sp, #0x4]
 8002a9c:      	b	#-0x2 <<&mut W as core::fmt::Write>::write_char::hc9ec9b21921dd6b9+0x14>
;     }
 8002a9e:      	ldr	r0, [sp, #0x4]
 8002aa0:      	and	r0, r0, #0x1
 8002aa4:      	add	sp, #0x10
 8002aa6:      	pop	{r7, pc}

08002aa8 <<&mut W as core::fmt::Write>::write_fmt::hf3a89b52731a177e>:
;     fn write_fmt(&mut self, args: Arguments<'_>) -> Result {
 8002aa8:      	push	{r4, r5, r6, r7, lr}
 8002aaa:      	add	r7, sp, #0xc
 8002aac:      	str	r8, [sp, #-4]!
 8002ab0:      	sub	sp, #0x20
 8002ab2:      	str	r0, [sp, #0x1c]
;         (**self).write_fmt(args)
 8002ab4:      	ldr	r0, [r0]
 8002ab6:      	add	r2, sp, #0x4
 8002ab8:      	mov	r3, r2
 8002aba:      	ldm.w	r1, {r4, r5, r6, r8, r12, lr}
 8002abe:      	stm.w	r3, {r4, r5, r6, r8, r12, lr}
 8002ac2:      	mov	r1, r2
 8002ac4:      	bl	#-0x7c
 8002ac8:      	str	r0, [sp]
 8002aca:      	b	#-0x2 <<&mut W as core::fmt::Write>::write_fmt::hf3a89b52731a177e+0x24>
;     }
 8002acc:      	ldr	r0, [sp]
 8002ace:      	and	r0, r0, #0x1
 8002ad2:      	add	sp, #0x20
 8002ad4:      	ldr	r8, [sp], #4
 8002ad8:      	pop	{r4, r5, r6, r7, pc}

08002ada <<&mut W as core::fmt::Write>::write_str::h747cb6090beebeb7>:
;     fn write_str(&mut self, s: &str) -> Result {
 8002ada:      	push	{r7, lr}
 8002adc:      	mov	r7, sp
 8002ade:      	sub	sp, #0x10
 8002ae0:      	str	r0, [sp, #0x4]
 8002ae2:      	str	r1, [sp, #0x8]
 8002ae4:      	str	r2, [sp, #0xc]
;         (**self).write_str(s)
 8002ae6:      	ldr	r0, [r0]
 8002ae8:      	bl	#0xe
 8002aec:      	str	r0, [sp]
 8002aee:      	b	#-0x2 <<&mut W as core::fmt::Write>::write_str::h747cb6090beebeb7+0x16>
;     }
 8002af0:      	ldr	r0, [sp]
 8002af2:      	and	r0, r0, #0x1
 8002af6:      	add	sp, #0x10
 8002af8:      	pop	{r7, pc}

08002afa <<cortex_m::itm::Port as core::fmt::Write>::write_str::ha6db4279d0cef8e0>:
;     fn write_str(&mut self, s: &str) -> fmt::Result {
 8002afa:      	push	{r7, lr}
 8002afc:      	mov	r7, sp
 8002afe:      	sub	sp, #0x30
 8002b00:      	str	r0, [sp, #0x14]
 8002b02:      	str	r1, [sp, #0x18]
 8002b04:      	str	r2, [sp, #0x1c]
;         write_all(self.0, s.as_bytes());
 8002b06:      	ldr	r0, [r0]
 8002b08:      	str	r1, [sp, #0x20]
 8002b0a:      	str	r2, [sp, #0x24]
;         unsafe { mem::transmute(self) }
 8002b0c:      	str	r1, [sp, #0x28]
 8002b0e:      	str	r2, [sp, #0x2c]
 8002b10:      	ldr	r1, [sp, #0x28]
 8002b12:      	ldr	r2, [sp, #0x2c]
;         write_all(self.0, s.as_bytes());
 8002b14:      	str	r0, [sp, #0xc]
 8002b16:      	str	r1, [sp, #0x8]
 8002b18:      	str	r2, [sp, #0x4]
 8002b1a:      	b	#-0x2 <<cortex_m::itm::Port as core::fmt::Write>::write_str::ha6db4279d0cef8e0+0x22>
 8002b1c:      	ldr	r0, [sp, #0xc]
 8002b1e:      	ldr	r1, [sp, #0x8]
 8002b20:      	ldr	r2, [sp, #0x4]
 8002b22:      	bl	#0x65a
 8002b26:      	b	#-0x2 <<cortex_m::itm::Port as core::fmt::Write>::write_str::ha6db4279d0cef8e0+0x2e>
 8002b28:      	movs	r0, #0x0
;         Ok(())
 8002b2a:      	strb	r0, [r7, #-29]
;     }
 8002b2e:      	ldrb	r0, [r7, #-29]
 8002b32:      	add	sp, #0x30
 8002b34:      	pop	{r7, pc}

08002b36 <cortex_m::itm::write_fmt::h78bd34621cca0d52>:
; pub fn write_fmt(port: &mut Stim, args: fmt::Arguments) {
 8002b36:      	push	{r4, r5, r6, r7, lr}
 8002b38:      	add	r7, sp, #0xc
 8002b3a:      	str	r11, [sp, #-4]!
 8002b3e:      	sub	sp, #0x28
 8002b40:      	str	r0, [sp, #0x24]
;     Port(port).write_fmt(args).ok();
 8002b42:      	str	r0, [sp, #0x8]
 8002b44:      	add	r0, sp, #0xc
 8002b46:      	mov	r2, r0
 8002b48:      	ldm.w	r1, {r3, r4, r5, r6, r12, lr}
 8002b4c:      	stm.w	r2, {r3, r4, r5, r6, r12, lr}
 8002b50:      	add	r1, sp, #0x8
 8002b52:      	str	r0, [sp, #0x4]
 8002b54:      	mov	r0, r1
 8002b56:      	ldr	r1, [sp, #0x4]
 8002b58:      	bl	#-0x110
 8002b5c:      	str	r0, [sp]
 8002b5e:      	b	#-0x2 <cortex_m::itm::write_fmt::h78bd34621cca0d52+0x2a>
 8002b60:      	ldr	r0, [sp]
 8002b62:      	and	r0, r0, #0x1
 8002b66:      	bl	#0x400
 8002b6a:      	b	#-0x2 <cortex_m::itm::write_fmt::h78bd34621cca0d52+0x36>
; }
 8002b6c:      	add	sp, #0x28
 8002b6e:      	ldr	r11, [sp], #4
 8002b72:      	pop	{r4, r5, r6, r7, pc}

08002b74 <core::ptr::drop_in_place<&mut cortex_m::itm::Port>::h6d97c72e688a90e7>:
; pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
 8002b74:      	sub	sp, #0x8
 8002b76:      	str	r0, [sp, #0x4]
 8002b78:      	add	sp, #0x8
 8002b7a:      	bx	lr

08002b7c <core::char::methods::encode_utf8_raw::h2259e0ececb21146>:
; pub fn encode_utf8_raw(code: u32, dst: &mut [u8]) -> &mut [u8] {
 8002b7c:      	push	{r4, r5, r7, lr}
 8002b7e:      	add	r7, sp, #0x8
 8002b80:      	sub	sp, #0xe0
 8002b82:      	str	r0, [sp, #0x48]
 8002b84:      	str	r1, [sp, #0xa4]
 8002b86:      	str	r2, [sp, #0xa8]
;     let len = len_utf8(code);
 8002b88:      	ldr	r0, [sp, #0x48]
 8002b8a:      	str	r2, [sp, #0x44]
 8002b8c:      	str	r1, [sp, #0x40]
 8002b8e:      	bl	#0x218
 8002b92:      	str	r0, [sp, #0x4c]
 8002b94:      	b	#-0x2 <core::char::methods::encode_utf8_raw::h2259e0ececb21146+0x1a>
;     match (len, &mut dst[..]) {
 8002b96:      	ldr	r0, [sp, #0x4c]
 8002b98:      	movw	r2, #0x3bb4
 8002b9c:      	movt	r2, #0x800
 8002ba0:      	ldr	r1, [sp, #0x40]
 8002ba2:      	str	r0, [sp, #0x3c]
 8002ba4:      	mov	r0, r1
 8002ba6:      	ldr	r1, [sp, #0x44]
 8002ba8:      	bl	#0x278
 8002bac:      	str	r0, [sp, #0x38]
 8002bae:      	str	r1, [sp, #0x34]
 8002bb0:      	b	#-0x2 <core::char::methods::encode_utf8_raw::h2259e0ececb21146+0x36>
 8002bb2:      	ldr	r0, [sp, #0x3c]
 8002bb4:      	str	r0, [sp, #0x50]
 8002bb6:      	ldr	r1, [sp, #0x38]
 8002bb8:      	str	r1, [sp, #0x54]
 8002bba:      	ldr	r2, [sp, #0x34]
 8002bbc:      	str	r2, [sp, #0x58]
;         (1, [a, ..]) => {
 8002bbe:      	ldr	r3, [sp, #0x50]
 8002bc0:      	subs	r3, #0x1
 8002bc2:      	mov	r12, r3
 8002bc4:      	cmp	r3, #0x3
 8002bc6:      	str.w	r12, [sp, #0x30]
 8002bca:      	bhi	#0x10 <$t.2+0x8>
 8002bcc:      	ldr	r1, [sp, #0x30]
 8002bce:      	tbb	[pc, r1]

08002bd2 <$d.1>:
 8002bd2:	02 0c 10 14	.word	0x14100c02

08002bd6 <$t.2>:
;         (1, [a, ..]) => {
 8002bd6:      	ldr	r0, [sp, #0x58]
 8002bd8:      	cmp	r0, #0x0
 8002bda:      	bne	#0x24 <$t.2+0x2c>
 8002bdc:      	b	#-0x2 <$t.2+0x8>
;             dst.len(),
 8002bde:      	ldr	r0, [sp, #0x40]
 8002be0:      	ldr	r1, [sp, #0x44]
 8002be2:      	bl	#-0x1048
 8002be6:      	str	r0, [sp, #0x9c]
 8002be8:      	b	#0xcc <$t.2+0xe2>
;         (2, [a, b, ..]) => {
 8002bea:      	ldr	r0, [sp, #0x58]
 8002bec:      	cmp	r0, #0x1
 8002bee:      	bhi	#0x1a <$t.2+0x36>
 8002bf0:      	b	#-0x16 <$t.2+0x8>
;         (3, [a, b, c, ..]) => {
 8002bf2:      	ldr	r0, [sp, #0x58]
 8002bf4:      	cmp	r0, #0x2
 8002bf6:      	bhi	#0x36 <$t.2+0x5a>
 8002bf8:      	b	#-0x1e <$t.2+0x8>
;         (4, [a, b, c, d, ..]) => {
 8002bfa:      	ldr	r0, [sp, #0x58]
 8002bfc:      	cmp	r0, #0x3
 8002bfe:      	bhi	#0x64 <$t.2+0x90>
 8002c00:      	b	#-0x26 <$t.2+0x8>
;         (1, [a, ..]) => {
 8002c02:      	ldr	r0, [sp, #0x54]
 8002c04:      	str	r0, [sp, #0xd0]
;             *a = code as u8;
 8002c06:      	ldr	r1, [sp, #0x48]
 8002c08:      	strb	r1, [r0]
;     match (len, &mut dst[..]) {
 8002c0a:      	b	#0x14c <$t.2+0x184>
;         (2, [a, b, ..]) => {
 8002c0c:      	ldr	r0, [sp, #0x54]
 8002c0e:      	str	r0, [sp, #0xc8]
 8002c10:      	ldr	r1, [sp, #0x54]
 8002c12:      	adds	r2, r1, #0x1
 8002c14:      	str	r2, [sp, #0xcc]
;             *a = (code >> 6 & 0x1F) as u8 | TAG_TWO_B;
 8002c16:      	ldr	r2, [sp, #0x48]
 8002c18:      	lsrs	r2, r2, #0x6
 8002c1a:      	movs	r3, #0x6
 8002c1c:      	bfi	r2, r3, #5, #27
 8002c20:      	strb	r2, [r0]
;             *b = (code & 0x3F) as u8 | TAG_CONT;
 8002c22:      	ldrb.w	r0, [sp, #0x48]
 8002c26:      	movs	r2, #0x2
 8002c28:      	bfi	r0, r2, #6, #26
 8002c2c:      	strb	r0, [r1, #0x1]
;     match (len, &mut dst[..]) {
 8002c2e:      	b	#0x128 <$t.2+0x184>
;         (3, [a, b, c, ..]) => {
 8002c30:      	ldr	r0, [sp, #0x54]
 8002c32:      	str	r0, [sp, #0xbc]
 8002c34:      	ldr	r1, [sp, #0x54]
 8002c36:      	adds	r2, r1, #0x1
 8002c38:      	str	r2, [sp, #0xc0]
 8002c3a:      	ldr	r2, [sp, #0x54]
 8002c3c:      	adds	r3, r2, #0x2
 8002c3e:      	str	r3, [sp, #0xc4]
;             *a = (code >> 12 & 0x0F) as u8 | TAG_THREE_B;
 8002c40:      	ldr	r3, [sp, #0x48]
 8002c42:      	lsrs	r3, r3, #0xc
 8002c44:      	mov.w	r12, #0xe
 8002c48:      	bfi	r3, r12, #4, #28
 8002c4c:      	strb	r3, [r0]
;             *b = (code >> 6 & 0x3F) as u8 | TAG_CONT;
 8002c4e:      	ldr	r0, [sp, #0x48]
 8002c50:      	lsrs	r0, r0, #0x6
 8002c52:      	movs	r3, #0x2
 8002c54:      	bfi	r0, r3, #6, #26
 8002c58:      	strb	r0, [r1, #0x1]
;             *c = (code & 0x3F) as u8 | TAG_CONT;
 8002c5a:      	ldrb.w	r0, [sp, #0x48]
 8002c5e:      	bfi	r0, r3, #6, #26
 8002c62:      	strb	r0, [r2, #0x2]
;     match (len, &mut dst[..]) {
 8002c64:      	b	#0xf2 <$t.2+0x184>
;         (4, [a, b, c, d, ..]) => {
 8002c66:      	ldr	r0, [sp, #0x54]
 8002c68:      	str	r0, [sp, #0xac]
 8002c6a:      	ldr	r1, [sp, #0x54]
 8002c6c:      	adds	r2, r1, #0x1
 8002c6e:      	str	r2, [sp, #0xb0]
 8002c70:      	ldr	r2, [sp, #0x54]
 8002c72:      	adds	r3, r2, #0x2
 8002c74:      	str	r3, [sp, #0xb4]
 8002c76:      	ldr	r3, [sp, #0x54]
 8002c78:      	add.w	r12, r3, #0x3
 8002c7c:      	str.w	r12, [sp, #0xb8]
;             *a = (code >> 18 & 0x07) as u8 | TAG_FOUR_B;
 8002c80:      	ldr.w	r12, [sp, #0x48]
 8002c84:      	lsr.w	r12, r12, #0x12
 8002c88:      	mov.w	lr, #0x1e
 8002c8c:      	bfi	r12, lr, #3, #29
 8002c90:      	strb.w	r12, [r0]
;             *b = (code >> 12 & 0x3F) as u8 | TAG_CONT;
 8002c94:      	ldr	r0, [sp, #0x48]
 8002c96:      	lsrs	r0, r0, #0xc
 8002c98:      	mov.w	r12, #0x2
 8002c9c:      	bfi	r0, r12, #6, #26
 8002ca0:      	strb	r0, [r1, #0x1]
;             *c = (code >> 6 & 0x3F) as u8 | TAG_CONT;
 8002ca2:      	ldr	r0, [sp, #0x48]
 8002ca4:      	lsrs	r0, r0, #0x6
 8002ca6:      	bfi	r0, r12, #6, #26
 8002caa:      	strb	r0, [r2, #0x2]
;             *d = (code & 0x3F) as u8 | TAG_CONT;
 8002cac:      	ldrb.w	r0, [sp, #0x48]
 8002cb0:      	bfi	r0, r12, #6, #26
 8002cb4:      	strb	r0, [r3, #0x3]
;     match (len, &mut dst[..]) {
 8002cb6:      	b	#0xa0 <$t.2+0x184>
 8002cb8:      	add	r0, sp, #0x4c
;         _ => panic!(
 8002cba:      	str	r0, [sp, #0x90]
 8002cbc:      	add	r0, sp, #0x48
 8002cbe:      	str	r0, [sp, #0x94]
 8002cc0:      	add	r0, sp, #0x9c
 8002cc2:      	str	r0, [sp, #0x98]
 8002cc4:      	ldr	r0, [sp, #0x90]
 8002cc6:      	str	r0, [sp, #0xd4]
 8002cc8:      	ldr	r1, [sp, #0x94]
 8002cca:      	str	r1, [sp, #0xd8]
 8002ccc:      	ldr	r2, [sp, #0x98]
 8002cce:      	str	r2, [sp, #0xdc]
 8002cd0:      	movw	r3, #0x2745
 8002cd4:      	movt	r3, #0x800
 8002cd8:      	str	r1, [sp, #0x2c]
 8002cda:      	mov	r1, r3
 8002cdc:      	str	r2, [sp, #0x28]
 8002cde:      	bl	#-0x3a6
 8002ce2:      	str	r0, [sp, #0x24]
 8002ce4:      	str	r1, [sp, #0x20]
 8002ce6:      	b	#-0x2 <$t.2+0x112>
 8002ce8:      	movw	r1, #0x2673
 8002cec:      	movt	r1, #0x800
 8002cf0:      	ldr	r0, [sp, #0x2c]
 8002cf2:      	bl	#-0x390
 8002cf6:      	str	r0, [sp, #0x1c]
 8002cf8:      	str	r1, [sp, #0x18]
 8002cfa:      	b	#-0x2 <$t.2+0x126>
 8002cfc:      	movw	r1, #0x2745
 8002d00:      	movt	r1, #0x800
 8002d04:      	ldr	r0, [sp, #0x28]
 8002d06:      	bl	#-0x3ce
 8002d0a:      	str	r0, [sp, #0x14]
 8002d0c:      	str	r1, [sp, #0x10]
 8002d0e:      	b	#-0x2 <$t.2+0x13a>
 8002d10:      	ldr	r0, [sp, #0x24]
 8002d12:      	str	r0, [sp, #0x78]
 8002d14:      	ldr	r1, [sp, #0x20]
 8002d16:      	str	r1, [sp, #0x7c]
 8002d18:      	ldr	r2, [sp, #0x1c]
 8002d1a:      	str	r2, [sp, #0x80]
 8002d1c:      	ldr	r3, [sp, #0x18]
 8002d1e:      	str	r3, [sp, #0x84]
 8002d20:      	ldr.w	r12, [sp, #0x14]
 8002d24:      	str.w	r12, [sp, #0x88]
 8002d28:      	ldr.w	lr, [sp, #0x10]
 8002d2c:      	str.w	lr, [sp, #0x8c]
 8002d30:      	mov	r4, sp
 8002d32:      	movs	r5, #0x3
 8002d34:      	str	r5, [r4]
 8002d36:      	movw	r1, #0x3c10
 8002d3a:      	movt	r1, #0x800
 8002d3e:      	add	r0, sp, #0x60
 8002d40:      	add	r3, sp, #0x78
 8002d42:      	mov	r2, r5
 8002d44:      	bl	#-0x3b8
 8002d48:      	b	#-0x2 <$t.2+0x174>
 8002d4a:      	movw	r1, #0x3c28
 8002d4e:      	movt	r1, #0x800
 8002d52:      	add	r0, sp, #0x60
 8002d54:      	bl	#-0xfd8
 8002d58:      	trap
;     &mut dst[..len]
 8002d5a:      	ldr	r0, [sp, #0x4c]
 8002d5c:      	str	r0, [sp, #0xa0]
 8002d5e:      	ldr	r2, [sp, #0xa0]
 8002d60:      	movw	r3, #0x3bc4
 8002d64:      	movt	r3, #0x800
 8002d68:      	ldr	r0, [sp, #0x40]
 8002d6a:      	ldr	r1, [sp, #0x44]
 8002d6c:      	bl	#0x8a
 8002d70:      	str	r0, [sp, #0xc]
 8002d72:      	str	r1, [sp, #0x8]
 8002d74:      	b	#-0x2 <$t.2+0x1a0>
; }
 8002d76:      	ldr	r0, [sp, #0xc]
 8002d78:      	ldr	r1, [sp, #0x8]
 8002d7a:      	add	sp, #0xe0
 8002d7c:      	pop	{r4, r5, r7, pc}

08002d7e <core::char::methods::<impl char>::encode_utf8::hdaeb00104f1c0839>:
;     pub fn encode_utf8(self, dst: &mut [u8]) -> &mut str {
 8002d7e:      	push	{r7, lr}
 8002d80:      	mov	r7, sp
 8002d82:      	sub	sp, #0x20
 8002d84:      	str	r0, [sp, #0x14]
 8002d86:      	str	r1, [sp, #0x18]
 8002d88:      	str	r2, [sp, #0x1c]
;         unsafe { from_utf8_unchecked_mut(encode_utf8_raw(self as u32, dst)) }
 8002d8a:      	bl	#-0x212
 8002d8e:      	str	r0, [sp, #0x10]
 8002d90:      	str	r1, [sp, #0xc]
 8002d92:      	b	#-0x2 <core::char::methods::<impl char>::encode_utf8::hdaeb00104f1c0839+0x16>
 8002d94:      	ldr	r0, [sp, #0x10]
 8002d96:      	ldr	r1, [sp, #0xc]
 8002d98:      	bl	#0x54
 8002d9c:      	str	r0, [sp, #0x8]
 8002d9e:      	str	r1, [sp, #0x4]
 8002da0:      	b	#-0x2 <core::char::methods::<impl char>::encode_utf8::hdaeb00104f1c0839+0x24>
;     }
 8002da2:      	ldr	r0, [sp, #0x8]
 8002da4:      	ldr	r1, [sp, #0x4]
 8002da6:      	add	sp, #0x20
 8002da8:      	pop	{r7, pc}

08002daa <core::char::methods::len_utf8::h3f2eef0e28a1b76c>:
; fn len_utf8(code: u32) -> usize {
 8002daa:      	sub	sp, #0xc
 8002dac:      	str	r0, [sp, #0x8]
;     if code < MAX_ONE_B {
 8002dae:      	cmp	r0, #0x7f
 8002db0:      	str	r0, [sp]
 8002db2:      	bhi	#0x6 <core::char::methods::len_utf8::h3f2eef0e28a1b76c+0x12>
 8002db4:      	b	#-0x2 <core::char::methods::len_utf8::h3f2eef0e28a1b76c+0xc>
 8002db6:      	movs	r0, #0x1
;         1
 8002db8:      	str	r0, [sp, #0x4]
;     if code < MAX_ONE_B {
 8002dba:      	b	#0x2c <core::char::methods::len_utf8::h3f2eef0e28a1b76c+0x40>
 8002dbc:      	movs	r0, #0x0
;     } else if code < MAX_TWO_B {
 8002dbe:      	ldr	r1, [sp]
 8002dc0:      	cmp.w	r0, r1, lsr #11
 8002dc4:      	bne	#0x6 <core::char::methods::len_utf8::h3f2eef0e28a1b76c+0x24>
 8002dc6:      	b	#-0x2 <core::char::methods::len_utf8::h3f2eef0e28a1b76c+0x1e>
 8002dc8:      	movs	r0, #0x2
;         2
 8002dca:      	str	r0, [sp, #0x4]
;     } else if code < MAX_TWO_B {
 8002dcc:      	b	#0x18 <core::char::methods::len_utf8::h3f2eef0e28a1b76c+0x3e>
 8002dce:      	movs	r0, #0x0
;     } else if code < MAX_THREE_B {
 8002dd0:      	ldr	r1, [sp]
 8002dd2:      	cmp.w	r0, r1, lsr #16
 8002dd6:      	bne	#0x6 <core::char::methods::len_utf8::h3f2eef0e28a1b76c+0x36>
 8002dd8:      	b	#-0x2 <core::char::methods::len_utf8::h3f2eef0e28a1b76c+0x30>
 8002dda:      	movs	r0, #0x3
;         3
 8002ddc:      	str	r0, [sp, #0x4]
;     } else if code < MAX_THREE_B {
 8002dde:      	b	#0x4 <core::char::methods::len_utf8::h3f2eef0e28a1b76c+0x3c>
 8002de0:      	movs	r0, #0x4
;         4
 8002de2:      	str	r0, [sp, #0x4]
;     } else if code < MAX_THREE_B {
 8002de4:      	b	#-0x2 <core::char::methods::len_utf8::h3f2eef0e28a1b76c+0x3c>
;     } else if code < MAX_TWO_B {
 8002de6:      	b	#-0x2 <core::char::methods::len_utf8::h3f2eef0e28a1b76c+0x3e>
;     if code < MAX_ONE_B {
 8002de8:      	b	#-0x2 <core::char::methods::len_utf8::h3f2eef0e28a1b76c+0x40>
; }
 8002dea:      	ldr	r0, [sp, #0x4]
 8002dec:      	add	sp, #0xc
 8002dee:      	bx	lr

08002df0 <core::str::converts::from_utf8_unchecked_mut::h27f54d5ae00e5eef>:
; pub unsafe fn from_utf8_unchecked_mut(v: &mut [u8]) -> &mut str {
 8002df0:      	sub	sp, #0x8
 8002df2:      	str	r0, [sp]
 8002df4:      	str	r1, [sp, #0x4]
; }
 8002df6:      	add	sp, #0x8
 8002df8:      	bx	lr

08002dfa <core::slice::index::<impl core::ops::index::IndexMut<I> for [T]>::index_mut::h74ce8a627537b790>:
;     fn index_mut(&mut self, index: I) -> &mut I::Output {
 8002dfa:      	push	{r7, lr}
 8002dfc:      	mov	r7, sp
 8002dfe:      	sub	sp, #0x20
 8002e00:      	str	r0, [sp, #0x14]
 8002e02:      	str	r1, [sp, #0x18]
 8002e04:      	str	r2, [sp, #0x1c]
;         index.index_mut(self)
 8002e06:      	str	r0, [sp, #0x10]
 8002e08:      	mov	r0, r2
 8002e0a:      	ldr	r2, [sp, #0x10]
 8002e0c:      	str	r1, [sp, #0xc]
 8002e0e:      	mov	r1, r2
 8002e10:      	ldr	r2, [sp, #0xc]
 8002e12:      	bl	#0xe6
 8002e16:      	str	r0, [sp, #0x8]
 8002e18:      	str	r1, [sp, #0x4]
 8002e1a:      	b	#-0x2 <core::slice::index::<impl core::ops::index::IndexMut<I> for [T]>::index_mut::h74ce8a627537b790+0x22>
;     }
 8002e1c:      	ldr	r0, [sp, #0x8]
 8002e1e:      	ldr	r1, [sp, #0x4]
 8002e20:      	add	sp, #0x20
 8002e22:      	pop	{r7, pc}

08002e24 <core::slice::index::<impl core::ops::index::IndexMut<I> for [T]>::index_mut::hb5e5e245d952a8f1>:
;     fn index_mut(&mut self, index: I) -> &mut I::Output {
 8002e24:      	push	{r7, lr}
 8002e26:      	mov	r7, sp
 8002e28:      	sub	sp, #0x18
 8002e2a:      	str	r0, [sp, #0xc]
 8002e2c:      	str	r1, [sp, #0x10]
;         index.index_mut(self)
 8002e2e:      	bl	#0x10a
 8002e32:      	str	r0, [sp, #0x8]
 8002e34:      	str	r1, [sp, #0x4]
 8002e36:      	b	#-0x2 <core::slice::index::<impl core::ops::index::IndexMut<I> for [T]>::index_mut::hb5e5e245d952a8f1+0x14>
;     }
 8002e38:      	ldr	r0, [sp, #0x8]
 8002e3a:      	ldr	r1, [sp, #0x4]
 8002e3c:      	add	sp, #0x18
 8002e3e:      	pop	{r7, pc}

08002e40 <<core::ops::range::Range<usize> as core::slice::index::SliceIndex<[T]>>::get_unchecked_mut::he45fcc1ed35e6d2b>:
;     unsafe fn get_unchecked_mut(self, slice: *mut [T]) -> *mut [T] {
 8002e40:      	push	{r7, lr}
 8002e42:      	mov	r7, sp
 8002e44:      	sub	sp, #0x28
 8002e46:      	str	r0, [sp, #0x18]
 8002e48:      	str	r1, [sp, #0x1c]
 8002e4a:      	str	r2, [sp, #0x20]
 8002e4c:      	str	r3, [sp, #0x24]
;             ptr::slice_from_raw_parts_mut(slice.as_mut_ptr().add(self.start), self.end - self.start)
 8002e4e:      	str	r0, [sp, #0x14]
 8002e50:      	mov	r0, r2
 8002e52:      	str	r1, [sp, #0x10]
 8002e54:      	mov	r1, r3
 8002e56:      	bl	#0x106
 8002e5a:      	str	r0, [sp, #0xc]
 8002e5c:      	b	#-0x2 <<core::ops::range::Range<usize> as core::slice::index::SliceIndex<[T]>>::get_unchecked_mut::he45fcc1ed35e6d2b+0x1e>
 8002e5e:      	ldr	r0, [sp, #0xc]
 8002e60:      	ldr	r1, [sp, #0x14]
 8002e62:      	bl	#-0x1306
 8002e66:      	str	r0, [sp, #0x8]
 8002e68:      	b	#-0x2 <<core::ops::range::Range<usize> as core::slice::index::SliceIndex<[T]>>::get_unchecked_mut::he45fcc1ed35e6d2b+0x2a>
 8002e6a:      	ldr	r0, [sp, #0x10]
 8002e6c:      	ldr	r1, [sp, #0x14]
 8002e6e:      	subs	r1, r0, r1
 8002e70:      	ldr	r0, [sp, #0x8]
 8002e72:      	bl	#0xd0
 8002e76:      	str	r0, [sp, #0x4]
 8002e78:      	str	r1, [sp]
 8002e7a:      	b	#-0x2 <<core::ops::range::Range<usize> as core::slice::index::SliceIndex<[T]>>::get_unchecked_mut::he45fcc1ed35e6d2b+0x3c>
;     }
 8002e7c:      	ldr	r0, [sp, #0x4]
 8002e7e:      	ldr	r1, [sp]
 8002e80:      	add	sp, #0x28
 8002e82:      	pop	{r7, pc}

08002e84 <<core::ops::range::Range<usize> as core::slice::index::SliceIndex<[T]>>::index_mut::h0b310b136acb8eeb>:
;     fn index_mut(self, slice: &mut [T]) -> &mut [T] {
 8002e84:      	push	{r7, lr}
 8002e86:      	mov	r7, sp
 8002e88:      	sub	sp, #0x38
 8002e8a:      	ldr.w	r12, [r7, #0x8]
 8002e8e:      	str	r0, [sp, #0x28]
 8002e90:      	str	r1, [sp, #0x2c]
 8002e92:      	str	r2, [sp, #0x30]
 8002e94:      	str	r3, [sp, #0x34]
;         if self.start > self.end {
 8002e96:      	cmp	r0, r1
 8002e98:      	str	r3, [sp, #0x24]
 8002e9a:      	str	r2, [sp, #0x20]
 8002e9c:      	str	r1, [sp, #0x1c]
 8002e9e:      	str	r0, [sp, #0x18]
 8002ea0:      	str.w	r12, [sp, #0x14]
 8002ea4:      	bls	#0xc <<core::ops::range::Range<usize> as core::slice::index::SliceIndex<[T]>>::index_mut::h0b310b136acb8eeb+0x30>
 8002ea6:      	b	#-0x2 <<core::ops::range::Range<usize> as core::slice::index::SliceIndex<[T]>>::index_mut::h0b310b136acb8eeb+0x24>
;             slice_index_order_fail(self.start, self.end);
 8002ea8:      	ldr	r0, [sp, #0x18]
 8002eaa:      	ldr	r1, [sp, #0x1c]
 8002eac:      	ldr	r2, [sp, #0x14]
 8002eae:      	bl	#-0x882
 8002eb2:      	trap
;         } else if self.end > slice.len() {
 8002eb4:      	ldr	r0, [sp, #0x20]
 8002eb6:      	ldr	r1, [sp, #0x24]
 8002eb8:      	bl	#-0x131e
 8002ebc:      	str	r0, [sp, #0x10]
 8002ebe:      	b	#-0x2 <<core::ops::range::Range<usize> as core::slice::index::SliceIndex<[T]>>::index_mut::h0b310b136acb8eeb+0x3c>
 8002ec0:      	ldr	r0, [sp, #0x1c]
 8002ec2:      	ldr	r1, [sp, #0x10]
 8002ec4:      	cmp	r0, r1
 8002ec6:      	bls	#0xc <<core::ops::range::Range<usize> as core::slice::index::SliceIndex<[T]>>::index_mut::h0b310b136acb8eeb+0x52>
 8002ec8:      	b	#-0x2 <<core::ops::range::Range<usize> as core::slice::index::SliceIndex<[T]>>::index_mut::h0b310b136acb8eeb+0x46>
;             slice_end_index_len_fail(self.end, slice.len());
 8002eca:      	ldr	r0, [sp, #0x20]
 8002ecc:      	ldr	r1, [sp, #0x24]
 8002ece:      	bl	#-0x1334
 8002ed2:      	str	r0, [sp, #0xc]
 8002ed4:      	b	#0x10 <<core::ops::range::Range<usize> as core::slice::index::SliceIndex<[T]>>::index_mut::h0b310b136acb8eeb+0x64>
;         unsafe { &mut *self.get_unchecked_mut(slice) }
 8002ed6:      	ldr	r0, [sp, #0x18]
 8002ed8:      	ldr	r1, [sp, #0x1c]
 8002eda:      	ldr	r2, [sp, #0x20]
 8002edc:      	ldr	r3, [sp, #0x24]
 8002ede:      	bl	#-0xa2
 8002ee2:      	str	r0, [sp, #0x8]
 8002ee4:      	str	r1, [sp, #0x4]
 8002ee6:      	b	#0xa <<core::ops::range::Range<usize> as core::slice::index::SliceIndex<[T]>>::index_mut::h0b310b136acb8eeb+0x70>
;             slice_end_index_len_fail(self.end, slice.len());
 8002ee8:      	ldr	r0, [sp, #0x1c]
 8002eea:      	ldr	r1, [sp, #0xc]
 8002eec:      	ldr	r2, [sp, #0x14]
 8002eee:      	bl	#-0x904
 8002ef2:      	trap
;     }
 8002ef4:      	ldr	r0, [sp, #0x8]
 8002ef6:      	ldr	r1, [sp, #0x4]
 8002ef8:      	add	sp, #0x38
 8002efa:      	pop	{r7, pc}

08002efc <<core::ops::range::RangeTo<usize> as core::slice::index::SliceIndex<[T]>>::index_mut::h372e5a6e202c3215>:
;     fn index_mut(self, slice: &mut [T]) -> &mut [T] {
 8002efc:      	push	{r7, lr}
 8002efe:      	mov	r7, sp
 8002f00:      	sub	sp, #0x28
 8002f02:      	str	r0, [sp, #0x1c]
 8002f04:      	str	r1, [sp, #0x20]
 8002f06:      	str	r2, [sp, #0x24]
 8002f08:      	mov.w	r12, #0x0
;         (0..self.end).index_mut(slice)
 8002f0c:      	str.w	r12, [sp, #0x14]
 8002f10:      	str	r0, [sp, #0x18]
 8002f12:      	ldr	r0, [sp, #0x14]
 8002f14:      	ldr.w	r12, [sp, #0x18]
 8002f18:      	mov	lr, sp
 8002f1a:      	str.w	r3, [lr]
 8002f1e:      	str	r1, [sp, #0x10]
 8002f20:      	mov	r1, r12
 8002f22:      	ldr	r3, [sp, #0x10]
 8002f24:      	str	r2, [sp, #0xc]
 8002f26:      	mov	r2, r3
 8002f28:      	ldr	r3, [sp, #0xc]
 8002f2a:      	bl	#-0xaa
 8002f2e:      	str	r0, [sp, #0x8]
 8002f30:      	str	r1, [sp, #0x4]
 8002f32:      	b	#-0x2 <<core::ops::range::RangeTo<usize> as core::slice::index::SliceIndex<[T]>>::index_mut::h372e5a6e202c3215+0x38>
;     }
 8002f34:      	ldr	r0, [sp, #0x8]
 8002f36:      	ldr	r1, [sp, #0x4]
 8002f38:      	add	sp, #0x28
 8002f3a:      	pop	{r7, pc}

08002f3c <<core::ops::range::RangeFull as core::slice::index::SliceIndex<[T]>>::index_mut::h7e7488419dfa38b7>:
;     fn index_mut(self, slice: &mut [T]) -> &mut [T] {
 8002f3c:      	sub	sp, #0xc
 8002f3e:      	str	r0, [sp, #0x4]
 8002f40:      	str	r1, [sp, #0x8]
;     }
 8002f42:      	add	sp, #0xc
 8002f44:      	bx	lr

08002f46 <core::ptr::slice_from_raw_parts_mut::h5bac30fa21ceddbf>:
; pub const fn slice_from_raw_parts_mut<T>(data: *mut T, len: usize) -> *mut [T] {
 8002f46:      	sub	sp, #0x18
 8002f48:      	str	r0, [sp, #0x10]
 8002f4a:      	str	r1, [sp, #0x14]
;     unsafe { Repr { raw: FatPtr { data, len } }.rust_mut }
 8002f4c:      	str	r0, [sp, #0x8]
 8002f4e:      	str	r1, [sp, #0xc]
 8002f50:      	ldr	r0, [sp, #0x8]
 8002f52:      	ldr	r1, [sp, #0xc]
 8002f54:      	str	r0, [sp]
 8002f56:      	str	r1, [sp, #0x4]
 8002f58:      	ldr	r0, [sp]
 8002f5a:      	ldr	r1, [sp, #0x4]
; }
 8002f5c:      	add	sp, #0x18
 8002f5e:      	bx	lr

08002f60 <core::ptr::mut_ptr::<impl *mut [T]>::as_mut_ptr::haf6bd5e59c2f47a0>:
;     pub const fn as_mut_ptr(self) -> *mut T {
 8002f60:      	sub	sp, #0x8
 8002f62:      	str	r0, [sp]
 8002f64:      	str	r1, [sp, #0x4]
;     }
 8002f66:      	add	sp, #0x8
 8002f68:      	bx	lr

08002f6a <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h65307ddc68aa9405E>:
;     pub fn ok(self) -> Option<T> {
 8002f6a:      	sub	sp, #0x8
 8002f6c:      	mov	r1, r0
 8002f6e:      	strb.w	r0, [sp, #0x2]
;             Ok(x) => Some(x),
 8002f72:      	ldrb.w	r0, [sp, #0x2]
 8002f76:      	lsls	r2, r0, #0x1f
 8002f78:      	cmp	r2, #0x0
 8002f7a:      	beq	#0xa <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h65307ddc68aa9405E+0x1e>
 8002f7c:      	b	#-0x2 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h65307ddc68aa9405E+0x14>
 8002f7e:      	movs	r0, #0x0
;             Err(_) => None,
 8002f80:      	strb.w	r0, [sp, #0x3]
;         match self {
 8002f84:      	b	#0x12 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h65307ddc68aa9405E+0x30>
 8002f86:      	trap
 8002f88:      	movs	r0, #0x1
;             Ok(x) => Some(x),
 8002f8a:      	strb.w	r0, [sp, #0x3]
;     }
 8002f8e:      	b	#0x8 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h65307ddc68aa9405E+0x30>
 8002f90:      	ldrb.w	r0, [sp, #0x3]
 8002f94:      	add	sp, #0x8
 8002f96:      	bx	lr
 8002f98:      	b	#-0xc <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h65307ddc68aa9405E+0x26>
 8002f9a:      	ldrb.w	r0, [sp, #0x2]
 8002f9e:      	lsls	r0, r0, #0x1f
 8002fa0:      	cmp	r0, #0x0
 8002fa2:      	beq	#-0x16 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h65307ddc68aa9405E+0x26>
 8002fa4:      	b	#-0x10 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h65307ddc68aa9405E+0x2e>

08002fa6 <cortex_m::itm::write_words::h4e92ccf78850c045>:
; unsafe fn write_words(stim: &mut Stim, bytes: &[u32]) {
 8002fa6:      	push	{r7, lr}
 8002fa8:      	mov	r7, sp
 8002faa:      	sub	sp, #0x58
 8002fac:      	str	r0, [sp, #0x44]
 8002fae:      	str	r1, [sp, #0x48]
 8002fb0:      	str	r2, [sp, #0x4c]
;     let mut p = bytes.as_ptr();
 8002fb2:      	str	r0, [sp, #0x24]
 8002fb4:      	mov	r0, r1
 8002fb6:      	str	r1, [sp, #0x20]
 8002fb8:      	mov	r1, r2
 8002fba:      	str	r2, [sp, #0x1c]
 8002fbc:      	bl	#-0x1412
 8002fc0:      	str	r0, [sp, #0x28]
 8002fc2:      	b	#-0x2 <cortex_m::itm::write_words::h4e92ccf78850c045+0x1e>
;     for _ in 0..bytes.len() {
 8002fc4:      	ldr	r0, [sp, #0x20]
 8002fc6:      	ldr	r1, [sp, #0x1c]
 8002fc8:      	bl	#-0x143e
 8002fcc:      	str	r0, [sp, #0x18]
 8002fce:      	b	#-0x2 <cortex_m::itm::write_words::h4e92ccf78850c045+0x2a>
 8002fd0:      	movs	r0, #0x0
;     for _ in 0..bytes.len() {
 8002fd2:      	str	r0, [sp, #0x2c]
 8002fd4:      	ldr	r0, [sp, #0x18]
 8002fd6:      	str	r0, [sp, #0x30]
 8002fd8:      	ldr	r0, [sp, #0x2c]
 8002fda:      	ldr	r1, [sp, #0x30]
 8002fdc:      	bl	#0x36c
 8002fe0:      	str	r0, [sp, #0x14]
 8002fe2:      	str	r1, [sp, #0x10]
 8002fe4:      	b	#-0x2 <cortex_m::itm::write_words::h4e92ccf78850c045+0x40>
 8002fe6:      	ldr	r0, [sp, #0x14]
 8002fe8:      	str	r0, [sp, #0x34]
 8002fea:      	ldr	r1, [sp, #0x10]
 8002fec:      	str	r1, [sp, #0x38]
 8002fee:      	b	#-0x2 <cortex_m::itm::write_words::h4e92ccf78850c045+0x4a>
 8002ff0:      	add	r0, sp, #0x34
;     for _ in 0..bytes.len() {
 8002ff2:      	bl	#0x2fa
 8002ff6:      	str	r1, [sp, #0x40]
 8002ff8:      	str	r0, [sp, #0x3c]
 8002ffa:      	b	#-0x2 <cortex_m::itm::write_words::h4e92ccf78850c045+0x56>
 8002ffc:      	ldr	r0, [sp, #0x3c]
 8002ffe:      	cmp	r0, #0x0
 8003000:      	beq	#0x2 <cortex_m::itm::write_words::h4e92ccf78850c045+0x60>
 8003002:      	b	#-0x2 <cortex_m::itm::write_words::h4e92ccf78850c045+0x5e>
 8003004:      	b	#0x4 <cortex_m::itm::write_words::h4e92ccf78850c045+0x66>
; }
 8003006:      	add	sp, #0x58
 8003008:      	pop	{r7, pc}
;     for _ in 0..bytes.len() {
 800300a:      	trap
 800300c:      	ldr	r0, [sp, #0x40]
 800300e:      	str	r0, [sp, #0x50]
 8003010:      	str	r0, [sp, #0x54]
;         while !stim.is_fifo_ready() {}
 8003012:      	b	#-0x2 <cortex_m::itm::write_words::h4e92ccf78850c045+0x6e>
 8003014:      	ldr	r0, [sp, #0x24]
 8003016:      	bl	#0x412
 800301a:      	str	r0, [sp, #0xc]
 800301c:      	b	#-0x2 <cortex_m::itm::write_words::h4e92ccf78850c045+0x78>
 800301e:      	ldr	r0, [sp, #0xc]
 8003020:      	lsls	r1, r0, #0x1f
 8003022:      	cmp	r1, #0x0
 8003024:      	beq	#0xa <cortex_m::itm::write_words::h4e92ccf78850c045+0x8c>
 8003026:      	b	#-0x2 <cortex_m::itm::write_words::h4e92ccf78850c045+0x82>
;         stim.write_u32(ptr::read(p));
 8003028:      	ldr	r0, [sp, #0x28]
 800302a:      	bl	#-0x1626
 800302e:      	str	r0, [sp, #0x8]
 8003030:      	b	#0x0 <cortex_m::itm::write_words::h4e92ccf78850c045+0x8e>
;         while !stim.is_fifo_ready() {}
 8003032:      	b	#-0x22 <cortex_m::itm::write_words::h4e92ccf78850c045+0x6e>
;         stim.write_u32(ptr::read(p));
 8003034:      	ldr	r0, [sp, #0x24]
 8003036:      	ldr	r1, [sp, #0x8]
 8003038:      	bl	#0x3ce
 800303c:      	b	#-0x2 <cortex_m::itm::write_words::h4e92ccf78850c045+0x98>
;         p = p.offset(1);
 800303e:      	ldr	r0, [sp, #0x28]
 8003040:      	movs	r1, #0x1
 8003042:      	bl	#-0x1456
 8003046:      	str	r0, [sp, #0x4]
 8003048:      	b	#-0x2 <cortex_m::itm::write_words::h4e92ccf78850c045+0xa4>
 800304a:      	ldr	r0, [sp, #0x4]
 800304c:      	str	r0, [sp, #0x28]
;     for _ in 0..bytes.len() {
 800304e:      	b	#-0x62 <cortex_m::itm::write_words::h4e92ccf78850c045+0x4a>

08003050 <cortex_m::itm::write_aligned_impl::h82cb12a363aec35f>:
; unsafe fn write_aligned_impl(port: &mut Stim, buffer: &[u8]) {
 8003050:      	push	{r7, lr}
 8003052:      	mov	r7, sp
 8003054:      	sub	sp, #0x60
 8003056:      	str	r0, [sp, #0x4c]
 8003058:      	str	r1, [sp, #0x50]
 800305a:      	str	r2, [sp, #0x54]
;     let len = buffer.len();
 800305c:      	str	r0, [sp, #0x3c]
 800305e:      	mov	r0, r1
 8003060:      	str	r1, [sp, #0x38]
 8003062:      	mov	r1, r2
 8003064:      	str	r2, [sp, #0x34]
 8003066:      	bl	#-0x14cc
 800306a:      	mov	r1, r0
 800306c:      	str	r0, [sp, #0x58]
 800306e:      	str	r1, [sp, #0x30]
 8003070:      	b	#-0x2 <cortex_m::itm::write_aligned_impl::h82cb12a363aec35f+0x22>
;     if len == 0 {
 8003072:      	ldr	r0, [sp, #0x30]
 8003074:      	cmp	r0, #0x0
 8003076:      	bne	#0x2 <cortex_m::itm::write_aligned_impl::h82cb12a363aec35f+0x2c>
 8003078:      	b	#-0x2 <cortex_m::itm::write_aligned_impl::h82cb12a363aec35f+0x2a>
; }
 800307a:      	b	#0xe6 <cortex_m::itm::write_aligned_impl::h82cb12a363aec35f+0x114>
;     let split = len & !0b11;
 800307c:      	ldr	r0, [sp, #0x30]
 800307e:      	bic	r1, r0, #0x3
 8003082:      	mov	r2, r1
 8003084:      	str	r1, [sp, #0x5c]
;         slice::from_raw_parts(buffer.as_ptr() as *const u32, split >> 2),
 8003086:      	ldr	r0, [sp, #0x38]
 8003088:      	ldr	r1, [sp, #0x34]
 800308a:      	str	r2, [sp, #0x2c]
 800308c:      	bl	#-0x14d8
 8003090:      	str	r0, [sp, #0x28]
 8003092:      	b	#-0x2 <cortex_m::itm::write_aligned_impl::h82cb12a363aec35f+0x44>
 8003094:      	ldr	r0, [sp, #0x28]
 8003096:      	ldr	r1, [sp, #0x2c]
 8003098:      	lsrs	r2, r1, #0x2
 800309a:      	str	r0, [sp, #0x24]
 800309c:      	str	r2, [sp, #0x20]
 800309e:      	b	#-0x2 <cortex_m::itm::write_aligned_impl::h82cb12a363aec35f+0x50>
 80030a0:      	ldr	r0, [sp, #0x24]
 80030a2:      	ldr	r1, [sp, #0x20]
 80030a4:      	bl	#0x2fa
 80030a8:      	str	r0, [sp, #0x1c]
 80030aa:      	str	r1, [sp, #0x18]
 80030ac:      	b	#-0x2 <cortex_m::itm::write_aligned_impl::h82cb12a363aec35f+0x5e>
;     write_words(
 80030ae:      	ldr	r0, [sp, #0x3c]
 80030b0:      	ldr	r1, [sp, #0x1c]
 80030b2:      	ldr	r2, [sp, #0x18]
 80030b4:      	bl	#-0x112
 80030b8:      	b	#-0x2 <cortex_m::itm::write_aligned_impl::h82cb12a363aec35f+0x6a>
;     let mut left = len & 0b11;
 80030ba:      	ldr	r0, [sp, #0x30]
 80030bc:      	and	r1, r0, #0x3
 80030c0:      	str	r1, [sp, #0x44]
;     let mut ptr = buffer.as_ptr().add(split);
 80030c2:      	ldr	r0, [sp, #0x38]
 80030c4:      	ldr	r1, [sp, #0x34]
 80030c6:      	bl	#-0x1512
 80030ca:      	str	r0, [sp, #0x14]
 80030cc:      	b	#-0x2 <cortex_m::itm::write_aligned_impl::h82cb12a363aec35f+0x7e>
 80030ce:      	ldr	r0, [sp, #0x14]
 80030d0:      	ldr	r1, [sp, #0x2c]
 80030d2:      	bl	#-0x14fe
 80030d6:      	str	r0, [sp, #0x48]
 80030d8:      	b	#-0x2 <cortex_m::itm::write_aligned_impl::h82cb12a363aec35f+0x8a>
;     if left > 1 {
 80030da:      	ldr	r0, [sp, #0x44]
 80030dc:      	cmp	r0, #0x2
 80030de:      	blo	#0x2 <cortex_m::itm::write_aligned_impl::h82cb12a363aec35f+0x94>
 80030e0:      	b	#-0x2 <cortex_m::itm::write_aligned_impl::h82cb12a363aec35f+0x92>
;         while !port.is_fifo_ready() {}
 80030e2:      	b	#0x0 <cortex_m::itm::write_aligned_impl::h82cb12a363aec35f+0x96>
;     if left > 1 {
 80030e4:      	b	#0x4a <cortex_m::itm::write_aligned_impl::h82cb12a363aec35f+0xe2>
;         while !port.is_fifo_ready() {}
 80030e6:      	ldr	r0, [sp, #0x3c]
 80030e8:      	bl	#0x340
 80030ec:      	str	r0, [sp, #0x10]
 80030ee:      	b	#-0x2 <cortex_m::itm::write_aligned_impl::h82cb12a363aec35f+0xa0>
 80030f0:      	ldr	r0, [sp, #0x10]
 80030f2:      	lsls	r1, r0, #0x1f
 80030f4:      	cmp	r1, #0x0
 80030f6:      	beq	#0xa <cortex_m::itm::write_aligned_impl::h82cb12a363aec35f+0xb4>
 80030f8:      	b	#-0x2 <cortex_m::itm::write_aligned_impl::h82cb12a363aec35f+0xaa>
;         port.write_u16(ptr::read(ptr as *const u16));
 80030fa:      	ldr	r0, [sp, #0x48]
 80030fc:      	bl	#-0x1694
 8003100:      	str	r0, [sp, #0xc]
 8003102:      	b	#0x0 <cortex_m::itm::write_aligned_impl::h82cb12a363aec35f+0xb6>
;         while !port.is_fifo_ready() {}
 8003104:      	b	#-0x22 <cortex_m::itm::write_aligned_impl::h82cb12a363aec35f+0x96>
;         port.write_u16(ptr::read(ptr as *const u16));
 8003106:      	ldr	r0, [sp, #0x3c]
 8003108:      	ldr	r1, [sp, #0xc]
 800310a:      	bl	#0x2d6
 800310e:      	b	#-0x2 <cortex_m::itm::write_aligned_impl::h82cb12a363aec35f+0xc0>
;         ptr = ptr.offset(2);
 8003110:      	ldr	r0, [sp, #0x48]
 8003112:      	movs	r1, #0x2
 8003114:      	bl	#-0x1510
 8003118:      	str	r0, [sp, #0x8]
 800311a:      	b	#-0x2 <cortex_m::itm::write_aligned_impl::h82cb12a363aec35f+0xcc>
 800311c:      	ldr	r0, [sp, #0x8]
 800311e:      	str	r0, [sp, #0x48]
;         left -= 2;
 8003120:      	ldr	r1, [sp, #0x44]
 8003122:      	subs	r2, r1, #0x2
 8003124:      	cmp	r1, #0x2
 8003126:      	str	r2, [sp, #0x4]
 8003128:      	blo	#0x3c <cortex_m::itm::write_aligned_impl::h82cb12a363aec35f+0x118>
 800312a:      	b	#-0x2 <cortex_m::itm::write_aligned_impl::h82cb12a363aec35f+0xdc>
 800312c:      	ldr	r0, [sp, #0x4]
 800312e:      	str	r0, [sp, #0x44]
;     if left > 1 {
 8003130:      	b	#-0x2 <cortex_m::itm::write_aligned_impl::h82cb12a363aec35f+0xe2>
;     if left == 1 {
 8003132:      	ldr	r0, [sp, #0x44]
 8003134:      	cmp	r0, #0x1
 8003136:      	bne	#0x2 <cortex_m::itm::write_aligned_impl::h82cb12a363aec35f+0xec>
 8003138:      	b	#-0x2 <cortex_m::itm::write_aligned_impl::h82cb12a363aec35f+0xea>
;         while !port.is_fifo_ready() {}
 800313a:      	b	#0x0 <cortex_m::itm::write_aligned_impl::h82cb12a363aec35f+0xee>
;     if left == 1 {
 800313c:      	b	#0x22 <cortex_m::itm::write_aligned_impl::h82cb12a363aec35f+0x112>
;         while !port.is_fifo_ready() {}
 800313e:      	ldr	r0, [sp, #0x3c]
 8003140:      	bl	#0x2e8
 8003144:      	str	r0, [sp]
 8003146:      	b	#-0x2 <cortex_m::itm::write_aligned_impl::h82cb12a363aec35f+0xf8>
 8003148:      	ldr	r0, [sp]
 800314a:      	lsls	r1, r0, #0x1f
 800314c:      	cmp	r1, #0x0
 800314e:      	beq	#0xc <cortex_m::itm::write_aligned_impl::h82cb12a363aec35f+0x10e>
 8003150:      	b	#-0x2 <cortex_m::itm::write_aligned_impl::h82cb12a363aec35f+0x102>
;         port.write_u8(*ptr);
 8003152:      	ldr	r0, [sp, #0x48]
 8003154:      	ldrb	r1, [r0]
 8003156:      	ldr	r0, [sp, #0x3c]
 8003158:      	bl	#0x262
 800315c:      	b	#0x0 <cortex_m::itm::write_aligned_impl::h82cb12a363aec35f+0x110>
;         while !port.is_fifo_ready() {}
 800315e:      	b	#-0x24 <cortex_m::itm::write_aligned_impl::h82cb12a363aec35f+0xee>
;     if left == 1 {
 8003160:      	b	#-0x2 <cortex_m::itm::write_aligned_impl::h82cb12a363aec35f+0x112>
; }
 8003162:      	b	#-0x2 <cortex_m::itm::write_aligned_impl::h82cb12a363aec35f+0x114>
 8003164:      	add	sp, #0x60
 8003166:      	pop	{r7, pc}
;         left -= 2;
 8003168:      	movw	r0, #0x3cb0
 800316c:      	movt	r0, #0x800
 8003170:      	movw	r2, #0x3c98
 8003174:      	movt	r2, #0x800
 8003178:      	movs	r1, #0x21
 800317a:      	bl	#-0x142e
 800317e:      	trap

08003180 <cortex_m::itm::write_all::h084a6807813b8a80>:
; pub fn write_all(port: &mut Stim, buffer: &[u8]) {
 8003180:      	push	{r7, lr}
 8003182:      	mov	r7, sp
 8003184:      	sub	sp, #0x50
 8003186:      	str	r0, [sp, #0x44]
 8003188:      	str	r1, [sp, #0x48]
 800318a:      	str	r2, [sp, #0x4c]
;         let mut len = buffer.len();
 800318c:      	str	r0, [sp, #0x34]
 800318e:      	mov	r0, r1
 8003190:      	str	r1, [sp, #0x30]
 8003192:      	mov	r1, r2
 8003194:      	str	r2, [sp, #0x2c]
 8003196:      	bl	#-0x15fc
 800319a:      	str	r0, [sp, #0x3c]
 800319c:      	b	#-0x2 <cortex_m::itm::write_all::h084a6807813b8a80+0x1e>
;         let mut ptr = buffer.as_ptr();
 800319e:      	ldr	r0, [sp, #0x30]
 80031a0:      	ldr	r1, [sp, #0x2c]
 80031a2:      	bl	#-0x15ee
 80031a6:      	str	r0, [sp, #0x40]
 80031a8:      	b	#-0x2 <cortex_m::itm::write_all::h084a6807813b8a80+0x2a>
;         if len == 0 {
 80031aa:      	ldr	r0, [sp, #0x3c]
 80031ac:      	cmp	r0, #0x0
 80031ae:      	bne	#0x2 <cortex_m::itm::write_all::h084a6807813b8a80+0x34>
 80031b0:      	b	#-0x2 <cortex_m::itm::write_all::h084a6807813b8a80+0x32>
; //! Low level access to Cortex-M processors
 80031b2:      	b	#0x104 <cortex_m::itm::write_all::h084a6807813b8a80+0x13a>
;         if ptr as usize % 2 == 1 {
 80031b4:      	ldrb.w	r0, [sp, #0x40]
 80031b8:      	lsls	r0, r0, #0x1f
 80031ba:      	cmp	r0, #0x0
 80031bc:      	beq	#0x2 <cortex_m::itm::write_all::h084a6807813b8a80+0x42>
 80031be:      	b	#-0x2 <cortex_m::itm::write_all::h084a6807813b8a80+0x40>
;             while !port.is_fifo_ready() {}
 80031c0:      	b	#0x0 <cortex_m::itm::write_all::h084a6807813b8a80+0x44>
;         if ptr as usize % 2 == 1 {
 80031c2:      	b	#0x42 <cortex_m::itm::write_all::h084a6807813b8a80+0x88>
;             while !port.is_fifo_ready() {}
 80031c4:      	ldr	r0, [sp, #0x34]
 80031c6:      	bl	#0x262
 80031ca:      	str	r0, [sp, #0x28]
 80031cc:      	b	#-0x2 <cortex_m::itm::write_all::h084a6807813b8a80+0x4e>
 80031ce:      	ldr	r0, [sp, #0x28]
 80031d0:      	lsls	r1, r0, #0x1f
 80031d2:      	cmp	r1, #0x0
 80031d4:      	beq	#0xc <cortex_m::itm::write_all::h084a6807813b8a80+0x64>
 80031d6:      	b	#-0x2 <cortex_m::itm::write_all::h084a6807813b8a80+0x58>
;             port.write_u8(*ptr);
 80031d8:      	ldr	r0, [sp, #0x40]
 80031da:      	ldrb	r1, [r0]
 80031dc:      	ldr	r0, [sp, #0x34]
 80031de:      	bl	#0x1dc
 80031e2:      	b	#0x0 <cortex_m::itm::write_all::h084a6807813b8a80+0x66>
;             while !port.is_fifo_ready() {}
 80031e4:      	b	#-0x24 <cortex_m::itm::write_all::h084a6807813b8a80+0x44>
;             ptr = ptr.offset(1);
 80031e6:      	ldr	r0, [sp, #0x40]
 80031e8:      	movs	r1, #0x1
 80031ea:      	bl	#-0x15e6
 80031ee:      	str	r0, [sp, #0x24]
 80031f0:      	b	#-0x2 <cortex_m::itm::write_all::h084a6807813b8a80+0x72>
 80031f2:      	ldr	r0, [sp, #0x24]
 80031f4:      	str	r0, [sp, #0x40]
;             len -= 1;
 80031f6:      	ldr	r1, [sp, #0x3c]
 80031f8:      	subs	r2, r1, #0x1
 80031fa:      	cmp	r1, #0x1
 80031fc:      	str	r2, [sp, #0x20]
 80031fe:      	blo	#0xbe <cortex_m::itm::write_all::h084a6807813b8a80+0x140>
 8003200:      	b	#-0x2 <cortex_m::itm::write_all::h084a6807813b8a80+0x82>
 8003202:      	ldr	r0, [sp, #0x20]
 8003204:      	str	r0, [sp, #0x3c]
;         if ptr as usize % 2 == 1 {
 8003206:      	b	#-0x2 <cortex_m::itm::write_all::h084a6807813b8a80+0x88>
;         if ptr as usize % 4 == 2 {
 8003208:      	ldr	r0, [sp, #0x40]
 800320a:      	and	r0, r0, #0x3
 800320e:      	cmp	r0, #0x2
 8003210:      	bne	#0x8 <cortex_m::itm::write_all::h084a6807813b8a80+0x9c>
 8003212:      	b	#-0x2 <cortex_m::itm::write_all::h084a6807813b8a80+0x94>
;             if len > 1 {
 8003214:      	ldr	r0, [sp, #0x3c]
 8003216:      	cmp	r0, #0x1
 8003218:      	bhi	#0x2 <cortex_m::itm::write_all::h084a6807813b8a80+0x9e>
 800321a:      	b	#0x2 <cortex_m::itm::write_all::h084a6807813b8a80+0xa0>
;         if ptr as usize % 4 == 2 {
 800321c:      	b	#0x7e <cortex_m::itm::write_all::h084a6807813b8a80+0x11e>
;                 while !port.is_fifo_ready() {}
 800321e:      	b	#0x6 <cortex_m::itm::write_all::h084a6807813b8a80+0xa8>
;                 if len == 1 {
 8003220:      	ldr	r0, [sp, #0x3c]
 8003222:      	cmp	r0, #0x1
 8003224:      	beq	#0x4c <cortex_m::itm::write_all::h084a6807813b8a80+0xf4>
 8003226:      	b	#0x4c <cortex_m::itm::write_all::h084a6807813b8a80+0xf6>
;                 while !port.is_fifo_ready() {}
 8003228:      	ldr	r0, [sp, #0x34]
 800322a:      	bl	#0x1fe
 800322e:      	str	r0, [sp, #0x1c]
 8003230:      	b	#-0x2 <cortex_m::itm::write_all::h084a6807813b8a80+0xb2>
 8003232:      	ldr	r0, [sp, #0x1c]
 8003234:      	lsls	r1, r0, #0x1f
 8003236:      	cmp	r1, #0x0
 8003238:      	beq	#0xa <cortex_m::itm::write_all::h084a6807813b8a80+0xc6>
 800323a:      	b	#-0x2 <cortex_m::itm::write_all::h084a6807813b8a80+0xbc>
;                 port.write_u16(ptr::read(ptr as *const u16));
 800323c:      	ldr	r0, [sp, #0x40]
 800323e:      	bl	#-0x17d6
 8003242:      	str	r0, [sp, #0x18]
 8003244:      	b	#0x0 <cortex_m::itm::write_all::h084a6807813b8a80+0xc8>
;                 while !port.is_fifo_ready() {}
 8003246:      	b	#-0x22 <cortex_m::itm::write_all::h084a6807813b8a80+0xa8>
;                 port.write_u16(ptr::read(ptr as *const u16));
 8003248:      	ldr	r0, [sp, #0x34]
 800324a:      	ldr	r1, [sp, #0x18]
 800324c:      	bl	#0x194
 8003250:      	b	#-0x2 <cortex_m::itm::write_all::h084a6807813b8a80+0xd2>
;                 ptr = ptr.offset(2);
 8003252:      	ldr	r0, [sp, #0x40]
 8003254:      	movs	r1, #0x2
 8003256:      	bl	#-0x1652
 800325a:      	str	r0, [sp, #0x14]
 800325c:      	b	#-0x2 <cortex_m::itm::write_all::h084a6807813b8a80+0xde>
 800325e:      	ldr	r0, [sp, #0x14]
 8003260:      	str	r0, [sp, #0x40]
;                 len -= 2;
 8003262:      	ldr	r1, [sp, #0x3c]
 8003264:      	subs	r2, r1, #0x2
 8003266:      	cmp	r1, #0x2
 8003268:      	str	r2, [sp, #0x10]
 800326a:      	blo	#0x6a <cortex_m::itm::write_all::h084a6807813b8a80+0x158>
 800326c:      	b	#-0x2 <cortex_m::itm::write_all::h084a6807813b8a80+0xee>
 800326e:      	ldr	r0, [sp, #0x10]
 8003270:      	str	r0, [sp, #0x3c]
;         if ptr as usize % 4 == 2 {
 8003272:      	b	#0x28 <cortex_m::itm::write_all::h084a6807813b8a80+0x11e>
;                     while !port.is_fifo_ready() {}
 8003274:      	b	#0x0 <cortex_m::itm::write_all::h084a6807813b8a80+0xf8>
;                 if len == 1 {
 8003276:      	b	#0x22 <cortex_m::itm::write_all::h084a6807813b8a80+0x11c>
;                     while !port.is_fifo_ready() {}
 8003278:      	ldr	r0, [sp, #0x34]
 800327a:      	bl	#0x1ae
 800327e:      	str	r0, [sp, #0xc]
 8003280:      	b	#-0x2 <cortex_m::itm::write_all::h084a6807813b8a80+0x102>
 8003282:      	ldr	r0, [sp, #0xc]
 8003284:      	lsls	r1, r0, #0x1f
 8003286:      	cmp	r1, #0x0
 8003288:      	beq	#0xc <cortex_m::itm::write_all::h084a6807813b8a80+0x118>
 800328a:      	b	#-0x2 <cortex_m::itm::write_all::h084a6807813b8a80+0x10c>
;                     port.write_u8(*ptr);
 800328c:      	ldr	r0, [sp, #0x40]
 800328e:      	ldrb	r1, [r0]
 8003290:      	ldr	r0, [sp, #0x34]
 8003292:      	bl	#0x128
 8003296:      	b	#0x0 <cortex_m::itm::write_all::h084a6807813b8a80+0x11a>
;                     while !port.is_fifo_ready() {}
 8003298:      	b	#-0x24 <cortex_m::itm::write_all::h084a6807813b8a80+0xf8>
;                 if len == 1 {
 800329a:      	b	#-0x2 <cortex_m::itm::write_all::h084a6807813b8a80+0x11c>
; //! Low level access to Cortex-M processors
 800329c:      	b	#0x1a <cortex_m::itm::write_all::h084a6807813b8a80+0x13a>
;         write_aligned_impl(port, slice::from_raw_parts(ptr, len));
 800329e:      	ldr	r0, [sp, #0x40]
 80032a0:      	ldr	r1, [sp, #0x3c]
 80032a2:      	bl	#0xe0
 80032a6:      	str	r0, [sp, #0x8]
 80032a8:      	str	r1, [sp, #0x4]
 80032aa:      	b	#-0x2 <cortex_m::itm::write_all::h084a6807813b8a80+0x12c>
 80032ac:      	ldr	r0, [sp, #0x34]
 80032ae:      	ldr	r1, [sp, #0x8]
 80032b0:      	ldr	r2, [sp, #0x4]
 80032b2:      	bl	#-0x266
 80032b6:      	b	#-0x2 <cortex_m::itm::write_all::h084a6807813b8a80+0x138>
; }
 80032b8:      	b	#0x0 <cortex_m::itm::write_all::h084a6807813b8a80+0x13c>
 80032ba:      	b	#-0x2 <cortex_m::itm::write_all::h084a6807813b8a80+0x13c>
 80032bc:      	add	sp, #0x50
 80032be:      	pop	{r7, pc}
;             len -= 1;
 80032c0:      	movw	r0, #0x3cb0
 80032c4:      	movt	r0, #0x800
 80032c8:      	movw	r2, #0x3cd4
 80032cc:      	movt	r2, #0x800
 80032d0:      	movs	r1, #0x21
 80032d2:      	bl	#-0x1586
 80032d6:      	trap
;                 len -= 2;
 80032d8:      	movw	r0, #0x3cb0
 80032dc:      	movt	r0, #0x800
 80032e0:      	movw	r2, #0x3ce4
 80032e4:      	movt	r2, #0x800
 80032e8:      	movs	r1, #0x21
 80032ea:      	bl	#-0x159e
 80032ee:      	trap

080032f0 <core::iter::range::<impl core::iter::traits::iterator::Iterator for core::ops::range::Range<A>>::next::h816eee1709c637b6>:
;     fn next(&mut self) -> Option<A> {
 80032f0:      	push	{r7, lr}
 80032f2:      	mov	r7, sp
 80032f4:      	sub	sp, #0x28
 80032f6:      	str	r0, [sp, #0x20]
;         if self.start < self.end {
 80032f8:      	adds	r1, r0, #0x4
 80032fa:      	str	r0, [sp, #0x14]
 80032fc:      	bl	#0x6e
 8003300:      	str	r0, [sp, #0x10]
 8003302:      	b	#-0x2 <core::iter::range::<impl core::iter::traits::iterator::Iterator for core::ops::range::Range<A>>::next::h816eee1709c637b6+0x14>
 8003304:      	ldr	r0, [sp, #0x10]
 8003306:      	lsls	r1, r0, #0x1f
 8003308:      	cmp	r1, #0x0
 800330a:      	beq	#0xa <core::iter::range::<impl core::iter::traits::iterator::Iterator for core::ops::range::Range<A>>::next::h816eee1709c637b6+0x28>
 800330c:      	b	#-0x2 <core::iter::range::<impl core::iter::traits::iterator::Iterator for core::ops::range::Range<A>>::next::h816eee1709c637b6+0x1e>
;             let n = unsafe { Step::forward_unchecked(self.start.clone(), 1) };
 800330e:      	ldr	r0, [sp, #0x14]
 8003310:      	bl	#-0x16ee
 8003314:      	str	r0, [sp, #0xc]
 8003316:      	b	#0x4 <core::iter::range::<impl core::iter::traits::iterator::Iterator for core::ops::range::Range<A>>::next::h816eee1709c637b6+0x2e>
 8003318:      	movs	r0, #0x0
;             None
 800331a:      	str	r0, [sp, #0x18]
;         if self.start < self.end {
 800331c:      	b	#0x24 <core::iter::range::<impl core::iter::traits::iterator::Iterator for core::ops::range::Range<A>>::next::h816eee1709c637b6+0x54>
 800331e:      	movs	r1, #0x1
;             let n = unsafe { Step::forward_unchecked(self.start.clone(), 1) };
 8003320:      	ldr	r0, [sp, #0xc]
 8003322:      	bl	#0x30
 8003326:      	mov	r1, r0
 8003328:      	str	r0, [sp, #0x24]
 800332a:      	str	r1, [sp, #0x8]
 800332c:      	b	#-0x2 <core::iter::range::<impl core::iter::traits::iterator::Iterator for core::ops::range::Range<A>>::next::h816eee1709c637b6+0x3e>
;             Some(mem::replace(&mut self.start, n))
 800332e:      	ldr	r0, [sp, #0x14]
 8003330:      	ldr	r1, [sp, #0x8]
 8003332:      	bl	#-0x17ee
 8003336:      	str	r0, [sp, #0x4]
 8003338:      	b	#-0x2 <core::iter::range::<impl core::iter::traits::iterator::Iterator for core::ops::range::Range<A>>::next::h816eee1709c637b6+0x4a>
 800333a:      	ldr	r0, [sp, #0x4]
 800333c:      	str	r0, [sp, #0x1c]
 800333e:      	movs	r1, #0x1
 8003340:      	str	r1, [sp, #0x18]
;         if self.start < self.end {
 8003342:      	b	#-0x2 <core::iter::range::<impl core::iter::traits::iterator::Iterator for core::ops::range::Range<A>>::next::h816eee1709c637b6+0x54>
;     }
 8003344:      	ldr	r0, [sp, #0x18]
 8003346:      	ldr	r1, [sp, #0x1c]
 8003348:      	add	sp, #0x28
 800334a:      	pop	{r7, pc}

0800334c <<I as core::iter::traits::collect::IntoIterator>::into_iter::ha08dfec0fb9ea064>:
;     fn into_iter(self) -> I {
 800334c:      	sub	sp, #0x8
 800334e:      	str	r0, [sp]
 8003350:      	str	r1, [sp, #0x4]
;     }
 8003352:      	add	sp, #0x8
 8003354:      	bx	lr

08003356 <<usize as core::iter::range::Step>::forward_unchecked::h31fa25cdb1066a5d>:
;         unsafe fn forward_unchecked(start: Self, n: usize) -> Self {
 8003356:      	push	{r7, lr}
 8003358:      	mov	r7, sp
 800335a:      	sub	sp, #0x10
 800335c:      	str	r0, [sp, #0x8]
 800335e:      	str	r1, [sp, #0xc]
;             unsafe { start.unchecked_add(n as Self) }
 8003360:      	bl	#-0x17a2
 8003364:      	str	r0, [sp, #0x4]
 8003366:      	b	#-0x2 <<usize as core::iter::range::Step>::forward_unchecked::h31fa25cdb1066a5d+0x12>
;         }
 8003368:      	ldr	r0, [sp, #0x4]
 800336a:      	add	sp, #0x10
 800336c:      	pop	{r7, pc}

0800336e <core::cmp::impls::<impl core::cmp::PartialOrd for usize>::lt::ha745b66c190b35ed>:
;                 fn lt(&self, other: &$t) -> bool { (*self) < (*other) }
 800336e:      	sub	sp, #0x8
 8003370:      	str	r0, [sp]
 8003372:      	str	r1, [sp, #0x4]
 8003374:      	ldr	r0, [r0]
 8003376:      	ldr	r1, [r1]
 8003378:      	movs	r2, #0x0
 800337a:      	cmp	r0, r1
 800337c:      	it	lo
 800337e:      	movlo	r2, #0x1
 8003380:      	mov	r0, r2
 8003382:      	add	sp, #0x8
 8003384:      	bx	lr

08003386 <core::slice::raw::from_raw_parts::h61f0a20b2ab57844>:
; pub unsafe fn from_raw_parts<'a, T>(data: *const T, len: usize) -> &'a [T] {
 8003386:      	push	{r7, lr}
 8003388:      	mov	r7, sp
 800338a:      	sub	sp, #0x10
 800338c:      	str	r0, [sp, #0x8]
 800338e:      	str	r1, [sp, #0xc]
;     unsafe { &*ptr::slice_from_raw_parts(data, len) }
 8003390:      	bl	#-0x1b20
 8003394:      	str	r0, [sp, #0x4]
 8003396:      	str	r1, [sp]
 8003398:      	b	#-0x2 <core::slice::raw::from_raw_parts::h61f0a20b2ab57844+0x14>
; }
 800339a:      	ldr	r0, [sp, #0x4]
 800339c:      	ldr	r1, [sp]
 800339e:      	add	sp, #0x10
 80033a0:      	pop	{r7, pc}

080033a2 <core::slice::raw::from_raw_parts::h6f21af8ec83301c6>:
; pub unsafe fn from_raw_parts<'a, T>(data: *const T, len: usize) -> &'a [T] {
 80033a2:      	push	{r7, lr}
 80033a4:      	mov	r7, sp
 80033a6:      	sub	sp, #0x10
 80033a8:      	str	r0, [sp, #0x8]
 80033aa:      	str	r1, [sp, #0xc]
;     unsafe { &*ptr::slice_from_raw_parts(data, len) }
 80033ac:      	bl	#-0x1b22
 80033b0:      	str	r0, [sp, #0x4]
 80033b2:      	str	r1, [sp]
 80033b4:      	b	#-0x2 <core::slice::raw::from_raw_parts::h6f21af8ec83301c6+0x14>
; }
 80033b6:      	ldr	r0, [sp, #0x4]
 80033b8:      	ldr	r1, [sp]
 80033ba:      	add	sp, #0x10
 80033bc:      	pop	{r7, pc}

080033be <cortex_m::peripheral::itm::Stim::write_u8::h7589eb53a4f03560>:
;     pub fn write_u8(&mut self, value: u8) {
 80033be:      	push	{r7, lr}
 80033c0:      	mov	r7, sp
 80033c2:      	sub	sp, #0x10
 80033c4:      	mov	r2, r1
 80033c6:      	str	r0, [sp, #0x8]
 80033c8:      	strb	r1, [r7, #-1]
;         unsafe { ptr::write_volatile(self.register.get() as *mut u8, value) }
 80033cc:      	str	r2, [sp, #0x4]
 80033ce:      	bl	#-0x17b4
 80033d2:      	str	r0, [sp]
 80033d4:      	b	#-0x2 <cortex_m::peripheral::itm::Stim::write_u8::h7589eb53a4f03560+0x18>
 80033d6:      	ldr	r0, [sp]
 80033d8:      	ldr	r1, [sp, #0x4]
 80033da:      	bl	#-0x1bb2
 80033de:      	b	#-0x2 <cortex_m::peripheral::itm::Stim::write_u8::h7589eb53a4f03560+0x22>
;     }
 80033e0:      	add	sp, #0x10
 80033e2:      	pop	{r7, pc}

080033e4 <cortex_m::peripheral::itm::Stim::write_u16::h9f35487776a9699b>:
;     pub fn write_u16(&mut self, value: u16) {
 80033e4:      	push	{r7, lr}
 80033e6:      	mov	r7, sp
 80033e8:      	sub	sp, #0x10
 80033ea:      	mov	r2, r1
 80033ec:      	str	r0, [sp, #0x8]
 80033ee:      	strh	r1, [r7, #-2]
;         unsafe { ptr::write_volatile(self.register.get() as *mut u16, value) }
 80033f2:      	str	r2, [sp, #0x4]
 80033f4:      	bl	#-0x17da
 80033f8:      	str	r0, [sp]
 80033fa:      	b	#-0x2 <cortex_m::peripheral::itm::Stim::write_u16::h9f35487776a9699b+0x18>
 80033fc:      	ldr	r0, [sp]
 80033fe:      	ldr	r1, [sp, #0x4]
 8003400:      	bl	#-0x1bf8
 8003404:      	b	#-0x2 <cortex_m::peripheral::itm::Stim::write_u16::h9f35487776a9699b+0x22>
;     }
 8003406:      	add	sp, #0x10
 8003408:      	pop	{r7, pc}

0800340a <cortex_m::peripheral::itm::Stim::write_u32::hc3636ce0ff109366>:
;     pub fn write_u32(&mut self, value: u32) {
 800340a:      	push	{r7, lr}
 800340c:      	mov	r7, sp
 800340e:      	sub	sp, #0x10
 8003410:      	str	r0, [sp, #0x8]
 8003412:      	str	r1, [sp, #0xc]
;         unsafe { ptr::write_volatile(self.register.get(), value) }
 8003414:      	str	r1, [sp, #0x4]
 8003416:      	bl	#-0x17fc
 800341a:      	str	r0, [sp]
 800341c:      	b	#-0x2 <cortex_m::peripheral::itm::Stim::write_u32::hc3636ce0ff109366+0x14>
 800341e:      	ldr	r0, [sp]
 8003420:      	ldr	r1, [sp, #0x4]
 8003422:      	bl	#-0x1c08
 8003426:      	b	#-0x2 <cortex_m::peripheral::itm::Stim::write_u32::hc3636ce0ff109366+0x1e>
;     }
 8003428:      	add	sp, #0x10
 800342a:      	pop	{r7, pc}

0800342c <cortex_m::peripheral::itm::Stim::is_fifo_ready::hc5014190e6dfeb2d>:
;     pub fn is_fifo_ready(&self) -> bool {
 800342c:      	push	{r7, lr}
 800342e:      	mov	r7, sp
 8003430:      	sub	sp, #0x10
 8003432:      	str	r0, [sp, #0xc]
;         unsafe { ptr::read_volatile(self.register.get()) & 0b1 == 1 }
 8003434:      	bl	#-0x181a
 8003438:      	str	r0, [sp, #0x8]
 800343a:      	b	#-0x2 <cortex_m::peripheral::itm::Stim::is_fifo_ready::hc5014190e6dfeb2d+0x10>
 800343c:      	ldr	r0, [sp, #0x8]
 800343e:      	bl	#-0x1c4a
 8003442:      	str	r0, [sp, #0x4]
 8003444:      	b	#-0x2 <cortex_m::peripheral::itm::Stim::is_fifo_ready::hc5014190e6dfeb2d+0x1a>
;     }
 8003446:      	ldr	r0, [sp, #0x4]
 8003448:      	and	r0, r0, #0x1
 800344c:      	add	sp, #0x10
 800344e:      	pop	{r7, pc}

08003450 <cortex_m::interrupt::disable::h33120c9e8091752a>:
; pub fn disable() {
 8003450:      	push	{r7, lr}
 8003452:      	mov	r7, sp
;     call_asm!(__cpsid());
 8003454:      	bl	#-0x1828
 8003458:      	b	#-0x2 <cortex_m::interrupt::disable::h33120c9e8091752a+0xa>
; }
 800345a:      	pop	{r7, pc}

0800345c <__aeabi_memcpy>:
 800345c:      	push	{r4, r5, r6, r7, lr}
 800345e:      	add	r7, sp, #0xc
 8003460:      	str	r8, [sp, #-4]!
 8003464:      	cbz	r2, #0x10
 8003466:      	subs	r3, r2, #0x1
 8003468:      	and	r12, r2, #0x3
 800346c:      	cmp	r3, #0x3
 800346e:      	bhs	#0xc <__aeabi_memcpy+0x22>
 8003470:      	movs	r2, #0x0
 8003472:      	cmp.w	r12, #0x0
 8003476:      	bne	#0x3e <__aeabi_memcpy+0x5c>
 8003478:      	ldr	r8, [sp], #4
 800347c:      	pop	{r4, r5, r6, r7, pc}
 800347e:      	bic	r2, r2, #0x3
 8003482:      	add.w	lr, r0, #0x1
 8003486:      	rsbs	r4, r2, #0
 8003488:      	add.w	r8, r1, #0x1
 800348c:      	mvn	r2, #0x3
 8003490:      	add.w	r5, r8, r2
 8003494:      	add.w	r3, lr, r2
 8003498:      	adds	r2, #0x4
 800349a:      	ldrb	r6, [r5, #0x3]
 800349c:      	strb	r6, [r3, #0x3]
 800349e:      	ldrb	r6, [r5, #0x4]
 80034a0:      	strb	r6, [r3, #0x4]
 80034a2:      	ldrb	r6, [r5, #0x5]
 80034a4:      	strb	r6, [r3, #0x5]
 80034a6:      	ldrb	r5, [r5, #0x6]
 80034a8:      	strb	r5, [r3, #0x6]
 80034aa:      	adds	r3, r4, r2
 80034ac:      	adds	r3, #0x4
 80034ae:      	bne	#-0x22 <__aeabi_memcpy+0x34>
 80034b0:      	adds	r2, #0x4
 80034b2:      	cmp.w	r12, #0x0
 80034b6:      	beq	#-0x42 <__aeabi_memcpy+0x1c>
 80034b8:      	ldrb	r3, [r1, r2]
 80034ba:      	cmp.w	r12, #0x1
 80034be:      	strb	r3, [r0, r2]
 80034c0:      	beq	#-0x4c <__aeabi_memcpy+0x1c>
 80034c2:      	adds	r3, r2, #0x1
 80034c4:      	cmp.w	r12, #0x2
 80034c8:      	ldrb	r6, [r1, r3]
 80034ca:      	strb	r6, [r0, r3]
 80034cc:      	beq	#-0x58 <__aeabi_memcpy+0x1c>
 80034ce:      	adds	r2, #0x2
 80034d0:      	ldrb	r1, [r1, r2]
 80034d2:      	strb	r1, [r0, r2]
 80034d4:      	ldr	r8, [sp], #4
 80034d8:      	pop	{r4, r5, r6, r7, pc}

080034da <__aeabi_memcpy4>:
 80034da:      	push	{r4, r5, r7, lr}
 80034dc:      	add	r7, sp, #0x8
 80034de:      	cmp	r2, #0x4
 80034e0:      	blo	#0x62 <__aeabi_memcpy4+0x6c>
 80034e2:      	sub.w	r12, r2, #0x4
 80034e6:      	movs	r3, #0x1
 80034e8:      	add.w	r3, r3, r12, lsr #2
 80034ec:      	ands	lr, r3, #0x3
 80034f0:      	beq	#0x2e <__aeabi_memcpy4+0x48>
 80034f2:      	mov	r3, r1
 80034f4:      	mov	r4, r0
 80034f6:      	ldr	r5, [r3], #4
 80034fa:      	cmp.w	lr, #0x1
 80034fe:      	str	r5, [r4], #4
 8003502:      	bne	#0xc <__aeabi_memcpy4+0x38>
 8003504:      	mov	r2, r12
 8003506:      	mov	r0, r4
 8003508:      	mov	r1, r3
 800350a:      	cmp.w	r12, #0xc
 800350e:      	bhs	#0x16 <__aeabi_memcpy4+0x4e>
 8003510:      	b	#0x32 <__aeabi_memcpy4+0x6c>
 8003512:      	ldr	r3, [r1, #0x4]
 8003514:      	cmp.w	lr, #0x2
 8003518:      	str	r3, [r0, #0x4]
 800351a:      	bne	#0x30 <__aeabi_memcpy4+0x74>
 800351c:      	subs	r2, #0x8
 800351e:      	adds	r1, #0x8
 8003520:      	adds	r0, #0x8
 8003522:      	cmp.w	r12, #0xc
 8003526:      	blo	#0x1c <__aeabi_memcpy4+0x6c>
 8003528:      	ldr	r3, [r1]
 800352a:      	subs	r2, #0x10
 800352c:      	str	r3, [r0]
 800352e:      	cmp	r2, #0x3
 8003530:      	ldr	r3, [r1, #0x4]
 8003532:      	str	r3, [r0, #0x4]
 8003534:      	ldr	r3, [r1, #0x8]
 8003536:      	str	r3, [r0, #0x8]
 8003538:      	ldr	r3, [r1, #0xc]
 800353a:      	add.w	r1, r1, #0x10
 800353e:      	str	r3, [r0, #0xc]
 8003540:      	add.w	r0, r0, #0x10
 8003544:      	bhi	#-0x20 <__aeabi_memcpy4+0x4e>
 8003546:      	pop.w	{r4, r5, r7, lr}
 800354a:      	b.w	#-0xf2 <__aeabi_memcpy>
 800354e:      	ldr	r3, [r1, #0x8]
 8003550:      	subs	r2, #0xc
 8003552:      	str	r3, [r0, #0x8]
 8003554:      	adds	r1, #0xc
 8003556:      	adds	r0, #0xc
 8003558:      	cmp.w	r12, #0xc
 800355c:      	bhs	#-0x38 <__aeabi_memcpy4+0x4e>
 800355e:      	b	#-0x1c <__aeabi_memcpy4+0x6c>

08003560 <__aeabi_memset>:
 8003560:      	push	{r4, r6, r7, lr}
 8003562:      	add	r7, sp, #0x8
 8003564:      	cbz	r1, #0x3e
 8003566:      	subs	r3, r1, #0x1
 8003568:      	and	r12, r1, #0x3
 800356c:      	cmp	r3, #0x3
 800356e:      	bhs	#0x2 <__aeabi_memset+0x14>
 8003570:      	movs	r1, #0x0
 8003572:      	b	#0x22 <__aeabi_memset+0x38>
 8003574:      	bic	r1, r1, #0x3
 8003578:      	add.w	lr, r0, #0x1
 800357c:      	rsbs	r3, r1, #0
 800357e:      	mvn	r1, #0x3
 8003582:      	add.w	r4, lr, r1
 8003586:      	adds	r1, #0x4
 8003588:      	strb	r2, [r4, #0x6]
 800358a:      	strb	r2, [r4, #0x5]
 800358c:      	strb	r2, [r4, #0x4]
 800358e:      	strb	r2, [r4, #0x3]
 8003590:      	adds	r4, r3, r1
 8003592:      	adds	r4, #0x4
 8003594:      	bne	#-0x16 <__aeabi_memset+0x22>
 8003596:      	adds	r1, #0x4
 8003598:      	cmp.w	r12, #0x0
 800359c:      	itt	ne
 800359e:      	strbne	r2, [r0, r1]
 80035a0:      	cmpne.w	r12, #0x1
 80035a4:      	bne	#0x0 <__aeabi_memset+0x48>
 80035a6:      	pop	{r4, r6, r7, pc}
 80035a8:      	add	r0, r1
 80035aa:      	cmp.w	r12, #0x2
 80035ae:      	strb	r2, [r0, #0x1]
 80035b0:      	it	ne
 80035b2:      	strbne	r2, [r0, #0x2]
 80035b4:      	pop	{r4, r6, r7, pc}

080035b6 <__aeabi_memset4>:
 80035b6:      	push	{r4, r6, r7, lr}
 80035b8:      	add	r7, sp, #0x8
 80035ba:      	mov	r3, r2
 80035bc:      	uxtb	r2, r2
 80035be:      	cmp	r1, #0x4
 80035c0:      	blo	#0x72 <__aeabi_memset4+0x80>
 80035c2:      	sub.w	lr, r1, #0x4
 80035c6:      	orr.w	r3, r2, r3, lsl #24
 80035ca:      	movs	r4, #0x1
 80035cc:      	orr.w	r3, r3, r2, lsl #16
 80035d0:      	add.w	r4, r4, lr, lsr #2
 80035d4:      	orr.w	r3, r3, r2, lsl #8
 80035d8:      	ands	r4, r4, #0x3
 80035dc:      	beq	#0x14 <__aeabi_memset4+0x3e>
 80035de:      	mov	r12, r0
 80035e0:      	cmp	r4, #0x1
 80035e2:      	str	r3, [r12], #4
 80035e6:      	bne	#0x12 <__aeabi_memset4+0x46>
 80035e8:      	mov	r1, lr
 80035ea:      	mov	r0, r12
 80035ec:      	cmp.w	lr, #0xc
 80035f0:      	bhs	#0x32 <__aeabi_memset4+0x70>
 80035f2:      	b	#0x18 <__aeabi_memset4+0x58>
 80035f4:      	cmp.w	lr, #0xc
 80035f8:      	bhs	#0x2a <__aeabi_memset4+0x70>
 80035fa:      	b	#0x10 <__aeabi_memset4+0x58>
 80035fc:      	cmp	r4, #0x2
 80035fe:      	str	r3, [r0, #0x4]
 8003600:      	bne	#0x14 <__aeabi_memset4+0x62>
 8003602:      	adds	r0, #0x8
 8003604:      	subs	r1, #0x8
 8003606:      	mov	r12, r0
 8003608:      	cmp.w	lr, #0xc
 800360c:      	bhs	#0x16 <__aeabi_memset4+0x70>
 800360e:      	mov	r0, r12
 8003610:      	pop.w	{r4, r6, r7, lr}
 8003614:      	b.w	#-0xb8 <__aeabi_memset>
 8003618:      	str	r3, [r0, #0x8]
 800361a:      	adds	r0, #0xc
 800361c:      	subs	r1, #0xc
 800361e:      	mov	r12, r0
 8003620:      	cmp.w	lr, #0xc
 8003624:      	blo	#-0x1a <__aeabi_memset4+0x58>
 8003626:      	strd	r3, r3, [r0]
 800362a:      	subs	r1, #0x10
 800362c:      	strd	r3, r3, [r0, #8]
 8003630:      	adds	r0, #0x10
 8003632:      	cmp	r1, #0x3
 8003634:      	bhi	#-0x12 <__aeabi_memset4+0x70>
 8003636:      	mov	r12, r0
 8003638:      	mov	r0, r12
 800363a:      	pop.w	{r4, r6, r7, lr}
 800363e:      	b.w	#-0xe2 <__aeabi_memset>

08003642 <HardFaultTrampoline>:
 8003642:      	mov	r0, lr
 8003644:      	movs	r1, #0x4
 8003646:      	tst	r0, r1
 8003648:      	bne	#0x4 <HardFaultTrampoline+0xe>
 800364a:      	mrs	r0, msp
 800364e:      	b	#0x4 <HardFault_>
 8003650:      	mrs	r0, psp
 8003654:      	b	#-0x2 <HardFault_>

08003656 <HardFault_>:
; pub unsafe extern "C" fn HardFault_(ef: &ExceptionFrame) -> ! {
 8003656:      	push	{r7, lr}
 8003658:      	mov	r7, sp
 800365a:      	sub	sp, #0x8
 800365c:      	str	r0, [sp, #0x4]
;     loop {
 800365e:      	b	#-0x2 <HardFault_+0xa>
 8003660:      	movs	r0, #0x4
;         atomic::compiler_fence(Ordering::SeqCst);
 8003662:      	strb	r0, [r7, #-5]
 8003666:      	ldrb	r0, [r7, #-5]
 800366a:      	bl	#-0x1ed2
 800366e:      	b	#-0x2 <HardFault_+0x1a>
;     loop {
 8003670:      	b	#-0x14 <HardFault_+0xa>
 8003672:      	bmi	#-0x58 <__aeabi_memset4+0x68>
